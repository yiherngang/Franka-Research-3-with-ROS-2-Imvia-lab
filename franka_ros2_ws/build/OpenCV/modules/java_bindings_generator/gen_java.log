
Remapped configured files (3):
{'/home/adminlab/franka_ros2_ws/src/opencv/modules/core/misc/java/src/java/core+Core.jcode.in': '/home/adminlab/franka_ros2_ws/build/OpenCV/configured/modules/core/misc/java/src/java/core+Core.jcode',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/java/generator/android/java/org/opencv/android/OpenCVLoader.java.in': '/home/adminlab/franka_ros2_ws/build/OpenCV/configured/modules/java/generator/android/java/org/opencv/android/OpenCVLoader.java',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/java/generator/src/java/org/opencv/osgi/OpenCVNativeLoader.java.in': '/home/adminlab/franka_ros2_ws/build/OpenCV/configured/modules/java/generator/src/java/org/opencv/osgi/OpenCVNativeLoader.java'}

=== MODULE: core (/home/adminlab/franka_ros2_ws/src/opencv/modules/core) ===


Files (4):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core/base.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core/utility.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/core/misc/java/src/cpp/core_manual.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Core : , name: Core, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core/base.hpp =====
Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.ipp', 'cv.ogl']

--- Incoming ---
[   'enum cv.Error.Code',
    '',
    [],
    [   ['const cv.Error.StsOk', '0', [], [], None, ''],
        ['const cv.Error.StsBackTrace', '-1', [], [], None, ''],
        ['const cv.Error.StsError', '-2', [], [], None, ''],
        ['const cv.Error.StsInternal', '-3', [], [], None, ''],
        ['const cv.Error.StsNoMem', '-4', [], [], None, ''],
        ['const cv.Error.StsBadArg', '-5', [], [], None, ''],
        ['const cv.Error.StsBadFunc', '-6', [], [], None, ''],
        ['const cv.Error.StsNoConv', '-7', [], [], None, ''],
        ['const cv.Error.StsAutoTrace', '-8', [], [], None, ''],
        ['const cv.Error.HeaderIsNull', '-9', [], [], None, ''],
        ['const cv.Error.BadImageSize', '-10', [], [], None, ''],
        ['const cv.Error.BadOffset', '-11', [], [], None, ''],
        ['const cv.Error.BadDataPtr', '-12', [], [], None, ''],
        ['const cv.Error.BadStep', '-13', [], [], None, ''],
        ['const cv.Error.BadModelOrChSeq', '-14', [], [], None, ''],
        ['const cv.Error.BadNumChannels', '-15', [], [], None, ''],
        ['const cv.Error.BadNumChannel1U', '-16', [], [], None, ''],
        ['const cv.Error.BadDepth', '-17', [], [], None, ''],
        ['const cv.Error.BadAlphaChannel', '-18', [], [], None, ''],
        ['const cv.Error.BadOrder', '-19', [], [], None, ''],
        ['const cv.Error.BadOrigin', '-20', [], [], None, ''],
        ['const cv.Error.BadAlign', '-21', [], [], None, ''],
        ['const cv.Error.BadCallBack', '-22', [], [], None, ''],
        ['const cv.Error.BadTileSize', '-23', [], [], None, ''],
        ['const cv.Error.BadCOI', '-24', [], [], None, ''],
        ['const cv.Error.BadROISize', '-25', [], [], None, ''],
        ['const cv.Error.MaskIsTiled', '-26', [], [], None, ''],
        ['const cv.Error.StsNullPtr', '-27', [], [], None, ''],
        ['const cv.Error.StsVecLengthErr', '-28', [], [], None, ''],
        ['const cv.Error.StsFilterStructContentErr', '-29', [], [], None, ''],
        ['const cv.Error.StsKernelStructContentErr', '-30', [], [], None, ''],
        ['const cv.Error.StsFilterOffsetErr', '-31', [], [], None, ''],
        ['const cv.Error.StsBadSize', '-201', [], [], None, ''],
        ['const cv.Error.StsDivByZero', '-202', [], [], None, ''],
        ['const cv.Error.StsInplaceNotSupported', '-203', [], [], None, ''],
        ['const cv.Error.StsObjectNotFound', '-204', [], [], None, ''],
        ['const cv.Error.StsUnmatchedFormats', '-205', [], [], None, ''],
        ['const cv.Error.StsBadFlag', '-206', [], [], None, ''],
        ['const cv.Error.StsBadPoint', '-207', [], [], None, ''],
        ['const cv.Error.StsBadMask', '-208', [], [], None, ''],
        ['const cv.Error.StsUnmatchedSizes', '-209', [], [], None, ''],
        ['const cv.Error.StsUnsupportedFormat', '-210', [], [], None, ''],
        ['const cv.Error.StsOutOfRange', '-211', [], [], None, ''],
        ['const cv.Error.StsParseError', '-212', [], [], None, ''],
        ['const cv.Error.StsNotImplemented', '-213', [], [], None, ''],
        ['const cv.Error.StsBadMemBlock', '-214', [], [], None, ''],
        ['const cv.Error.StsAssert', '-215', [], [], None, ''],
        ['const cv.Error.GpuNotSupported', '-216', [], [], None, ''],
        ['const cv.Error.GpuApiCallError', '-217', [], [], None, ''],
        ['const cv.Error.OpenGlNotSupported', '-218', [], [], None, ''],
        ['const cv.Error.OpenGlApiCallError', '-219', [], [], None, ''],
        ['const cv.Error.OpenCLApiCallError', '-220', [], [], None, ''],
        ['const cv.Error.OpenCLDoubleNotSupported', '-221', [], [], None, ''],
        ['const cv.Error.OpenCLInitError', '-222', [], [], None, ''],
        ['const cv.Error.OpenCLNoAMDBlasFft', '-223', [], [], None, '']],
    None]
ok: CONST StsOk=0
ok: CONST StsBackTrace=-1
ok: CONST StsError=-2
ok: CONST StsInternal=-3
ok: CONST StsNoMem=-4
ok: CONST StsBadArg=-5
ok: CONST StsBadFunc=-6
ok: CONST StsNoConv=-7
ok: CONST StsAutoTrace=-8
ok: CONST HeaderIsNull=-9
ok: CONST BadImageSize=-10
ok: CONST BadOffset=-11
ok: CONST BadDataPtr=-12
ok: CONST BadStep=-13
ok: CONST BadModelOrChSeq=-14
ok: CONST BadNumChannels=-15
ok: CONST BadNumChannel1U=-16
ok: CONST BadDepth=-17
ok: CONST BadAlphaChannel=-18
ok: CONST BadOrder=-19
ok: CONST BadOrigin=-20
ok: CONST BadAlign=-21
ok: CONST BadCallBack=-22
ok: CONST BadTileSize=-23
ok: CONST BadCOI=-24
ok: CONST BadROISize=-25
ok: CONST MaskIsTiled=-26
ok: CONST StsNullPtr=-27
ok: CONST StsVecLengthErr=-28
ok: CONST StsFilterStructContentErr=-29
ok: CONST StsKernelStructContentErr=-30
ok: CONST StsFilterOffsetErr=-31
ok: CONST StsBadSize=-201
ok: CONST StsDivByZero=-202
ok: CONST StsInplaceNotSupported=-203
ok: CONST StsObjectNotFound=-204
ok: CONST StsUnmatchedFormats=-205
ok: CONST StsBadFlag=-206
ok: CONST StsBadPoint=-207
ok: CONST StsBadMask=-208
ok: CONST StsUnmatchedSizes=-209
ok: CONST StsUnsupportedFormat=-210
ok: CONST StsOutOfRange=-211
ok: CONST StsParseError=-212
ok: CONST StsNotImplemented=-213
ok: CONST StsBadMemBlock=-214
ok: CONST StsAssert=-215
ok: CONST GpuNotSupported=-216
ok: CONST GpuApiCallError=-217
ok: CONST OpenGlNotSupported=-218
ok: CONST OpenGlApiCallError=-219
ok: CONST OpenCLApiCallError=-220
ok: CONST OpenCLDoubleNotSupported=-221
ok: CONST OpenCLInitError=-222
ok: CONST OpenCLNoAMDBlasFft=-223

--- Incoming ---
[   'enum cv.DecompTypes',
    '',
    [],
    [   ['const cv.DECOMP_LU', '0', [], [], None, ''],
        ['const cv.DECOMP_SVD', '1', [], [], None, ''],
        ['const cv.DECOMP_EIG', '2', [], [], None, ''],
        ['const cv.DECOMP_CHOLESKY', '3', [], [], None, ''],
        ['const cv.DECOMP_QR', '4', [], [], None, ''],
        ['const cv.DECOMP_NORMAL', '16', [], [], None, '']],
    None]
ok: CONST DECOMP_LU=0
ok: CONST DECOMP_SVD=1
ok: CONST DECOMP_EIG=2
ok: CONST DECOMP_CHOLESKY=3
ok: CONST DECOMP_QR=4
ok: CONST DECOMP_NORMAL=16

--- Incoming ---
[   'enum cv.NormTypes',
    '',
    [],
    [   ['const cv.NORM_INF', '1', [], [], None, ''],
        ['const cv.NORM_L1', '2', [], [], None, ''],
        ['const cv.NORM_L2', '4', [], [], None, ''],
        ['const cv.NORM_L2SQR', '5', [], [], None, ''],
        ['const cv.NORM_HAMMING', '6', [], [], None, ''],
        ['const cv.NORM_HAMMING2', '7', [], [], None, ''],
        ['const cv.NORM_TYPE_MASK', '7', [], [], None, ''],
        ['const cv.NORM_RELATIVE', '8', [], [], None, ''],
        ['const cv.NORM_MINMAX', '32', [], [], None, '']],
    None]
ok: CONST NORM_INF=1
ok: CONST NORM_L1=2
ok: CONST NORM_L2=4
ok: CONST NORM_L2SQR=5
ok: CONST NORM_HAMMING=6
ok: CONST NORM_HAMMING2=7
ok: CONST NORM_TYPE_MASK=7
ok: CONST NORM_RELATIVE=8
ok: CONST NORM_MINMAX=32

--- Incoming ---
[   'enum cv.CmpTypes',
    '',
    [],
    [   ['const cv.CMP_EQ', '0', [], [], None, ''],
        ['const cv.CMP_GT', '1', [], [], None, ''],
        ['const cv.CMP_GE', '2', [], [], None, ''],
        ['const cv.CMP_LT', '3', [], [], None, ''],
        ['const cv.CMP_LE', '4', [], [], None, ''],
        ['const cv.CMP_NE', '5', [], [], None, '']],
    None]
ok: CONST CMP_EQ=0
ok: CONST CMP_GT=1
ok: CONST CMP_GE=2
ok: CONST CMP_LT=3
ok: CONST CMP_LE=4
ok: CONST CMP_NE=5

--- Incoming ---
[   'enum cv.GemmFlags',
    '',
    [],
    [   ['const cv.GEMM_1_T', '1', [], [], None, ''],
        ['const cv.GEMM_2_T', '2', [], [], None, ''],
        ['const cv.GEMM_3_T', '4', [], [], None, '']],
    None]
ok: CONST GEMM_1_T=1
ok: CONST GEMM_2_T=2
ok: CONST GEMM_3_T=4

--- Incoming ---
[   'enum cv.DftFlags',
    '',
    [],
    [   ['const cv.DFT_INVERSE', '1', [], [], None, ''],
        ['const cv.DFT_SCALE', '2', [], [], None, ''],
        ['const cv.DFT_ROWS', '4', [], [], None, ''],
        ['const cv.DFT_COMPLEX_OUTPUT', '16', [], [], None, ''],
        ['const cv.DFT_REAL_OUTPUT', '32', [], [], None, ''],
        ['const cv.DFT_COMPLEX_INPUT', '64', [], [], None, ''],
        ['const cv.DCT_INVERSE', 'DFT_INVERSE', [], [], None, ''],
        ['const cv.DCT_ROWS', 'DFT_ROWS', [], [], None, '']],
    None]
ok: CONST DFT_INVERSE=1
ok: CONST DFT_SCALE=2
ok: CONST DFT_ROWS=4
ok: CONST DFT_COMPLEX_OUTPUT=16
ok: CONST DFT_REAL_OUTPUT=32
ok: CONST DFT_COMPLEX_INPUT=64
ok: CONST DCT_INVERSE=DFT_INVERSE
ok: CONST DCT_ROWS=DFT_ROWS

--- Incoming ---
[   'enum cv.BorderTypes',
    '',
    [],
    [   ['const cv.BORDER_CONSTANT', '0', [], [], None, ''],
        ['const cv.BORDER_REPLICATE', '1', [], [], None, ''],
        ['const cv.BORDER_REFLECT', '2', [], [], None, ''],
        ['const cv.BORDER_WRAP', '3', [], [], None, ''],
        ['const cv.BORDER_REFLECT_101', '4', [], [], None, ''],
        ['const cv.BORDER_TRANSPARENT', '5', [], [], None, ''],
        ['const cv.BORDER_REFLECT101', 'BORDER_REFLECT_101', [], [], None, ''],
        ['const cv.BORDER_DEFAULT', 'BORDER_REFLECT_101', [], [], None, ''],
        ['const cv.BORDER_ISOLATED', '16', [], [], None, '']],
    None]
ok: CONST BORDER_CONSTANT=0
ok: CONST BORDER_REPLICATE=1
ok: CONST BORDER_REFLECT=2
ok: CONST BORDER_WRAP=3
ok: CONST BORDER_REFLECT_101=4
ok: CONST BORDER_TRANSPARENT=5
ok: CONST BORDER_REFLECT101=BORDER_REFLECT_101
ok: CONST BORDER_DEFAULT=BORDER_REFLECT_101
ok: CONST BORDER_ISOLATED=16

--- Incoming ---
['cv.cubeRoot', 'float', [], [['float', 'val', '', []]], 'float']
ok: FUNC <float cv..cubeRoot [ARG float val=]>

--- Incoming ---
[   'cv.fastAtan2',
    'float',
    [],
    [['float', 'y', '', []], ['float', 'x', '', []]],
    'float']
ok: FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>

--- Incoming ---
['cv.ipp.useIPP', 'bool', [], [], 'bool']
ok: FUNC <bool cv.ipp..useIPP []>

--- Incoming ---
['cv.ipp.setUseIPP', 'void', [], [['bool', 'flag', '', []]], 'void']
ok: FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>

--- Incoming ---
['cv.ipp.getIppVersion', 'String', [], [], 'String']
ok: FUNC <String cv.ipp..getIppVersion []>

--- Incoming ---
['cv.ipp.useIPP_NotExact', 'bool', [], [], 'bool']
ok: FUNC <bool cv.ipp..useIPP_NotExact []>

--- Incoming ---
['cv.ipp.setUseIPP_NotExact', 'void', [], [['bool', 'flag', '', []]], 'void']
ok: FUNC <void cv.ipp..setUseIPP_NotExact [ARG bool flag=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core.hpp =====
Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.ipp', 'cv.ogl']

--- Incoming ---
[   'enum cv.SortFlags',
    '',
    [],
    [   ['const cv.SORT_EVERY_ROW', '0', [], [], None, ''],
        ['const cv.SORT_EVERY_COLUMN', '1', [], [], None, ''],
        ['const cv.SORT_ASCENDING', '0', [], [], None, ''],
        ['const cv.SORT_DESCENDING', '16', [], [], None, '']],
    None]
ok: CONST SORT_EVERY_ROW=0
ok: CONST SORT_EVERY_COLUMN=1
ok: CONST SORT_ASCENDING=0
ok: CONST SORT_DESCENDING=16

--- Incoming ---
[   'enum cv.CovarFlags',
    '',
    [],
    [   ['const cv.COVAR_SCRAMBLED', '0', [], [], None, ''],
        ['const cv.COVAR_NORMAL', '1', [], [], None, ''],
        ['const cv.COVAR_USE_AVG', '2', [], [], None, ''],
        ['const cv.COVAR_SCALE', '4', [], [], None, ''],
        ['const cv.COVAR_ROWS', '8', [], [], None, ''],
        ['const cv.COVAR_COLS', '16', [], [], None, '']],
    None]
ok: CONST COVAR_SCRAMBLED=0
ok: CONST COVAR_NORMAL=1
ok: CONST COVAR_USE_AVG=2
ok: CONST COVAR_SCALE=4
ok: CONST COVAR_ROWS=8
ok: CONST COVAR_COLS=16

--- Incoming ---
[   'enum cv.KmeansFlags',
    '',
    [],
    [   ['const cv.KMEANS_RANDOM_CENTERS', '0', [], [], None, ''],
        ['const cv.KMEANS_PP_CENTERS', '2', [], [], None, ''],
        ['const cv.KMEANS_USE_INITIAL_LABELS', '1', [], [], None, '']],
    None]
ok: CONST KMEANS_RANDOM_CENTERS=0
ok: CONST KMEANS_PP_CENTERS=2
ok: CONST KMEANS_USE_INITIAL_LABELS=1

--- Incoming ---
[   'enum cv.ReduceTypes',
    '',
    [],
    [   ['const cv.REDUCE_SUM', '0', [], [], None, ''],
        ['const cv.REDUCE_AVG', '1', [], [], None, ''],
        ['const cv.REDUCE_MAX', '2', [], [], None, ''],
        ['const cv.REDUCE_MIN', '3', [], [], None, ''],
        ['const cv.REDUCE_SUM2', '4', [], [], None, '']],
    None]
manual: CONST REDUCE_SUM=0
manual: CONST REDUCE_AVG=1
manual: CONST REDUCE_MAX=2
manual: CONST REDUCE_MIN=3
ok: CONST REDUCE_SUM2=4

--- Incoming ---
[   'cv.borderInterpolate',
    'int',
    [],
    [   ['int', 'p', '', []],
        ['int', 'len', '', []],
        ['int', 'borderType', '', []]],
    'int']
ok: FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>

--- Incoming ---
[   'cv.copyMakeBorder',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'top', '', []],
        ['int', 'bottom', '', []],
        ['int', 'left', '', []],
        ['int', 'right', '', []],
        ['int', 'borderType', '', []],
        ['Scalar', 'value', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/AOS']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/AOS']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['double', 'scale', '', []],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.scaleAdd',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.addWeighted',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'beta', '', []],
        ['double', 'gamma', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.convertScaleAbs',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    'void']
ok: FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>

--- Incoming ---
[   'cv.convertFp16',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.LUT',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lut', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>

--- Incoming ---
['cv.sum', 'Scalar', ['=sumElems'], [['Mat', 'src', '', []]], 'Scalar']
ok: FUNC <Scalar cv..sum [ARG Mat src=]>

--- Incoming ---
['cv.hasNonZero', 'bool', [], [['Mat', 'src', '', []]], 'bool']
ok: FUNC <bool cv..hasNonZero [ARG Mat src=]>

--- Incoming ---
['cv.countNonZero', 'int', [], [['Mat', 'src', '', []]], 'int']
ok: FUNC <int cv..countNonZero [ARG Mat src=]>

--- Incoming ---
[   'cv.findNonZero',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'idx', '', ['/O']]],
    'void']
ok: FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>

--- Incoming ---
[   'cv.mean',
    'Scalar',
    [],
    [['Mat', 'src', '', []], ['Mat', 'mask', 'Mat()', []]],
    'Scalar']
ok: FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.meanStdDev',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mean', '', ['/O']],
        ['Mat', 'stddev', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.PSNR',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'R', '255.', []]],
    'double']
ok: FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>

--- Incoming ---
[   'cv.batchDistance',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dist', '', ['/O']],
        ['int', 'dtype', '', []],
        ['Mat', 'nidx', '', ['/O']],
        ['int', 'normType', 'NORM_L2', []],
        ['int', 'K', '0', []],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'update', '0', []],
        ['bool', 'crosscheck', 'false', []]],
    'void']
ok: FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>

--- Incoming ---
[   'cv.normalize',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []],
        ['int', 'norm_type', 'NORM_L2', []],
        ['int', 'dtype', '-1', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.minMaxLoc',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double*', 'minVal', '', ['/O']],
        ['double*', 'maxVal', '0', ['/O']],
        ['Point*', 'minLoc', '0', ['/O']],
        ['Point*', 'maxLoc', '0', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
manual: FUNC <void cv..minMaxLoc [ARG Mat src=, ARG double * minVal=, ARG double * maxVal=0, ARG Point * minLoc=0, ARG Point * maxLoc=0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.reduceArgMin',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'axis', '', []],
        ['bool', 'lastIndex', 'false', []]],
    'void']
ok: FUNC <void cv..reduceArgMin [ARG Mat src=, ARG Mat dst=, ARG int axis=, ARG bool lastIndex=false]>

--- Incoming ---
[   'cv.reduceArgMax',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'axis', '', []],
        ['bool', 'lastIndex', 'false', []]],
    'void']
ok: FUNC <void cv..reduceArgMax [ARG Mat src=, ARG Mat dst=, ARG int axis=, ARG bool lastIndex=false]>

--- Incoming ---
[   'cv.reduce',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dim', '', []],
        ['int', 'rtype', '', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.merge',
    'void',
    [],
    [['vector_Mat', 'mv', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>

--- Incoming ---
[   'cv.split',
    'void',
    [],
    [['Mat', 'm', '', []], ['vector_Mat', 'mv', '', ['/O']]],
    'void']
ok: FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/IO']],
        ['vector_int', 'fromTo', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>

--- Incoming ---
[   'cv.extractChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'coi', '', []]],
    'void']
ok: FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.insertChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['int', 'coi', '', []]],
    'void']
ok: FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.flip',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flipCode', '', []]],
    'void']
ok: FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>

--- Incoming ---
[   'cv.flipND',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'axis', '', []]],
    'void']
ok: FUNC <void cv..flipND [ARG Mat src=, ARG Mat dst=, ARG int axis=]>

--- Incoming ---
[   'cv.broadcast',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'shape', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..broadcast [ARG Mat src=, ARG Mat shape=, ARG Mat dst=]>

--- Incoming ---
[   'enum cv.RotateFlags',
    '',
    [],
    [   ['const cv.ROTATE_90_CLOCKWISE', '0', [], [], None, ''],
        ['const cv.ROTATE_180', '1', [], [], None, ''],
        ['const cv.ROTATE_90_COUNTERCLOCKWISE', '2', [], [], None, '']],
    None]
ok: CONST ROTATE_90_CLOCKWISE=0
ok: CONST ROTATE_180=1
ok: CONST ROTATE_90_COUNTERCLOCKWISE=2

--- Incoming ---
[   'cv.rotate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'rotateCode', '', []]],
    'void']
ok: FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG int rotateCode=]>

--- Incoming ---
[   'cv.repeat',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['int', 'ny', '', []],
        ['int', 'nx', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.bitwise_and',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_or',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_xor',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_not',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Mat', 'src2', '', ['/AOS']],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.copyTo',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', '', []]],
    'void']
ok: FUNC <void cv..copyTo [ARG Mat src=, ARG Mat dst=, ARG Mat mask=]>

--- Incoming ---
[   'cv.inRange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lowerb', '', []],
        ['Mat', 'upperb', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]],
    'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.sqrt',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.pow',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double', 'power', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>

--- Incoming ---
[   'cv.exp',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.log',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.polarToCart',
    'void',
    [],
    [   ['Mat', 'magnitude', '', []],
        ['Mat', 'angle', '', []],
        ['Mat', 'x', '', ['/O']],
        ['Mat', 'y', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.cartToPolar',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.phase',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.magnitude',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']]],
    'void']
ok: FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>

--- Incoming ---
[   'cv.checkRange',
    'bool',
    [],
    [   ['Mat', 'a', '', []],
        ['bool', 'quiet', 'true', []],
        ['Point*', 'pos', '0', ['/O']],
        ['double', 'minVal', '-DBL_MAX', []],
        ['double', 'maxVal', 'DBL_MAX', []]],
    'bool']
ok: FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>

--- Incoming ---
[   'cv.patchNaNs',
    'void',
    [],
    [['Mat', 'a', '', ['/IO']], ['double', 'val', '0', []]],
    'void']
ok: FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>

--- Incoming ---
[   'cv.gemm',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src3', '', []],
        ['double', 'beta', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulTransposed',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['bool', 'aTa', '', []],
        ['Mat', 'delta', 'Mat()', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.transpose',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.transposeND',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['vector_int', 'order', '', ['/C', '/Ref']],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..transposeND [ARG Mat src=, ARG vector_int order=, ARG Mat dst=]>

--- Incoming ---
[   'cv.transform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]],
    'void']
ok: FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.perspectiveTransform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]],
    'void']
ok: FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.completeSymm',
    'void',
    [],
    [['Mat', 'm', '', ['/IO']], ['bool', 'lowerToUpper', 'false', []]],
    'void']
ok: FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>

--- Incoming ---
[   'cv.setIdentity',
    'void',
    [],
    [['Mat', 'mtx', '', ['/IO']], ['Scalar', 's', 'Scalar(1)', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>

--- Incoming ---
['cv.determinant', 'double', [], [['Mat', 'mtx', '', []]], 'double']
ok: FUNC <double cv..determinant [ARG Mat mtx=]>

--- Incoming ---
['cv.trace', 'Scalar', [], [['Mat', 'mtx', '', []]], 'Scalar']
ok: FUNC <Scalar cv..trace [ARG Mat mtx=]>

--- Incoming ---
[   'cv.invert',
    'double',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]],
    'double']
ok: FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.solve',
    'bool',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]],
    'bool']
ok: FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.sort',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.sortIdx',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.solveCubic',
    'int',
    [],
    [['Mat', 'coeffs', '', []], ['Mat', 'roots', '', ['/O']]],
    'int']
ok: FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>

--- Incoming ---
[   'cv.solvePoly',
    'double',
    [],
    [   ['Mat', 'coeffs', '', []],
        ['Mat', 'roots', '', ['/O']],
        ['int', 'maxIters', '300', []]],
    'double']
ok: FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>

--- Incoming ---
[   'cv.eigen',
    'bool',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['Mat', 'eigenvectors', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>

--- Incoming ---
[   'cv.eigenNonSymmetric',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['Mat', 'eigenvectors', '', ['/O']]],
    'void']
ok: FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>

--- Incoming ---
[   'cv.calcCovarMatrix',
    'void',
    [],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'covar', '', ['/O']],
        ['Mat', 'mean', '', ['/IO']],
        ['int', 'flags', '', []],
        ['int', 'ctype', 'CV_64F', []]],
    'void']
ok: FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['int', 'maxComponents', '0', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    ['=PCACompute2'],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['int', 'maxComponents', '0', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['double', 'retainedVariance', '', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    ['=PCACompute2'],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['double', 'retainedVariance', '', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>

--- Incoming ---
[   'cv.PCAProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]],
    'void']
ok: FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.PCABackProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]],
    'void']
ok: FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.SVDecomp',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'w', '', ['/O']],
        ['Mat', 'u', '', ['/O']],
        ['Mat', 'vt', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>

--- Incoming ---
[   'cv.SVBackSubst',
    'void',
    [],
    [   ['Mat', 'w', '', []],
        ['Mat', 'u', '', []],
        ['Mat', 'vt', '', []],
        ['Mat', 'rhs', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>

--- Incoming ---
[   'cv.Mahalanobis',
    'double',
    [],
    [['Mat', 'v1', '', []], ['Mat', 'v2', '', []], ['Mat', 'icovar', '', []]],
    'double']
ok: FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>

--- Incoming ---
[   'cv.dft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    'void']
ok: FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.idft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    'void']
ok: FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.dct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.idct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulSpectrums',
    'void',
    [],
    [   ['Mat', 'a', '', []],
        ['Mat', 'b', '', []],
        ['Mat', 'c', '', ['/O']],
        ['int', 'flags', '', []],
        ['bool', 'conjB', 'false', []]],
    'void']
ok: FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>

--- Incoming ---
['cv.getOptimalDFTSize', 'int', [], [['int', 'vecsize', '', []]], 'int']
ok: FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>

--- Incoming ---
['cv.setRNGSeed', 'void', [], [['int', 'seed', '', []]], 'void']
ok: FUNC <void cv..setRNGSeed [ARG int seed=]>

--- Incoming ---
[   'cv.randu',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'low', '', []],
        ['Mat', 'high', '', []]],
    'void']
ok: FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>

--- Incoming ---
[   'cv.randn',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mean', '', []],
        ['Mat', 'stddev', '', []]],
    'void']
ok: FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>

--- Incoming ---
[   'cv.randShuffle',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['double', 'iterFactor', '1.', []],
        ['RNG*', 'rng', '0', []]],
    'void']
ok: FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>

--- Incoming ---
[   'enum cv.PCA.Flags',
    '',
    [],
    [   ['const cv.PCA.DATA_AS_ROW', '0', [], [], None, ''],
        ['const cv.PCA.DATA_AS_COL', '1', [], [], None, ''],
        ['const cv.PCA.USE_AVG', '2', [], [], None, '']],
    None]
class not found: CONST DATA_AS_ROW=0
ok: CONST PCA_DATA_AS_ROW=0
class not found: CONST DATA_AS_COL=1
ok: CONST PCA_DATA_AS_COL=1
class not found: CONST USE_AVG=2
ok: CONST PCA_USE_AVG=2

--- Incoming ---
[   'enum cv.SVD.Flags',
    '',
    [],
    [   ['const cv.SVD.MODIFY_A', '1', [], [], None, ''],
        ['const cv.SVD.NO_UV', '2', [], [], None, ''],
        ['const cv.SVD.FULL_UV', '4', [], [], None, '']],
    None]
class not found: CONST MODIFY_A=1
manual: CONST SVD_MODIFY_A=1
class not found: CONST NO_UV=2
manual: CONST SVD_NO_UV=2
class not found: CONST FULL_UV=4
manual: CONST SVD_FULL_UV=4

--- Incoming ---
[   'enum cv.RNG.<unnamed>',
    '',
    [],
    [   ['const cv.RNG.UNIFORM', '0', [], [], None, ''],
        ['const cv.RNG.NORMAL', '1', [], [], None, '']],
    None]
class not found: CONST UNIFORM=0
ok: CONST RNG_UNIFORM=0
class not found: CONST NORMAL=1
ok: CONST RNG_NORMAL=1

--- Incoming ---
[   'cv.kmeans',
    'double',
    [],
    [   ['Mat', 'data', '', []],
        ['int', 'K', '', []],
        ['Mat', 'bestLabels', '', ['/IO']],
        ['TermCriteria', 'criteria', '', []],
        ['int', 'attempts', '', []],
        ['int', 'flags', '', []],
        ['Mat', 'centers', 'Mat()', ['/O']]],
    'double']
ok: FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>

--- Incoming ---
[   'enum cv.Formatter.FormatType',
    '',
    [],
    [   ['const cv.Formatter.FMT_DEFAULT', '0', [], [], None, ''],
        ['const cv.Formatter.FMT_MATLAB', '1', [], [], None, ''],
        ['const cv.Formatter.FMT_CSV', '2', [], [], None, ''],
        ['const cv.Formatter.FMT_PYTHON', '3', [], [], None, ''],
        ['const cv.Formatter.FMT_NUMPY', '4', [], [], None, ''],
        ['const cv.Formatter.FMT_C', '5', [], [], None, '']],
    None]
class not found: CONST FMT_DEFAULT=0
ok: CONST Formatter_FMT_DEFAULT=0
class not found: CONST FMT_MATLAB=1
ok: CONST Formatter_FMT_MATLAB=1
class not found: CONST FMT_CSV=2
ok: CONST Formatter_FMT_CSV=2
class not found: CONST FMT_PYTHON=3
ok: CONST Formatter_FMT_PYTHON=3
class not found: CONST FMT_NUMPY=4
ok: CONST Formatter_FMT_NUMPY=4
class not found: CONST FMT_C=5
ok: CONST Formatter_FMT_C=5

--- Incoming ---
['class cv.Algorithm', '', [], [], None]
duplicated: CLASS cv::.Algorithm : 

--- Incoming ---
['cv.Algorithm.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.Algorithm.clear []>

--- Incoming ---
[   'cv.Algorithm.write',
    'void',
    ['/C', '/V'],
    [['FileStorage', 'fs', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.write [ARG FileStorage fs=]>

--- Incoming ---
[   'cv.Algorithm.write',
    'void',
    ['/C'],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.write [ARG FileStorage fs=, ARG String name=]>

--- Incoming ---
[   'cv.Algorithm.read',
    'void',
    ['/V'],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.read [ARG FileNode fn=]>

--- Incoming ---
['cv.Algorithm.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.Algorithm.empty []>

--- Incoming ---
[   'cv.Algorithm.save',
    'void',
    ['/C', '/V'],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    'void']
ok: FUNC <void cv.Algorithm.save [ARG String filename=]>

--- Incoming ---
['cv.Algorithm.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.Algorithm.getDefaultName []>

--- Incoming ---
[   'enum struct cv.Param',
    '',
    [],
    [   ['const cv.Param.INT', '0', [], [], None, ''],
        ['const cv.Param.BOOLEAN', '1', [], [], None, ''],
        ['const cv.Param.REAL', '2', [], [], None, ''],
        ['const cv.Param.STRING', '3', [], [], None, ''],
        ['const cv.Param.MAT', '4', [], [], None, ''],
        ['const cv.Param.MAT_VECTOR', '5', [], [], None, ''],
        ['const cv.Param.ALGORITHM', '6', [], [], None, ''],
        ['const cv.Param.FLOAT', '7', [], [], None, ''],
        ['const cv.Param.UNSIGNED_INT', '8', [], [], None, ''],
        ['const cv.Param.UINT64', '9', [], [], None, ''],
        ['const cv.Param.UCHAR', '11', [], [], None, ''],
        ['const cv.Param.SCALAR', '12', [], [], None, '']],
    None]
class not found: CONST INT=0
ok: CONST Param_INT=0
class not found: CONST BOOLEAN=1
ok: CONST Param_BOOLEAN=1
class not found: CONST REAL=2
ok: CONST Param_REAL=2
class not found: CONST STRING=3
ok: CONST Param_STRING=3
class not found: CONST MAT=4
ok: CONST Param_MAT=4
class not found: CONST MAT_VECTOR=5
ok: CONST Param_MAT_VECTOR=5
class not found: CONST ALGORITHM=6
ok: CONST Param_ALGORITHM=6
class not found: CONST FLOAT=7
ok: CONST Param_FLOAT=7
class not found: CONST UNSIGNED_INT=8
ok: CONST Param_UNSIGNED_INT=8
class not found: CONST UINT64=9
ok: CONST Param_UINT64=9
class not found: CONST UCHAR=11
ok: CONST Param_UCHAR=11
class not found: CONST SCALAR=12
ok: CONST Param_SCALAR=12


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/core/include/opencv2/core/utility.hpp =====
Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.ipp', 'cv.ogl', 'cv.samples', 'cv.utils']

--- Incoming ---
['cv.setNumThreads', 'void', [], [['int', 'nthreads', '', []]], 'void']
ok: FUNC <void cv..setNumThreads [ARG int nthreads=]>

--- Incoming ---
['cv.getNumThreads', 'int', [], [], 'int']
ok: FUNC <int cv..getNumThreads []>

--- Incoming ---
['cv.getThreadNum', 'int', [], [], 'int']
ok: FUNC <int cv..getThreadNum []>

--- Incoming ---
['cv.getBuildInformation', 'String', [], [], 'String']
ok: FUNC <String cv..getBuildInformation []>

--- Incoming ---
['cv.getVersionString', 'String', [], [], 'String']
ok: FUNC <String cv..getVersionString []>

--- Incoming ---
['cv.getVersionMajor', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionMajor []>

--- Incoming ---
['cv.getVersionMinor', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionMinor []>

--- Incoming ---
['cv.getVersionRevision', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionRevision []>

--- Incoming ---
['cv.getTickCount', 'int64', [], [], 'int64']
ok: FUNC <int64 cv..getTickCount []>

--- Incoming ---
['cv.getTickFrequency', 'double', [], [], 'double']
ok: FUNC <double cv..getTickFrequency []>

--- Incoming ---
['class cv.TickMeter', '', [], [], None]
ok: class CLASS cv::.TickMeter : , name: TickMeter, base: 

--- Incoming ---
['cv.TickMeter.TickMeter', '', [], [], None]
ok: FUNC < cv.TickMeter.TickMeter []>

--- Incoming ---
['cv.TickMeter.start', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.start []>

--- Incoming ---
['cv.TickMeter.stop', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.stop []>

--- Incoming ---
['cv.TickMeter.getTimeTicks', 'int64', ['/C'], [], 'int64']
ok: FUNC <int64 cv.TickMeter.getTimeTicks []>

--- Incoming ---
['cv.TickMeter.getTimeMicro', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeMicro []>

--- Incoming ---
['cv.TickMeter.getTimeMilli', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeMilli []>

--- Incoming ---
['cv.TickMeter.getTimeSec', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeSec []>

--- Incoming ---
['cv.TickMeter.getCounter', 'int64', ['/C'], [], 'int64']
ok: FUNC <int64 cv.TickMeter.getCounter []>

--- Incoming ---
['cv.TickMeter.getFPS', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getFPS []>

--- Incoming ---
['cv.TickMeter.getAvgTimeSec', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getAvgTimeSec []>

--- Incoming ---
['cv.TickMeter.getAvgTimeMilli', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getAvgTimeMilli []>

--- Incoming ---
['cv.TickMeter.reset', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.reset []>

--- Incoming ---
['cv.getCPUTickCount', 'int64', [], [], 'int64']
ok: FUNC <int64 cv..getCPUTickCount []>

--- Incoming ---
['cv.checkHardwareSupport', 'bool', [], [['int', 'feature', '', []]], 'bool']
ok: FUNC <bool cv..checkHardwareSupport [ARG int feature=]>

--- Incoming ---
[   'cv.getHardwareFeatureName',
    'String',
    [],
    [['int', 'feature', '', []]],
    'String']
ok: FUNC <String cv..getHardwareFeatureName [ARG int feature=]>

--- Incoming ---
['cv.getCPUFeaturesLine', 'string', [], [], 'std::string']
ok: FUNC <string cv..getCPUFeaturesLine []>

--- Incoming ---
['cv.getNumberOfCPUs', 'int', [], [], 'int']
ok: FUNC <int cv..getNumberOfCPUs []>

--- Incoming ---
['cv.setUseOptimized', 'void', [], [['bool', 'onoff', '', []]], 'void']
ok: FUNC <void cv..setUseOptimized [ARG bool onoff=]>

--- Incoming ---
['cv.useOptimized', 'bool', [], [], 'bool']
ok: FUNC <bool cv..useOptimized []>

--- Incoming ---
[   'cv.samples.findFile',
    'String',
    [],
    [   ['String', 'relative_path', '', ['/C', '/Ref']],
        ['bool', 'required', 'true', []],
        ['bool', 'silentMode', 'false', []]],
    'cv::String']
ok: FUNC <String cv.samples..findFile [ARG String relative_path=, ARG bool required=true, ARG bool silentMode=false]>

--- Incoming ---
[   'cv.samples.findFileOrKeep',
    'String',
    [],
    [   ['String', 'relative_path', '', ['/C', '/Ref']],
        ['bool', 'silentMode', 'false', []]],
    'cv::String']
ok: FUNC <String cv.samples..findFileOrKeep [ARG String relative_path=, ARG bool silentMode=false]>

--- Incoming ---
[   'cv.samples.addSamplesDataSearchPath',
    'void',
    [],
    [['String', 'path', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.samples..addSamplesDataSearchPath [ARG String path=]>

--- Incoming ---
[   'cv.samples.addSamplesDataSearchSubDirectory',
    'void',
    [],
    [['String', 'subdir', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.samples..addSamplesDataSearchSubDirectory [ARG String subdir=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/core/misc/java/src/cpp/core_manual.hpp =====
Namespaces: ['cv', 'cv.Error', 'cv.cuda', 'cv.cudev', 'cv.ipp', 'cv.ogl', 'cv.samples', 'cv.utils']

--- Incoming ---
['cv.setErrorVerbosity', 'void', [], [['bool', 'verbose', '', []]], 'void']
ok: FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/AOS']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/AOS']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', ['/AOS']],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]],
    'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>


===== Generating... =====
CLASS cv::.Algorithm : 
FUNC <void cv.Algorithm.clear []>
java: void clear()
FUNC <void cv.Algorithm.write [ARG FileStorage fs=]>
SKIP:void cv::Algorithm::write(FileStorage fs)	 due to ARG type FileStorage/I
FUNC <void cv.Algorithm.write [ARG FileStorage fs=, ARG String name=]>
SKIP:void cv::Algorithm::write(FileStorage fs, String name)	 due to ARG type FileStorage/I
FUNC <void cv.Algorithm.read [ARG FileNode fn=]>
SKIP:void cv::Algorithm::read(FileNode fn)	 due to ARG type FileNode/I
FUNC <bool cv.Algorithm.empty []>
java: boolean empty()
FUNC <void cv.Algorithm.save [ARG String filename=]>
java: void save(String filename)
FUNC <String cv.Algorithm.getDefaultName []>
java: String getDefaultName()
CLASS cv::.Core : 
[CONST CV_8U=0(manual), CONST CV_8S=1(manual), CONST CV_16U=2(manual), CONST CV_16S=3(manual), CONST CV_32S=4(manual), CONST CV_32F=5(manual), CONST CV_64F=6(manual), CONST CV_USRTYPE1=7(manual)]
[CONST SVD_MODIFY_A=1(manual), CONST SVD_NO_UV=2(manual), CONST SVD_FULL_UV=4(manual), CONST FILLED=-1(manual), CONST REDUCE_SUM=0(manual), CONST REDUCE_AVG=1(manual), CONST REDUCE_MAX=2(manual), CONST REDUCE_MIN=3(manual), CONST RNG_UNIFORM=0, CONST RNG_NORMAL=1]
[CONST BORDER_CONSTANT=0, CONST BORDER_REPLICATE=1, CONST BORDER_REFLECT=2, CONST BORDER_WRAP=3, CONST BORDER_REFLECT_101=4, CONST BORDER_TRANSPARENT=5, CONST BORDER_REFLECT101=BORDER_REFLECT_101, CONST BORDER_DEFAULT=BORDER_REFLECT_101, CONST BORDER_ISOLATED=16]
[CONST CMP_EQ=0, CONST CMP_GT=1, CONST CMP_GE=2, CONST CMP_LT=3, CONST CMP_LE=4, CONST CMP_NE=5]
[CONST COVAR_SCRAMBLED=0, CONST COVAR_NORMAL=1, CONST COVAR_USE_AVG=2, CONST COVAR_SCALE=4, CONST COVAR_ROWS=8, CONST COVAR_COLS=16]
[CONST DECOMP_LU=0, CONST DECOMP_SVD=1, CONST DECOMP_EIG=2, CONST DECOMP_CHOLESKY=3, CONST DECOMP_QR=4, CONST DECOMP_NORMAL=16]
[CONST DFT_INVERSE=1, CONST DFT_SCALE=2, CONST DFT_ROWS=4, CONST DFT_COMPLEX_OUTPUT=16, CONST DFT_REAL_OUTPUT=32, CONST DFT_COMPLEX_INPUT=64, CONST DCT_INVERSE=DFT_INVERSE, CONST DCT_ROWS=DFT_ROWS]
[CONST StsOk=0, CONST StsBackTrace=-1, CONST StsError=-2, CONST StsInternal=-3, CONST StsNoMem=-4, CONST StsBadArg=-5, CONST StsBadFunc=-6, CONST StsNoConv=-7, CONST StsAutoTrace=-8, CONST HeaderIsNull=-9, CONST BadImageSize=-10, CONST BadOffset=-11, CONST BadDataPtr=-12, CONST BadStep=-13, CONST BadModelOrChSeq=-14, CONST BadNumChannels=-15, CONST BadNumChannel1U=-16, CONST BadDepth=-17, CONST BadAlphaChannel=-18, CONST BadOrder=-19, CONST BadOrigin=-20, CONST BadAlign=-21, CONST BadCallBack=-22, CONST BadTileSize=-23, CONST BadCOI=-24, CONST BadROISize=-25, CONST MaskIsTiled=-26, CONST StsNullPtr=-27, CONST StsVecLengthErr=-28, CONST StsFilterStructContentErr=-29, CONST StsKernelStructContentErr=-30, CONST StsFilterOffsetErr=-31, CONST StsBadSize=-201, CONST StsDivByZero=-202, CONST StsInplaceNotSupported=-203, CONST StsObjectNotFound=-204, CONST StsUnmatchedFormats=-205, CONST StsBadFlag=-206, CONST StsBadPoint=-207, CONST StsBadMask=-208, CONST StsUnmatchedSizes=-209, CONST StsUnsupportedFormat=-210, CONST StsOutOfRange=-211, CONST StsParseError=-212, CONST StsNotImplemented=-213, CONST StsBadMemBlock=-214, CONST StsAssert=-215, CONST GpuNotSupported=-216, CONST GpuApiCallError=-217, CONST OpenGlNotSupported=-218, CONST OpenGlApiCallError=-219, CONST OpenCLApiCallError=-220, CONST OpenCLDoubleNotSupported=-221, CONST OpenCLInitError=-222, CONST OpenCLNoAMDBlasFft=-223]
[CONST Formatter_FMT_DEFAULT=0, CONST Formatter_FMT_MATLAB=1, CONST Formatter_FMT_CSV=2, CONST Formatter_FMT_PYTHON=3, CONST Formatter_FMT_NUMPY=4, CONST Formatter_FMT_C=5]
[CONST GEMM_1_T=1, CONST GEMM_2_T=2, CONST GEMM_3_T=4]
[CONST KMEANS_RANDOM_CENTERS=0, CONST KMEANS_PP_CENTERS=2, CONST KMEANS_USE_INITIAL_LABELS=1]
[CONST NORM_INF=1, CONST NORM_L1=2, CONST NORM_L2=4, CONST NORM_L2SQR=5, CONST NORM_HAMMING=6, CONST NORM_HAMMING2=7, CONST NORM_TYPE_MASK=7, CONST NORM_RELATIVE=8, CONST NORM_MINMAX=32]
[CONST PCA_DATA_AS_ROW=0, CONST PCA_DATA_AS_COL=1, CONST PCA_USE_AVG=2]
[CONST Param_INT=0, CONST Param_BOOLEAN=1, CONST Param_REAL=2, CONST Param_STRING=3, CONST Param_MAT=4, CONST Param_MAT_VECTOR=5, CONST Param_ALGORITHM=6, CONST Param_FLOAT=7, CONST Param_UNSIGNED_INT=8, CONST Param_UINT64=9, CONST Param_UCHAR=11, CONST Param_SCALAR=12]
[CONST REDUCE_SUM2=4]
[CONST ROTATE_90_CLOCKWISE=0, CONST ROTATE_180=1, CONST ROTATE_90_COUNTERCLOCKWISE=2]
[CONST SORT_EVERY_ROW=0, CONST SORT_EVERY_COLUMN=1, CONST SORT_ASCENDING=0, CONST SORT_DESCENDING=16]
FUNC <float cv..cubeRoot [ARG float val=]>
java: float cubeRoot(float val)
FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>
java: float fastAtan2(float y, float x)
FUNC <bool cv.ipp..useIPP []>
java: boolean useIPP()
FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>
java: void setUseIPP(boolean flag)
FUNC <String cv.ipp..getIppVersion []>
java: String getIppVersion()
FUNC <bool cv.ipp..useIPP_NotExact []>
java: boolean useIPP_NotExact()
FUNC <void cv.ipp..setUseIPP_NotExact [ARG bool flag=]>
java: void setUseIPP_NotExact(boolean flag)
FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>
java: int borderInterpolate(int p, int len, int borderType)
FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>
java: void copyMakeBorder(Mat src, Mat dst, int top, int bottom, int left, int right, int borderType, Scalar value)
java: void copyMakeBorder(Mat src, Mat dst, int top, int bottom, int left, int right, int borderType)
FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void add(Mat src1, Mat src2, Mat dst, Mat mask, int dtype)
java: void add(Mat src1, Mat src2, Mat dst, Mat mask)
java: void add(Mat src1, Mat src2, Mat dst)
FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void subtract(Mat src1, Mat src2, Mat dst, Mat mask, int dtype)
java: void subtract(Mat src1, Mat src2, Mat dst, Mat mask)
java: void subtract(Mat src1, Mat src2, Mat dst)
FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void multiply(Mat src1, Mat src2, Mat dst, double scale, int dtype)
java: void multiply(Mat src1, Mat src2, Mat dst, double scale)
java: void multiply(Mat src1, Mat src2, Mat dst)
FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void divide(Mat src1, Mat src2, Mat dst, double scale, int dtype)
java: void divide(Mat src1, Mat src2, Mat dst, double scale)
java: void divide(Mat src1, Mat src2, Mat dst)
FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>
java: void divide(double scale, Mat src2, Mat dst, int dtype)
java: void divide(double scale, Mat src2, Mat dst)
FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>
java: void scaleAdd(Mat src1, double alpha, Mat src2, Mat dst)
FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>
java: void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat dst, int dtype)
java: void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat dst)
FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>
java: void convertScaleAbs(Mat src, Mat dst, double alpha, double beta)
java: void convertScaleAbs(Mat src, Mat dst, double alpha)
java: void convertScaleAbs(Mat src, Mat dst)
FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>
java: void convertFp16(Mat src, Mat dst)
FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>
java: void LUT(Mat src, Mat lut, Mat dst)
FUNC <Scalar cv..sum [ARG Mat src=]>
java: Scalar sumElems(Mat src)
FUNC <bool cv..hasNonZero [ARG Mat src=]>
java: boolean hasNonZero(Mat src)
FUNC <int cv..countNonZero [ARG Mat src=]>
java: int countNonZero(Mat src)
FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>
java: void findNonZero(Mat src, Mat idx)
FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>
java: Scalar mean(Mat src, Mat mask)
java: Scalar mean(Mat src)
FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>
java: void meanStdDev(Mat src, MatOfDouble mean, MatOfDouble stddev, Mat mask)
java: void meanStdDev(Mat src, MatOfDouble mean, MatOfDouble stddev)
FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
java: double norm(Mat src1, int normType, Mat mask)
java: double norm(Mat src1, int normType)
java: double norm(Mat src1)
FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
java: double norm(Mat src1, Mat src2, int normType, Mat mask)
java: double norm(Mat src1, Mat src2, int normType)
java: double norm(Mat src1, Mat src2)
FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>
java: double PSNR(Mat src1, Mat src2, double R)
java: double PSNR(Mat src1, Mat src2)
FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask, int update, boolean crosscheck)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask, int update)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx)
FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type, int dtype, Mat mask)
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type, int dtype)
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type)
java: void normalize(Mat src, Mat dst, double alpha, double beta)
java: void normalize(Mat src, Mat dst, double alpha)
java: void normalize(Mat src, Mat dst)
FUNC <void cv..reduceArgMin [ARG Mat src=, ARG Mat dst=, ARG int axis=, ARG bool lastIndex=false]>
java: void reduceArgMin(Mat src, Mat dst, int axis, boolean lastIndex)
java: void reduceArgMin(Mat src, Mat dst, int axis)
FUNC <void cv..reduceArgMax [ARG Mat src=, ARG Mat dst=, ARG int axis=, ARG bool lastIndex=false]>
java: void reduceArgMax(Mat src, Mat dst, int axis, boolean lastIndex)
java: void reduceArgMax(Mat src, Mat dst, int axis)
FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>
java: void reduce(Mat src, Mat dst, int dim, int rtype, int dtype)
java: void reduce(Mat src, Mat dst, int dim, int rtype)
FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>
java: void merge(List<Mat> mv, Mat dst)
FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>
java: void split(Mat m, List<Mat> mv)
FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>
java: void mixChannels(List<Mat> src, List<Mat> dst, MatOfInt fromTo)
FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
java: void extractChannel(Mat src, Mat dst, int coi)
FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
java: void insertChannel(Mat src, Mat dst, int coi)
FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>
java: void flip(Mat src, Mat dst, int flipCode)
FUNC <void cv..flipND [ARG Mat src=, ARG Mat dst=, ARG int axis=]>
java: void flipND(Mat src, Mat dst, int axis)
FUNC <void cv..broadcast [ARG Mat src=, ARG Mat shape=, ARG Mat dst=]>
java: void broadcast(Mat src, Mat shape, Mat dst)
FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG int rotateCode=]>
java: void rotate(Mat src, Mat dst, int rotateCode)
FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>
java: void repeat(Mat src, int ny, int nx, Mat dst)
FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>
java: void hconcat(List<Mat> src, Mat dst)
FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>
java: void vconcat(List<Mat> src, Mat dst)
FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_and(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_and(Mat src1, Mat src2, Mat dst)
FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_or(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_or(Mat src1, Mat src2, Mat dst)
FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_xor(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_xor(Mat src1, Mat src2, Mat dst)
FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_not(Mat src, Mat dst, Mat mask)
java: void bitwise_not(Mat src, Mat dst)
FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void absdiff(Mat src1, Mat src2, Mat dst)
FUNC <void cv..copyTo [ARG Mat src=, ARG Mat dst=, ARG Mat mask=]>
java: void copyTo(Mat src, Mat dst, Mat mask)
FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>
java: void inRange(Mat src, Scalar lowerb, Scalar upperb, Mat dst)
FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>
java: void compare(Mat src1, Mat src2, Mat dst, int cmpop)
FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void min(Mat src1, Mat src2, Mat dst)
FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void max(Mat src1, Mat src2, Mat dst)
FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>
java: void sqrt(Mat src, Mat dst)
FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>
java: void pow(Mat src, double power, Mat dst)
FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>
java: void exp(Mat src, Mat dst)
FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>
java: void log(Mat src, Mat dst)
FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>
java: void polarToCart(Mat magnitude, Mat angle, Mat x, Mat y, boolean angleInDegrees)
java: void polarToCart(Mat magnitude, Mat angle, Mat x, Mat y)
FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>
java: void cartToPolar(Mat x, Mat y, Mat magnitude, Mat angle, boolean angleInDegrees)
java: void cartToPolar(Mat x, Mat y, Mat magnitude, Mat angle)
FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>
java: void phase(Mat x, Mat y, Mat angle, boolean angleInDegrees)
java: void phase(Mat x, Mat y, Mat angle)
FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>
java: void magnitude(Mat x, Mat y, Mat magnitude)
FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>
java: boolean checkRange(Mat a, boolean quiet, double minVal, double maxVal)
java: boolean checkRange(Mat a, boolean quiet, double minVal)
java: boolean checkRange(Mat a, boolean quiet)
java: boolean checkRange(Mat a, boolean quiet)
java: boolean checkRange(Mat a)
FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>
java: void patchNaNs(Mat a, double val)
java: void patchNaNs(Mat a)
FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>
java: void gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat dst, int flags)
java: void gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat dst)
FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta, double scale, int dtype)
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta, double scale)
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta)
java: void mulTransposed(Mat src, Mat dst, boolean aTa)
FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>
java: void transpose(Mat src, Mat dst)
FUNC <void cv..transposeND [ARG Mat src=, ARG vector_int order=, ARG Mat dst=]>
java: void transposeND(Mat src, MatOfInt order, Mat dst)
FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
java: void transform(Mat src, Mat dst, Mat m)
FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
java: void perspectiveTransform(Mat src, Mat dst, Mat m)
FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>
java: void completeSymm(Mat m, boolean lowerToUpper)
java: void completeSymm(Mat m)
FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>
java: void setIdentity(Mat mtx, Scalar s)
java: void setIdentity(Mat mtx)
FUNC <double cv..determinant [ARG Mat mtx=]>
java: double determinant(Mat mtx)
FUNC <Scalar cv..trace [ARG Mat mtx=]>
java: Scalar trace(Mat mtx)
FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
java: double invert(Mat src, Mat dst, int flags)
java: double invert(Mat src, Mat dst)
FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
java: boolean solve(Mat src1, Mat src2, Mat dst, int flags)
java: boolean solve(Mat src1, Mat src2, Mat dst)
FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
java: void sort(Mat src, Mat dst, int flags)
FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
java: void sortIdx(Mat src, Mat dst, int flags)
FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>
java: int solveCubic(Mat coeffs, Mat roots)
FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>
java: double solvePoly(Mat coeffs, Mat roots, int maxIters)
java: double solvePoly(Mat coeffs, Mat roots)
FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>
java: boolean eigen(Mat src, Mat eigenvalues, Mat eigenvectors)
java: boolean eigen(Mat src, Mat eigenvalues)
FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>
java: void eigenNonSymmetric(Mat src, Mat eigenvalues, Mat eigenvectors)
FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>
java: void calcCovarMatrix(Mat samples, Mat covar, Mat mean, int flags, int ctype)
java: void calcCovarMatrix(Mat samples, Mat covar, Mat mean, int flags)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors, int maxComponents)
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues, int maxComponents)
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors, double retainedVariance)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues, double retainedVariance)
FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
java: void PCAProject(Mat data, Mat mean, Mat eigenvectors, Mat result)
FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
java: void PCABackProject(Mat data, Mat mean, Mat eigenvectors, Mat result)
FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>
java: void SVDecomp(Mat src, Mat w, Mat u, Mat vt, int flags)
java: void SVDecomp(Mat src, Mat w, Mat u, Mat vt)
FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>
java: void SVBackSubst(Mat w, Mat u, Mat vt, Mat rhs, Mat dst)
FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>
java: double Mahalanobis(Mat v1, Mat v2, Mat icovar)
FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
java: void dft(Mat src, Mat dst, int flags, int nonzeroRows)
java: void dft(Mat src, Mat dst, int flags)
java: void dft(Mat src, Mat dst)
FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
java: void idft(Mat src, Mat dst, int flags, int nonzeroRows)
java: void idft(Mat src, Mat dst, int flags)
java: void idft(Mat src, Mat dst)
FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
java: void dct(Mat src, Mat dst, int flags)
java: void dct(Mat src, Mat dst)
FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
java: void idct(Mat src, Mat dst, int flags)
java: void idct(Mat src, Mat dst)
FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>
java: void mulSpectrums(Mat a, Mat b, Mat c, int flags, boolean conjB)
java: void mulSpectrums(Mat a, Mat b, Mat c, int flags)
FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>
java: int getOptimalDFTSize(int vecsize)
FUNC <void cv..setRNGSeed [ARG int seed=]>
java: void setRNGSeed(int seed)
FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>
java: void randu(Mat dst, double low, double high)
FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>
java: void randn(Mat dst, double mean, double stddev)
FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>
java: void randShuffle(Mat dst, double iterFactor)
java: void randShuffle(Mat dst, double iterFactor)
java: void randShuffle(Mat dst)
FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>
java: double kmeans(Mat data, int K, Mat bestLabels, TermCriteria criteria, int attempts, int flags, Mat centers)
java: double kmeans(Mat data, int K, Mat bestLabels, TermCriteria criteria, int attempts, int flags)
FUNC <void cv..setNumThreads [ARG int nthreads=]>
java: void setNumThreads(int nthreads)
FUNC <int cv..getNumThreads []>
java: int getNumThreads()
FUNC <int cv..getThreadNum []>
java: int getThreadNum()
FUNC <String cv..getBuildInformation []>
java: String getBuildInformation()
FUNC <String cv..getVersionString []>
java: String getVersionString()
FUNC <int cv..getVersionMajor []>
java: int getVersionMajor()
FUNC <int cv..getVersionMinor []>
java: int getVersionMinor()
FUNC <int cv..getVersionRevision []>
java: int getVersionRevision()
FUNC <int64 cv..getTickCount []>
java: long getTickCount()
FUNC <double cv..getTickFrequency []>
java: double getTickFrequency()
FUNC <int64 cv..getCPUTickCount []>
java: long getCPUTickCount()
FUNC <bool cv..checkHardwareSupport [ARG int feature=]>
java: boolean checkHardwareSupport(int feature)
FUNC <String cv..getHardwareFeatureName [ARG int feature=]>
java: String getHardwareFeatureName(int feature)
FUNC <string cv..getCPUFeaturesLine []>
java: String getCPUFeaturesLine()
FUNC <int cv..getNumberOfCPUs []>
java: int getNumberOfCPUs()
FUNC <void cv..setUseOptimized [ARG bool onoff=]>
java: void setUseOptimized(boolean onoff)
FUNC <bool cv..useOptimized []>
java: boolean useOptimized()
FUNC <String cv.samples..findFile [ARG String relative_path=, ARG bool required=true, ARG bool silentMode=false]>
java: String findFile(String relative_path, boolean required, boolean silentMode)
java: String findFile(String relative_path, boolean required)
java: String findFile(String relative_path)
FUNC <String cv.samples..findFileOrKeep [ARG String relative_path=, ARG bool silentMode=false]>
java: String findFileOrKeep(String relative_path, boolean silentMode)
java: String findFileOrKeep(String relative_path)
FUNC <void cv.samples..addSamplesDataSearchPath [ARG String path=]>
java: void addSamplesDataSearchPath(String path)
FUNC <void cv.samples..addSamplesDataSearchSubDirectory [ARG String subdir=]>
java: void addSamplesDataSearchSubDirectory(String subdir)
FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>
java: void setErrorVerbosity(boolean verbose)
FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void add(Mat src1, Scalar src2, Mat dst, Mat mask, int dtype)
java: void add(Mat src1, Scalar src2, Mat dst, Mat mask)
java: void add(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void subtract(Mat src1, Scalar src2, Mat dst, Mat mask, int dtype)
java: void subtract(Mat src1, Scalar src2, Mat dst, Mat mask)
java: void subtract(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void multiply(Mat src1, Scalar src2, Mat dst, double scale, int dtype)
java: void multiply(Mat src1, Scalar src2, Mat dst, double scale)
java: void multiply(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void divide(Mat src1, Scalar src2, Mat dst, double scale, int dtype)
java: void divide(Mat src1, Scalar src2, Mat dst, double scale)
java: void divide(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void absdiff(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>
java: void compare(Mat src1, Scalar src2, Mat dst, int cmpop)
FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void min(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void max(Mat src1, Scalar src2, Mat dst)
manual function: minMaxLoc
CLASS cv::.TickMeter : 
FUNC < cv.TickMeter.TickMeter []>
java:  TickMeter()
FUNC <void cv.TickMeter.start []>
java: void start()
FUNC <void cv.TickMeter.stop []>
java: void stop()
FUNC <int64 cv.TickMeter.getTimeTicks []>
java: long getTimeTicks()
FUNC <double cv.TickMeter.getTimeMicro []>
java: double getTimeMicro()
FUNC <double cv.TickMeter.getTimeMilli []>
java: double getTimeMilli()
FUNC <double cv.TickMeter.getTimeSec []>
java: double getTimeSec()
FUNC <int64 cv.TickMeter.getCounter []>
java: long getCounter()
FUNC <double cv.TickMeter.getFPS []>
java: double getFPS()
FUNC <double cv.TickMeter.getAvgTimeSec []>
java: double getAvgTimeSec()
FUNC <double cv.TickMeter.getAvgTimeMilli []>
java: double getAvgTimeMilli()
FUNC <void cv.TickMeter.reset []>
java: void reset()

=== MODULE: imgproc (/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc) ===


Files (10):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/types_c.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/bindings.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/segmentation.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/legacy.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Imgproc : , name: Imgproc, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/types_c.h =====
Namespaces: ['']

--- Incoming ---
[   'enum SmoothMethod_c',
    '',
    [],
    [   ['const CV_BLUR_NO_SCALE', '0', [], [], None, ''],
        ['const CV_BLUR', '1', [], [], None, ''],
        ['const CV_GAUSSIAN', '2', [], [], None, ''],
        ['const CV_MEDIAN', '3', [], [], None, ''],
        ['const CV_BILATERAL', '4', [], [], None, '']],
    None]
ok: CONST CV_BLUR_NO_SCALE=0
ok: CONST CV_BLUR=1
ok: CONST CV_GAUSSIAN=2
ok: CONST CV_MEDIAN=3
ok: CONST CV_BILATERAL=4

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [['const CV_GAUSSIAN_5x5', '7', [], [], None, '']],
    None]
ok: CONST CV_GAUSSIAN_5x5=7

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_SCHARR', '-1', [], [], None, ''],
        ['const CV_MAX_SOBEL_KSIZE', '7', [], [], None, '']],
    None]
ok: CONST CV_SCHARR=-1
ok: CONST CV_MAX_SOBEL_KSIZE=7

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_BGR2BGRA', '0', [], [], None, ''],
        ['const CV_RGB2RGBA', 'CV_BGR2BGRA', [], [], None, ''],
        ['const CV_BGRA2BGR', '1', [], [], None, ''],
        ['const CV_RGBA2RGB', 'CV_BGRA2BGR', [], [], None, ''],
        ['const CV_BGR2RGBA', '2', [], [], None, ''],
        ['const CV_RGB2BGRA', 'CV_BGR2RGBA', [], [], None, ''],
        ['const CV_RGBA2BGR', '3', [], [], None, ''],
        ['const CV_BGRA2RGB', 'CV_RGBA2BGR', [], [], None, ''],
        ['const CV_BGR2RGB', '4', [], [], None, ''],
        ['const CV_RGB2BGR', 'CV_BGR2RGB', [], [], None, ''],
        ['const CV_BGRA2RGBA', '5', [], [], None, ''],
        ['const CV_RGBA2BGRA', 'CV_BGRA2RGBA', [], [], None, ''],
        ['const CV_BGR2GRAY', '6', [], [], None, ''],
        ['const CV_RGB2GRAY', '7', [], [], None, ''],
        ['const CV_GRAY2BGR', '8', [], [], None, ''],
        ['const CV_GRAY2RGB', 'CV_GRAY2BGR', [], [], None, ''],
        ['const CV_GRAY2BGRA', '9', [], [], None, ''],
        ['const CV_GRAY2RGBA', 'CV_GRAY2BGRA', [], [], None, ''],
        ['const CV_BGRA2GRAY', '10', [], [], None, ''],
        ['const CV_RGBA2GRAY', '11', [], [], None, ''],
        ['const CV_BGR2BGR565', '12', [], [], None, ''],
        ['const CV_RGB2BGR565', '13', [], [], None, ''],
        ['const CV_BGR5652BGR', '14', [], [], None, ''],
        ['const CV_BGR5652RGB', '15', [], [], None, ''],
        ['const CV_BGRA2BGR565', '16', [], [], None, ''],
        ['const CV_RGBA2BGR565', '17', [], [], None, ''],
        ['const CV_BGR5652BGRA', '18', [], [], None, ''],
        ['const CV_BGR5652RGBA', '19', [], [], None, ''],
        ['const CV_GRAY2BGR565', '20', [], [], None, ''],
        ['const CV_BGR5652GRAY', '21', [], [], None, ''],
        ['const CV_BGR2BGR555', '22', [], [], None, ''],
        ['const CV_RGB2BGR555', '23', [], [], None, ''],
        ['const CV_BGR5552BGR', '24', [], [], None, ''],
        ['const CV_BGR5552RGB', '25', [], [], None, ''],
        ['const CV_BGRA2BGR555', '26', [], [], None, ''],
        ['const CV_RGBA2BGR555', '27', [], [], None, ''],
        ['const CV_BGR5552BGRA', '28', [], [], None, ''],
        ['const CV_BGR5552RGBA', '29', [], [], None, ''],
        ['const CV_GRAY2BGR555', '30', [], [], None, ''],
        ['const CV_BGR5552GRAY', '31', [], [], None, ''],
        ['const CV_BGR2XYZ', '32', [], [], None, ''],
        ['const CV_RGB2XYZ', '33', [], [], None, ''],
        ['const CV_XYZ2BGR', '34', [], [], None, ''],
        ['const CV_XYZ2RGB', '35', [], [], None, ''],
        ['const CV_BGR2YCrCb', '36', [], [], None, ''],
        ['const CV_RGB2YCrCb', '37', [], [], None, ''],
        ['const CV_YCrCb2BGR', '38', [], [], None, ''],
        ['const CV_YCrCb2RGB', '39', [], [], None, ''],
        ['const CV_BGR2HSV', '40', [], [], None, ''],
        ['const CV_RGB2HSV', '41', [], [], None, ''],
        ['const CV_BGR2Lab', '44', [], [], None, ''],
        ['const CV_RGB2Lab', '45', [], [], None, ''],
        ['const CV_BayerBG2BGR', '46', [], [], None, ''],
        ['const CV_BayerGB2BGR', '47', [], [], None, ''],
        ['const CV_BayerRG2BGR', '48', [], [], None, ''],
        ['const CV_BayerGR2BGR', '49', [], [], None, ''],
        ['const CV_BayerBG2RGB', 'CV_BayerRG2BGR', [], [], None, ''],
        ['const CV_BayerGB2RGB', 'CV_BayerGR2BGR', [], [], None, ''],
        ['const CV_BayerRG2RGB', 'CV_BayerBG2BGR', [], [], None, ''],
        ['const CV_BayerGR2RGB', 'CV_BayerGB2BGR', [], [], None, ''],
        ['const CV_BGR2Luv', '50', [], [], None, ''],
        ['const CV_RGB2Luv', '51', [], [], None, ''],
        ['const CV_BGR2HLS', '52', [], [], None, ''],
        ['const CV_RGB2HLS', '53', [], [], None, ''],
        ['const CV_HSV2BGR', '54', [], [], None, ''],
        ['const CV_HSV2RGB', '55', [], [], None, ''],
        ['const CV_Lab2BGR', '56', [], [], None, ''],
        ['const CV_Lab2RGB', '57', [], [], None, ''],
        ['const CV_Luv2BGR', '58', [], [], None, ''],
        ['const CV_Luv2RGB', '59', [], [], None, ''],
        ['const CV_HLS2BGR', '60', [], [], None, ''],
        ['const CV_HLS2RGB', '61', [], [], None, ''],
        ['const CV_BayerBG2BGR_VNG', '62', [], [], None, ''],
        ['const CV_BayerGB2BGR_VNG', '63', [], [], None, ''],
        ['const CV_BayerRG2BGR_VNG', '64', [], [], None, ''],
        ['const CV_BayerGR2BGR_VNG', '65', [], [], None, ''],
        ['const CV_BayerBG2RGB_VNG', 'CV_BayerRG2BGR_VNG', [], [], None, ''],
        ['const CV_BayerGB2RGB_VNG', 'CV_BayerGR2BGR_VNG', [], [], None, ''],
        ['const CV_BayerRG2RGB_VNG', 'CV_BayerBG2BGR_VNG', [], [], None, ''],
        ['const CV_BayerGR2RGB_VNG', 'CV_BayerGB2BGR_VNG', [], [], None, ''],
        ['const CV_BGR2HSV_FULL', '66', [], [], None, ''],
        ['const CV_RGB2HSV_FULL', '67', [], [], None, ''],
        ['const CV_BGR2HLS_FULL', '68', [], [], None, ''],
        ['const CV_RGB2HLS_FULL', '69', [], [], None, ''],
        ['const CV_HSV2BGR_FULL', '70', [], [], None, ''],
        ['const CV_HSV2RGB_FULL', '71', [], [], None, ''],
        ['const CV_HLS2BGR_FULL', '72', [], [], None, ''],
        ['const CV_HLS2RGB_FULL', '73', [], [], None, ''],
        ['const CV_LBGR2Lab', '74', [], [], None, ''],
        ['const CV_LRGB2Lab', '75', [], [], None, ''],
        ['const CV_LBGR2Luv', '76', [], [], None, ''],
        ['const CV_LRGB2Luv', '77', [], [], None, ''],
        ['const CV_Lab2LBGR', '78', [], [], None, ''],
        ['const CV_Lab2LRGB', '79', [], [], None, ''],
        ['const CV_Luv2LBGR', '80', [], [], None, ''],
        ['const CV_Luv2LRGB', '81', [], [], None, ''],
        ['const CV_BGR2YUV', '82', [], [], None, ''],
        ['const CV_RGB2YUV', '83', [], [], None, ''],
        ['const CV_YUV2BGR', '84', [], [], None, ''],
        ['const CV_YUV2RGB', '85', [], [], None, ''],
        ['const CV_BayerBG2GRAY', '86', [], [], None, ''],
        ['const CV_BayerGB2GRAY', '87', [], [], None, ''],
        ['const CV_BayerRG2GRAY', '88', [], [], None, ''],
        ['const CV_BayerGR2GRAY', '89', [], [], None, ''],
        ['const CV_YUV2RGB_NV12', '90', [], [], None, ''],
        ['const CV_YUV2BGR_NV12', '91', [], [], None, ''],
        ['const CV_YUV2RGB_NV21', '92', [], [], None, ''],
        ['const CV_YUV2BGR_NV21', '93', [], [], None, ''],
        ['const CV_YUV420sp2RGB', 'CV_YUV2RGB_NV21', [], [], None, ''],
        ['const CV_YUV420sp2BGR', 'CV_YUV2BGR_NV21', [], [], None, ''],
        ['const CV_YUV2RGBA_NV12', '94', [], [], None, ''],
        ['const CV_YUV2BGRA_NV12', '95', [], [], None, ''],
        ['const CV_YUV2RGBA_NV21', '96', [], [], None, ''],
        ['const CV_YUV2BGRA_NV21', '97', [], [], None, ''],
        ['const CV_YUV420sp2RGBA', 'CV_YUV2RGBA_NV21', [], [], None, ''],
        ['const CV_YUV420sp2BGRA', 'CV_YUV2BGRA_NV21', [], [], None, ''],
        ['const CV_YUV2RGB_YV12', '98', [], [], None, ''],
        ['const CV_YUV2BGR_YV12', '99', [], [], None, ''],
        ['const CV_YUV2RGB_IYUV', '100', [], [], None, ''],
        ['const CV_YUV2BGR_IYUV', '101', [], [], None, ''],
        ['const CV_YUV2RGB_I420', 'CV_YUV2RGB_IYUV', [], [], None, ''],
        ['const CV_YUV2BGR_I420', 'CV_YUV2BGR_IYUV', [], [], None, ''],
        ['const CV_YUV420p2RGB', 'CV_YUV2RGB_YV12', [], [], None, ''],
        ['const CV_YUV420p2BGR', 'CV_YUV2BGR_YV12', [], [], None, ''],
        ['const CV_YUV2RGBA_YV12', '102', [], [], None, ''],
        ['const CV_YUV2BGRA_YV12', '103', [], [], None, ''],
        ['const CV_YUV2RGBA_IYUV', '104', [], [], None, ''],
        ['const CV_YUV2BGRA_IYUV', '105', [], [], None, ''],
        ['const CV_YUV2RGBA_I420', 'CV_YUV2RGBA_IYUV', [], [], None, ''],
        ['const CV_YUV2BGRA_I420', 'CV_YUV2BGRA_IYUV', [], [], None, ''],
        ['const CV_YUV420p2RGBA', 'CV_YUV2RGBA_YV12', [], [], None, ''],
        ['const CV_YUV420p2BGRA', 'CV_YUV2BGRA_YV12', [], [], None, ''],
        ['const CV_YUV2GRAY_420', '106', [], [], None, ''],
        ['const CV_YUV2GRAY_NV21', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV2GRAY_NV12', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV2GRAY_YV12', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV2GRAY_IYUV', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV2GRAY_I420', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV420sp2GRAY', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV420p2GRAY', 'CV_YUV2GRAY_420', [], [], None, ''],
        ['const CV_YUV2RGB_UYVY', '107', [], [], None, ''],
        ['const CV_YUV2BGR_UYVY', '108', [], [], None, ''],
        ['const CV_YUV2RGB_Y422', 'CV_YUV2RGB_UYVY', [], [], None, ''],
        ['const CV_YUV2BGR_Y422', 'CV_YUV2BGR_UYVY', [], [], None, ''],
        ['const CV_YUV2RGB_UYNV', 'CV_YUV2RGB_UYVY', [], [], None, ''],
        ['const CV_YUV2BGR_UYNV', 'CV_YUV2BGR_UYVY', [], [], None, ''],
        ['const CV_YUV2RGBA_UYVY', '111', [], [], None, ''],
        ['const CV_YUV2BGRA_UYVY', '112', [], [], None, ''],
        ['const CV_YUV2RGBA_Y422', 'CV_YUV2RGBA_UYVY', [], [], None, ''],
        ['const CV_YUV2BGRA_Y422', 'CV_YUV2BGRA_UYVY', [], [], None, ''],
        ['const CV_YUV2RGBA_UYNV', 'CV_YUV2RGBA_UYVY', [], [], None, ''],
        ['const CV_YUV2BGRA_UYNV', 'CV_YUV2BGRA_UYVY', [], [], None, ''],
        ['const CV_YUV2RGB_YUY2', '115', [], [], None, ''],
        ['const CV_YUV2BGR_YUY2', '116', [], [], None, ''],
        ['const CV_YUV2RGB_YVYU', '117', [], [], None, ''],
        ['const CV_YUV2BGR_YVYU', '118', [], [], None, ''],
        ['const CV_YUV2RGB_YUYV', 'CV_YUV2RGB_YUY2', [], [], None, ''],
        ['const CV_YUV2BGR_YUYV', 'CV_YUV2BGR_YUY2', [], [], None, ''],
        ['const CV_YUV2RGB_YUNV', 'CV_YUV2RGB_YUY2', [], [], None, ''],
        ['const CV_YUV2BGR_YUNV', 'CV_YUV2BGR_YUY2', [], [], None, ''],
        ['const CV_YUV2RGBA_YUY2', '119', [], [], None, ''],
        ['const CV_YUV2BGRA_YUY2', '120', [], [], None, ''],
        ['const CV_YUV2RGBA_YVYU', '121', [], [], None, ''],
        ['const CV_YUV2BGRA_YVYU', '122', [], [], None, ''],
        ['const CV_YUV2RGBA_YUYV', 'CV_YUV2RGBA_YUY2', [], [], None, ''],
        ['const CV_YUV2BGRA_YUYV', 'CV_YUV2BGRA_YUY2', [], [], None, ''],
        ['const CV_YUV2RGBA_YUNV', 'CV_YUV2RGBA_YUY2', [], [], None, ''],
        ['const CV_YUV2BGRA_YUNV', 'CV_YUV2BGRA_YUY2', [], [], None, ''],
        ['const CV_YUV2GRAY_UYVY', '123', [], [], None, ''],
        ['const CV_YUV2GRAY_YUY2', '124', [], [], None, ''],
        ['const CV_YUV2GRAY_Y422', 'CV_YUV2GRAY_UYVY', [], [], None, ''],
        ['const CV_YUV2GRAY_UYNV', 'CV_YUV2GRAY_UYVY', [], [], None, ''],
        ['const CV_YUV2GRAY_YVYU', 'CV_YUV2GRAY_YUY2', [], [], None, ''],
        ['const CV_YUV2GRAY_YUYV', 'CV_YUV2GRAY_YUY2', [], [], None, ''],
        ['const CV_YUV2GRAY_YUNV', 'CV_YUV2GRAY_YUY2', [], [], None, ''],
        ['const CV_RGBA2mRGBA', '125', [], [], None, ''],
        ['const CV_mRGBA2RGBA', '126', [], [], None, ''],
        ['const CV_RGB2YUV_I420', '127', [], [], None, ''],
        ['const CV_BGR2YUV_I420', '128', [], [], None, ''],
        ['const CV_RGB2YUV_IYUV', 'CV_RGB2YUV_I420', [], [], None, ''],
        ['const CV_BGR2YUV_IYUV', 'CV_BGR2YUV_I420', [], [], None, ''],
        ['const CV_RGBA2YUV_I420', '129', [], [], None, ''],
        ['const CV_BGRA2YUV_I420', '130', [], [], None, ''],
        ['const CV_RGBA2YUV_IYUV', 'CV_RGBA2YUV_I420', [], [], None, ''],
        ['const CV_BGRA2YUV_IYUV', 'CV_BGRA2YUV_I420', [], [], None, ''],
        ['const CV_RGB2YUV_YV12', '131', [], [], None, ''],
        ['const CV_BGR2YUV_YV12', '132', [], [], None, ''],
        ['const CV_RGBA2YUV_YV12', '133', [], [], None, ''],
        ['const CV_BGRA2YUV_YV12', '134', [], [], None, ''],
        ['const CV_BayerBG2BGR_EA', '135', [], [], None, ''],
        ['const CV_BayerGB2BGR_EA', '136', [], [], None, ''],
        ['const CV_BayerRG2BGR_EA', '137', [], [], None, ''],
        ['const CV_BayerGR2BGR_EA', '138', [], [], None, ''],
        ['const CV_BayerBG2RGB_EA', 'CV_BayerRG2BGR_EA', [], [], None, ''],
        ['const CV_BayerGB2RGB_EA', 'CV_BayerGR2BGR_EA', [], [], None, ''],
        ['const CV_BayerRG2RGB_EA', 'CV_BayerBG2BGR_EA', [], [], None, ''],
        ['const CV_BayerGR2RGB_EA', 'CV_BayerGB2BGR_EA', [], [], None, ''],
        ['const CV_BayerBG2BGRA', '139', [], [], None, ''],
        ['const CV_BayerGB2BGRA', '140', [], [], None, ''],
        ['const CV_BayerRG2BGRA', '141', [], [], None, ''],
        ['const CV_BayerGR2BGRA', '142', [], [], None, ''],
        ['const CV_BayerBG2RGBA', 'CV_BayerRG2BGRA', [], [], None, ''],
        ['const CV_BayerGB2RGBA', 'CV_BayerGR2BGRA', [], [], None, ''],
        ['const CV_BayerRG2RGBA', 'CV_BayerBG2BGRA', [], [], None, ''],
        ['const CV_BayerGR2RGBA', 'CV_BayerGB2BGRA', [], [], None, ''],
        ['const CV_COLORCVT_MAX', '143', [], [], None, '']],
    None]
ignored: CONST CV_BGR2BGRA=0
ignored: CONST CV_RGB2RGBA=CV_BGR2BGRA
ignored: CONST CV_BGRA2BGR=1
ignored: CONST CV_RGBA2RGB=CV_BGRA2BGR
ignored: CONST CV_BGR2RGBA=2
ignored: CONST CV_RGB2BGRA=CV_BGR2RGBA
ignored: CONST CV_RGBA2BGR=3
ignored: CONST CV_BGRA2RGB=CV_RGBA2BGR
ignored: CONST CV_BGR2RGB=4
ignored: CONST CV_RGB2BGR=CV_BGR2RGB
ignored: CONST CV_BGRA2RGBA=5
ignored: CONST CV_RGBA2BGRA=CV_BGRA2RGBA
ignored: CONST CV_BGR2GRAY=6
ignored: CONST CV_RGB2GRAY=7
ignored: CONST CV_GRAY2BGR=8
ignored: CONST CV_GRAY2RGB=CV_GRAY2BGR
ignored: CONST CV_GRAY2BGRA=9
ignored: CONST CV_GRAY2RGBA=CV_GRAY2BGRA
ignored: CONST CV_BGRA2GRAY=10
ignored: CONST CV_RGBA2GRAY=11
ignored: CONST CV_BGR2BGR565=12
ignored: CONST CV_RGB2BGR565=13
ignored: CONST CV_BGR5652BGR=14
ignored: CONST CV_BGR5652RGB=15
ignored: CONST CV_BGRA2BGR565=16
ignored: CONST CV_RGBA2BGR565=17
ignored: CONST CV_BGR5652BGRA=18
ignored: CONST CV_BGR5652RGBA=19
ignored: CONST CV_GRAY2BGR565=20
ignored: CONST CV_BGR5652GRAY=21
ignored: CONST CV_BGR2BGR555=22
ignored: CONST CV_RGB2BGR555=23
ignored: CONST CV_BGR5552BGR=24
ignored: CONST CV_BGR5552RGB=25
ignored: CONST CV_BGRA2BGR555=26
ignored: CONST CV_RGBA2BGR555=27
ignored: CONST CV_BGR5552BGRA=28
ignored: CONST CV_BGR5552RGBA=29
ignored: CONST CV_GRAY2BGR555=30
ignored: CONST CV_BGR5552GRAY=31
ignored: CONST CV_BGR2XYZ=32
ignored: CONST CV_RGB2XYZ=33
ignored: CONST CV_XYZ2BGR=34
ignored: CONST CV_XYZ2RGB=35
ignored: CONST CV_BGR2YCrCb=36
ignored: CONST CV_RGB2YCrCb=37
ignored: CONST CV_YCrCb2BGR=38
ignored: CONST CV_YCrCb2RGB=39
ignored: CONST CV_BGR2HSV=40
ignored: CONST CV_RGB2HSV=41
ignored: CONST CV_BGR2Lab=44
ignored: CONST CV_RGB2Lab=45
ignored: CONST CV_BayerBG2BGR=46
ignored: CONST CV_BayerGB2BGR=47
ignored: CONST CV_BayerRG2BGR=48
ignored: CONST CV_BayerGR2BGR=49
ignored: CONST CV_BayerBG2RGB=CV_BayerRG2BGR
ignored: CONST CV_BayerGB2RGB=CV_BayerGR2BGR
ignored: CONST CV_BayerRG2RGB=CV_BayerBG2BGR
ignored: CONST CV_BayerGR2RGB=CV_BayerGB2BGR
ignored: CONST CV_BGR2Luv=50
ignored: CONST CV_RGB2Luv=51
ignored: CONST CV_BGR2HLS=52
ignored: CONST CV_RGB2HLS=53
ignored: CONST CV_HSV2BGR=54
ignored: CONST CV_HSV2RGB=55
ignored: CONST CV_Lab2BGR=56
ignored: CONST CV_Lab2RGB=57
ignored: CONST CV_Luv2BGR=58
ignored: CONST CV_Luv2RGB=59
ignored: CONST CV_HLS2BGR=60
ignored: CONST CV_HLS2RGB=61
ignored: CONST CV_BayerBG2BGR_VNG=62
ignored: CONST CV_BayerGB2BGR_VNG=63
ignored: CONST CV_BayerRG2BGR_VNG=64
ignored: CONST CV_BayerGR2BGR_VNG=65
ignored: CONST CV_BayerBG2RGB_VNG=CV_BayerRG2BGR_VNG
ignored: CONST CV_BayerGB2RGB_VNG=CV_BayerGR2BGR_VNG
ignored: CONST CV_BayerRG2RGB_VNG=CV_BayerBG2BGR_VNG
ignored: CONST CV_BayerGR2RGB_VNG=CV_BayerGB2BGR_VNG
ignored: CONST CV_BGR2HSV_FULL=66
ignored: CONST CV_RGB2HSV_FULL=67
ignored: CONST CV_BGR2HLS_FULL=68
ignored: CONST CV_RGB2HLS_FULL=69
ignored: CONST CV_HSV2BGR_FULL=70
ignored: CONST CV_HSV2RGB_FULL=71
ignored: CONST CV_HLS2BGR_FULL=72
ignored: CONST CV_HLS2RGB_FULL=73
ignored: CONST CV_LBGR2Lab=74
ignored: CONST CV_LRGB2Lab=75
ignored: CONST CV_LBGR2Luv=76
ignored: CONST CV_LRGB2Luv=77
ignored: CONST CV_Lab2LBGR=78
ignored: CONST CV_Lab2LRGB=79
ignored: CONST CV_Luv2LBGR=80
ignored: CONST CV_Luv2LRGB=81
ignored: CONST CV_BGR2YUV=82
ignored: CONST CV_RGB2YUV=83
ignored: CONST CV_YUV2BGR=84
ignored: CONST CV_YUV2RGB=85
ignored: CONST CV_BayerBG2GRAY=86
ignored: CONST CV_BayerGB2GRAY=87
ignored: CONST CV_BayerRG2GRAY=88
ignored: CONST CV_BayerGR2GRAY=89
ignored: CONST CV_YUV2RGB_NV12=90
ignored: CONST CV_YUV2BGR_NV12=91
ignored: CONST CV_YUV2RGB_NV21=92
ignored: CONST CV_YUV2BGR_NV21=93
ignored: CONST CV_YUV420sp2RGB=CV_YUV2RGB_NV21
ignored: CONST CV_YUV420sp2BGR=CV_YUV2BGR_NV21
ignored: CONST CV_YUV2RGBA_NV12=94
ignored: CONST CV_YUV2BGRA_NV12=95
ignored: CONST CV_YUV2RGBA_NV21=96
ignored: CONST CV_YUV2BGRA_NV21=97
ignored: CONST CV_YUV420sp2RGBA=CV_YUV2RGBA_NV21
ignored: CONST CV_YUV420sp2BGRA=CV_YUV2BGRA_NV21
ignored: CONST CV_YUV2RGB_YV12=98
ignored: CONST CV_YUV2BGR_YV12=99
ignored: CONST CV_YUV2RGB_IYUV=100
ignored: CONST CV_YUV2BGR_IYUV=101
ignored: CONST CV_YUV2RGB_I420=CV_YUV2RGB_IYUV
ignored: CONST CV_YUV2BGR_I420=CV_YUV2BGR_IYUV
ignored: CONST CV_YUV420p2RGB=CV_YUV2RGB_YV12
ignored: CONST CV_YUV420p2BGR=CV_YUV2BGR_YV12
ignored: CONST CV_YUV2RGBA_YV12=102
ignored: CONST CV_YUV2BGRA_YV12=103
ignored: CONST CV_YUV2RGBA_IYUV=104
ignored: CONST CV_YUV2BGRA_IYUV=105
ignored: CONST CV_YUV2RGBA_I420=CV_YUV2RGBA_IYUV
ignored: CONST CV_YUV2BGRA_I420=CV_YUV2BGRA_IYUV
ignored: CONST CV_YUV420p2RGBA=CV_YUV2RGBA_YV12
ignored: CONST CV_YUV420p2BGRA=CV_YUV2BGRA_YV12
ignored: CONST CV_YUV2GRAY_420=106
ignored: CONST CV_YUV2GRAY_NV21=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_NV12=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_YV12=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_IYUV=CV_YUV2GRAY_420
ignored: CONST CV_YUV2GRAY_I420=CV_YUV2GRAY_420
ignored: CONST CV_YUV420sp2GRAY=CV_YUV2GRAY_420
ignored: CONST CV_YUV420p2GRAY=CV_YUV2GRAY_420
ignored: CONST CV_YUV2RGB_UYVY=107
ignored: CONST CV_YUV2BGR_UYVY=108
ignored: CONST CV_YUV2RGB_Y422=CV_YUV2RGB_UYVY
ignored: CONST CV_YUV2BGR_Y422=CV_YUV2BGR_UYVY
ignored: CONST CV_YUV2RGB_UYNV=CV_YUV2RGB_UYVY
ignored: CONST CV_YUV2BGR_UYNV=CV_YUV2BGR_UYVY
ignored: CONST CV_YUV2RGBA_UYVY=111
ignored: CONST CV_YUV2BGRA_UYVY=112
ignored: CONST CV_YUV2RGBA_Y422=CV_YUV2RGBA_UYVY
ignored: CONST CV_YUV2BGRA_Y422=CV_YUV2BGRA_UYVY
ignored: CONST CV_YUV2RGBA_UYNV=CV_YUV2RGBA_UYVY
ignored: CONST CV_YUV2BGRA_UYNV=CV_YUV2BGRA_UYVY
ignored: CONST CV_YUV2RGB_YUY2=115
ignored: CONST CV_YUV2BGR_YUY2=116
ignored: CONST CV_YUV2RGB_YVYU=117
ignored: CONST CV_YUV2BGR_YVYU=118
ignored: CONST CV_YUV2RGB_YUYV=CV_YUV2RGB_YUY2
ignored: CONST CV_YUV2BGR_YUYV=CV_YUV2BGR_YUY2
ignored: CONST CV_YUV2RGB_YUNV=CV_YUV2RGB_YUY2
ignored: CONST CV_YUV2BGR_YUNV=CV_YUV2BGR_YUY2
ignored: CONST CV_YUV2RGBA_YUY2=119
ignored: CONST CV_YUV2BGRA_YUY2=120
ignored: CONST CV_YUV2RGBA_YVYU=121
ignored: CONST CV_YUV2BGRA_YVYU=122
ignored: CONST CV_YUV2RGBA_YUYV=CV_YUV2RGBA_YUY2
ignored: CONST CV_YUV2BGRA_YUYV=CV_YUV2BGRA_YUY2
ignored: CONST CV_YUV2RGBA_YUNV=CV_YUV2RGBA_YUY2
ignored: CONST CV_YUV2BGRA_YUNV=CV_YUV2BGRA_YUY2
ignored: CONST CV_YUV2GRAY_UYVY=123
ignored: CONST CV_YUV2GRAY_YUY2=124
ignored: CONST CV_YUV2GRAY_Y422=CV_YUV2GRAY_UYVY
ignored: CONST CV_YUV2GRAY_UYNV=CV_YUV2GRAY_UYVY
ignored: CONST CV_YUV2GRAY_YVYU=CV_YUV2GRAY_YUY2
ignored: CONST CV_YUV2GRAY_YUYV=CV_YUV2GRAY_YUY2
ignored: CONST CV_YUV2GRAY_YUNV=CV_YUV2GRAY_YUY2
ok: CONST CV_RGBA2mRGBA=125
ok: CONST CV_mRGBA2RGBA=126
ignored: CONST CV_RGB2YUV_I420=127
ignored: CONST CV_BGR2YUV_I420=128
ignored: CONST CV_RGB2YUV_IYUV=CV_RGB2YUV_I420
ignored: CONST CV_BGR2YUV_IYUV=CV_BGR2YUV_I420
ignored: CONST CV_RGBA2YUV_I420=129
ignored: CONST CV_BGRA2YUV_I420=130
ignored: CONST CV_RGBA2YUV_IYUV=CV_RGBA2YUV_I420
ignored: CONST CV_BGRA2YUV_IYUV=CV_BGRA2YUV_I420
ignored: CONST CV_RGB2YUV_YV12=131
ignored: CONST CV_BGR2YUV_YV12=132
ignored: CONST CV_RGBA2YUV_YV12=133
ignored: CONST CV_BGRA2YUV_YV12=134
ignored: CONST CV_BayerBG2BGR_EA=135
ignored: CONST CV_BayerGB2BGR_EA=136
ignored: CONST CV_BayerRG2BGR_EA=137
ignored: CONST CV_BayerGR2BGR_EA=138
ignored: CONST CV_BayerBG2RGB_EA=CV_BayerRG2BGR_EA
ignored: CONST CV_BayerGB2RGB_EA=CV_BayerGR2BGR_EA
ignored: CONST CV_BayerRG2RGB_EA=CV_BayerBG2BGR_EA
ignored: CONST CV_BayerGR2RGB_EA=CV_BayerGB2BGR_EA
ignored: CONST CV_BayerBG2BGRA=139
ignored: CONST CV_BayerGB2BGRA=140
ignored: CONST CV_BayerRG2BGRA=141
ignored: CONST CV_BayerGR2BGRA=142
ignored: CONST CV_BayerBG2RGBA=CV_BayerRG2BGRA
ignored: CONST CV_BayerGB2RGBA=CV_BayerGR2BGRA
ignored: CONST CV_BayerRG2RGBA=CV_BayerBG2BGRA
ignored: CONST CV_BayerGR2RGBA=CV_BayerGB2BGRA
ignored: CONST CV_COLORCVT_MAX=143

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_INTER_NN', '0', [], [], None, ''],
        ['const CV_INTER_LINEAR', '1', [], [], None, ''],
        ['const CV_INTER_CUBIC', '2', [], [], None, ''],
        ['const CV_INTER_AREA', '3', [], [], None, ''],
        ['const CV_INTER_LANCZOS4', '4', [], [], None, '']],
    None]
ok: CONST CV_INTER_NN=0
ok: CONST CV_INTER_LINEAR=1
ok: CONST CV_INTER_CUBIC=2
ok: CONST CV_INTER_AREA=3
ok: CONST CV_INTER_LANCZOS4=4

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_WARP_FILL_OUTLIERS', '8', [], [], None, ''],
        ['const CV_WARP_INVERSE_MAP', '16', [], [], None, ''],
        ['const CV_WARP_RELATIVE_MAP', '32', [], [], None, '']],
    None]
ok: CONST CV_WARP_FILL_OUTLIERS=8
ok: CONST CV_WARP_INVERSE_MAP=16
ok: CONST CV_WARP_RELATIVE_MAP=32

--- Incoming ---
[   'enum MorphShapes_c',
    '',
    [],
    [   ['const CV_SHAPE_RECT', '0', [], [], None, ''],
        ['const CV_SHAPE_CROSS', '1', [], [], None, ''],
        ['const CV_SHAPE_ELLIPSE', '2', [], [], None, ''],
        ['const CV_SHAPE_CUSTOM', '100', [], [], None, '']],
    None]
ok: CONST CV_SHAPE_RECT=0
ok: CONST CV_SHAPE_CROSS=1
ok: CONST CV_SHAPE_ELLIPSE=2
ok: CONST CV_SHAPE_CUSTOM=100

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_MOP_ERODE', '0', [], [], None, ''],
        ['const CV_MOP_DILATE', '1', [], [], None, ''],
        ['const CV_MOP_OPEN', '2', [], [], None, ''],
        ['const CV_MOP_CLOSE', '3', [], [], None, ''],
        ['const CV_MOP_GRADIENT', '4', [], [], None, ''],
        ['const CV_MOP_TOPHAT', '5', [], [], None, ''],
        ['const CV_MOP_BLACKHAT', '6', [], [], None, '']],
    None]
ok: CONST CV_MOP_ERODE=0
ok: CONST CV_MOP_DILATE=1
ok: CONST CV_MOP_OPEN=2
ok: CONST CV_MOP_CLOSE=3
ok: CONST CV_MOP_GRADIENT=4
ok: CONST CV_MOP_TOPHAT=5
ok: CONST CV_MOP_BLACKHAT=6

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_TM_SQDIFF', '0', [], [], None, ''],
        ['const CV_TM_SQDIFF_NORMED', '1', [], [], None, ''],
        ['const CV_TM_CCORR', '2', [], [], None, ''],
        ['const CV_TM_CCORR_NORMED', '3', [], [], None, ''],
        ['const CV_TM_CCOEFF', '4', [], [], None, ''],
        ['const CV_TM_CCOEFF_NORMED', '5', [], [], None, '']],
    None]
ignored: CONST CV_TM_SQDIFF=0
ignored: CONST CV_TM_SQDIFF_NORMED=1
ignored: CONST CV_TM_CCORR=2
ignored: CONST CV_TM_CCORR_NORMED=3
ignored: CONST CV_TM_CCOEFF=4
ignored: CONST CV_TM_CCOEFF_NORMED=5

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_RETR_EXTERNAL', '0', [], [], None, ''],
        ['const CV_RETR_LIST', '1', [], [], None, ''],
        ['const CV_RETR_CCOMP', '2', [], [], None, ''],
        ['const CV_RETR_TREE', '3', [], [], None, ''],
        ['const CV_RETR_FLOODFILL', '4', [], [], None, '']],
    None]
ok: CONST CV_RETR_EXTERNAL=0
ok: CONST CV_RETR_LIST=1
ok: CONST CV_RETR_CCOMP=2
ok: CONST CV_RETR_TREE=3
ok: CONST CV_RETR_FLOODFILL=4

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_CHAIN_CODE', '0', [], [], None, ''],
        ['const CV_CHAIN_APPROX_NONE', '1', [], [], None, ''],
        ['const CV_CHAIN_APPROX_SIMPLE', '2', [], [], None, ''],
        ['const CV_CHAIN_APPROX_TC89_L1', '3', [], [], None, ''],
        ['const CV_CHAIN_APPROX_TC89_KCOS', '4', [], [], None, ''],
        ['const CV_LINK_RUNS', '5', [], [], None, '']],
    None]
ok: CONST CV_CHAIN_CODE=0
ok: CONST CV_CHAIN_APPROX_NONE=1
ok: CONST CV_CHAIN_APPROX_SIMPLE=2
ok: CONST CV_CHAIN_APPROX_TC89_L1=3
ok: CONST CV_CHAIN_APPROX_TC89_KCOS=4
ok: CONST CV_LINK_RUNS=5

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [['const CV_POLY_APPROX_DP', '0', [], [], None, '']],
    None]
ok: CONST CV_POLY_APPROX_DP=0

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_CONTOURS_MATCH_I1', '1', [], [], None, ''],
        ['const CV_CONTOURS_MATCH_I2', '2', [], [], None, ''],
        ['const CV_CONTOURS_MATCH_I3', '3', [], [], None, '']],
    None]
ok: CONST CV_CONTOURS_MATCH_I1=1
ok: CONST CV_CONTOURS_MATCH_I2=2
ok: CONST CV_CONTOURS_MATCH_I3=3

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_CLOCKWISE', '1', [], [], None, ''],
        ['const CV_COUNTER_CLOCKWISE', '2', [], [], None, '']],
    None]
ok: CONST CV_CLOCKWISE=1
ok: CONST CV_COUNTER_CLOCKWISE=2

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_COMP_CORREL', '0', [], [], None, ''],
        ['const CV_COMP_CHISQR', '1', [], [], None, ''],
        ['const CV_COMP_INTERSECT', '2', [], [], None, ''],
        ['const CV_COMP_BHATTACHARYYA', '3', [], [], None, ''],
        ['const CV_COMP_HELLINGER', 'CV_COMP_BHATTACHARYYA', [], [], None, ''],
        ['const CV_COMP_CHISQR_ALT', '4', [], [], None, ''],
        ['const CV_COMP_KL_DIV', '5', [], [], None, '']],
    None]
ok: CONST CV_COMP_CORREL=0
ok: CONST CV_COMP_CHISQR=1
ok: CONST CV_COMP_INTERSECT=2
ok: CONST CV_COMP_BHATTACHARYYA=3
ok: CONST CV_COMP_HELLINGER=CV_COMP_BHATTACHARYYA
ok: CONST CV_COMP_CHISQR_ALT=4
ok: CONST CV_COMP_KL_DIV=5

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_DIST_MASK_3', '3', [], [], None, ''],
        ['const CV_DIST_MASK_5', '5', [], [], None, ''],
        ['const CV_DIST_MASK_PRECISE', '0', [], [], None, '']],
    None]
ok: CONST CV_DIST_MASK_3=3
ok: CONST CV_DIST_MASK_5=5
ok: CONST CV_DIST_MASK_PRECISE=0

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_DIST_LABEL_CCOMP', '0', [], [], None, ''],
        ['const CV_DIST_LABEL_PIXEL', '1', [], [], None, '']],
    None]
ok: CONST CV_DIST_LABEL_CCOMP=0
ok: CONST CV_DIST_LABEL_PIXEL=1

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_DIST_USER', '-1', [], [], None, ''],
        ['const CV_DIST_L1', '1', [], [], None, ''],
        ['const CV_DIST_L2', '2', [], [], None, ''],
        ['const CV_DIST_C', '3', [], [], None, ''],
        ['const CV_DIST_L12', '4', [], [], None, ''],
        ['const CV_DIST_FAIR', '5', [], [], None, ''],
        ['const CV_DIST_WELSCH', '6', [], [], None, ''],
        ['const CV_DIST_HUBER', '7', [], [], None, '']],
    None]
ok: CONST CV_DIST_USER=-1
ok: CONST CV_DIST_L1=1
ok: CONST CV_DIST_L2=2
ok: CONST CV_DIST_C=3
ok: CONST CV_DIST_L12=4
ok: CONST CV_DIST_FAIR=5
ok: CONST CV_DIST_WELSCH=6
ok: CONST CV_DIST_HUBER=7

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_THRESH_BINARY', '0', [], [], None, ''],
        ['const CV_THRESH_BINARY_INV', '1', [], [], None, ''],
        ['const CV_THRESH_TRUNC', '2', [], [], None, ''],
        ['const CV_THRESH_TOZERO', '3', [], [], None, ''],
        ['const CV_THRESH_TOZERO_INV', '4', [], [], None, ''],
        ['const CV_THRESH_MASK', '7', [], [], None, ''],
        ['const CV_THRESH_OTSU', '8', [], [], None, ''],
        ['const CV_THRESH_TRIANGLE', '16', [], [], None, '']],
    None]
ok: CONST CV_THRESH_BINARY=0
ok: CONST CV_THRESH_BINARY_INV=1
ok: CONST CV_THRESH_TRUNC=2
ok: CONST CV_THRESH_TOZERO=3
ok: CONST CV_THRESH_TOZERO_INV=4
ok: CONST CV_THRESH_MASK=7
ok: CONST CV_THRESH_OTSU=8
ok: CONST CV_THRESH_TRIANGLE=16

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_ADAPTIVE_THRESH_MEAN_C', '0', [], [], None, ''],
        ['const CV_ADAPTIVE_THRESH_GAUSSIAN_C', '1', [], [], None, '']],
    None]
ignored: CONST CV_ADAPTIVE_THRESH_MEAN_C=0
ignored: CONST CV_ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_FLOODFILL_FIXED_RANGE', '(1 << 16)', [], [], None, ''],
        ['const CV_FLOODFILL_MASK_ONLY', '(1 << 17)', [], [], None, '']],
    None]
ignored: CONST CV_FLOODFILL_FIXED_RANGE=(1 << 16)
ignored: CONST CV_FLOODFILL_MASK_ONLY=(1 << 17)

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [['const CV_CANNY_L2_GRADIENT', '(1 << 31)', [], [], None, '']],
    None]
ok: CONST CV_CANNY_L2_GRADIENT=(1 << 31)

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_HOUGH_STANDARD', '0', [], [], None, ''],
        ['const CV_HOUGH_PROBABILISTIC', '1', [], [], None, ''],
        ['const CV_HOUGH_MULTI_SCALE', '2', [], [], None, ''],
        ['const CV_HOUGH_GRADIENT', '3', [], [], None, '']],
    None]
ok: CONST CV_HOUGH_STANDARD=0
ok: CONST CV_HOUGH_PROBABILISTIC=1
ok: CONST CV_HOUGH_MULTI_SCALE=2
ok: CONST CV_HOUGH_GRADIENT=3


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h =====
Namespaces: ['']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc_c.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h =====
Namespaces: ['']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/interface.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc.hpp =====
Namespaces: ['', 'cv']

--- Incoming ---
[   'enum cv.SpecialFilter',
    '',
    [],
    [['const cv.FILTER_SCHARR', '-1', [], [], None, '']],
    None]
ok: CONST FILTER_SCHARR=-1

--- Incoming ---
[   'enum cv.MorphTypes',
    '',
    [],
    [   ['const cv.MORPH_ERODE', '0', [], [], None, ''],
        ['const cv.MORPH_DILATE', '1', [], [], None, ''],
        ['const cv.MORPH_OPEN', '2', [], [], None, ''],
        ['const cv.MORPH_CLOSE', '3', [], [], None, ''],
        ['const cv.MORPH_GRADIENT', '4', [], [], None, ''],
        ['const cv.MORPH_TOPHAT', '5', [], [], None, ''],
        ['const cv.MORPH_BLACKHAT', '6', [], [], None, ''],
        ['const cv.MORPH_HITMISS', '7', [], [], None, '']],
    None]
ok: CONST MORPH_ERODE=0
ok: CONST MORPH_DILATE=1
ok: CONST MORPH_OPEN=2
ok: CONST MORPH_CLOSE=3
ok: CONST MORPH_GRADIENT=4
ok: CONST MORPH_TOPHAT=5
ok: CONST MORPH_BLACKHAT=6
ok: CONST MORPH_HITMISS=7

--- Incoming ---
[   'enum cv.MorphShapes',
    '',
    [],
    [   ['const cv.MORPH_RECT', '0', [], [], None, ''],
        ['const cv.MORPH_CROSS', '1', [], [], None, ''],
        ['const cv.MORPH_ELLIPSE', '2', [], [], None, '']],
    None]
ok: CONST MORPH_RECT=0
ok: CONST MORPH_CROSS=1
ok: CONST MORPH_ELLIPSE=2

--- Incoming ---
[   'enum cv.InterpolationFlags',
    '',
    [],
    [   ['const cv.INTER_NEAREST', '0', [], [], None, ''],
        ['const cv.INTER_LINEAR', '1', [], [], None, ''],
        ['const cv.INTER_CUBIC', '2', [], [], None, ''],
        ['const cv.INTER_AREA', '3', [], [], None, ''],
        ['const cv.INTER_LANCZOS4', '4', [], [], None, ''],
        ['const cv.INTER_LINEAR_EXACT', '5', [], [], None, ''],
        ['const cv.INTER_NEAREST_EXACT', '6', [], [], None, ''],
        ['const cv.INTER_MAX', '7', [], [], None, ''],
        ['const cv.WARP_FILL_OUTLIERS', '8', [], [], None, ''],
        ['const cv.WARP_INVERSE_MAP', '16', [], [], None, ''],
        ['const cv.WARP_RELATIVE_MAP', '32', [], [], None, '']],
    None]
ok: CONST INTER_NEAREST=0
ok: CONST INTER_LINEAR=1
ok: CONST INTER_CUBIC=2
ok: CONST INTER_AREA=3
ok: CONST INTER_LANCZOS4=4
ok: CONST INTER_LINEAR_EXACT=5
ok: CONST INTER_NEAREST_EXACT=6
ok: CONST INTER_MAX=7
ok: CONST WARP_FILL_OUTLIERS=8
ok: CONST WARP_INVERSE_MAP=16
ok: CONST WARP_RELATIVE_MAP=32

--- Incoming ---
[   'enum cv.WarpPolarMode',
    '',
    [],
    [   ['const cv.WARP_POLAR_LINEAR', '0', [], [], None, ''],
        ['const cv.WARP_POLAR_LOG', '256', [], [], None, '']],
    None]
ok: CONST WARP_POLAR_LINEAR=0
ok: CONST WARP_POLAR_LOG=256

--- Incoming ---
[   'enum cv.InterpolationMasks',
    '',
    [],
    [   ['const cv.INTER_BITS', '5', [], [], None, ''],
        ['const cv.INTER_BITS2', 'INTER_BITS * 2', [], [], None, ''],
        ['const cv.INTER_TAB_SIZE', '1 << INTER_BITS', [], [], None, ''],
        [   'const cv.INTER_TAB_SIZE2',
            'INTER_TAB_SIZE * INTER_TAB_SIZE',
            [],
            [],
            None,
            '']],
    None]
ok: CONST INTER_BITS=5
ok: CONST INTER_BITS2=INTER_BITS * 2
ok: CONST INTER_TAB_SIZE=1 << INTER_BITS
ok: CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE

--- Incoming ---
[   'enum cv.DistanceTypes',
    '',
    [],
    [   ['const cv.DIST_USER', '-1', [], [], None, ''],
        ['const cv.DIST_L1', '1', [], [], None, ''],
        ['const cv.DIST_L2', '2', [], [], None, ''],
        ['const cv.DIST_C', '3', [], [], None, ''],
        ['const cv.DIST_L12', '4', [], [], None, ''],
        ['const cv.DIST_FAIR', '5', [], [], None, ''],
        ['const cv.DIST_WELSCH', '6', [], [], None, ''],
        ['const cv.DIST_HUBER', '7', [], [], None, '']],
    None]
ok: CONST DIST_USER=-1
ok: CONST DIST_L1=1
ok: CONST DIST_L2=2
ok: CONST DIST_C=3
ok: CONST DIST_L12=4
ok: CONST DIST_FAIR=5
ok: CONST DIST_WELSCH=6
ok: CONST DIST_HUBER=7

--- Incoming ---
[   'enum cv.DistanceTransformMasks',
    '',
    [],
    [   ['const cv.DIST_MASK_3', '3', [], [], None, ''],
        ['const cv.DIST_MASK_5', '5', [], [], None, ''],
        ['const cv.DIST_MASK_PRECISE', '0', [], [], None, '']],
    None]
ok: CONST DIST_MASK_3=3
ok: CONST DIST_MASK_5=5
ok: CONST DIST_MASK_PRECISE=0

--- Incoming ---
[   'enum cv.ThresholdTypes',
    '',
    [],
    [   ['const cv.THRESH_BINARY', '0', [], [], None, ''],
        ['const cv.THRESH_BINARY_INV', '1', [], [], None, ''],
        ['const cv.THRESH_TRUNC', '2', [], [], None, ''],
        ['const cv.THRESH_TOZERO', '3', [], [], None, ''],
        ['const cv.THRESH_TOZERO_INV', '4', [], [], None, ''],
        ['const cv.THRESH_MASK', '7', [], [], None, ''],
        ['const cv.THRESH_OTSU', '8', [], [], None, ''],
        ['const cv.THRESH_TRIANGLE', '16', [], [], None, '']],
    None]
ok: CONST THRESH_BINARY=0
ok: CONST THRESH_BINARY_INV=1
ok: CONST THRESH_TRUNC=2
ok: CONST THRESH_TOZERO=3
ok: CONST THRESH_TOZERO_INV=4
ok: CONST THRESH_MASK=7
ok: CONST THRESH_OTSU=8
ok: CONST THRESH_TRIANGLE=16

--- Incoming ---
[   'enum cv.AdaptiveThresholdTypes',
    '',
    [],
    [   ['const cv.ADAPTIVE_THRESH_MEAN_C', '0', [], [], None, ''],
        ['const cv.ADAPTIVE_THRESH_GAUSSIAN_C', '1', [], [], None, '']],
    None]
ok: CONST ADAPTIVE_THRESH_MEAN_C=0
ok: CONST ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
[   'enum cv.GrabCutClasses',
    '',
    [],
    [   ['const cv.GC_BGD', '0', [], [], None, ''],
        ['const cv.GC_FGD', '1', [], [], None, ''],
        ['const cv.GC_PR_BGD', '2', [], [], None, ''],
        ['const cv.GC_PR_FGD', '3', [], [], None, '']],
    None]
ok: CONST GC_BGD=0
ok: CONST GC_FGD=1
ok: CONST GC_PR_BGD=2
ok: CONST GC_PR_FGD=3

--- Incoming ---
[   'enum cv.GrabCutModes',
    '',
    [],
    [   ['const cv.GC_INIT_WITH_RECT', '0', [], [], None, ''],
        ['const cv.GC_INIT_WITH_MASK', '1', [], [], None, ''],
        ['const cv.GC_EVAL', '2', [], [], None, ''],
        ['const cv.GC_EVAL_FREEZE_MODEL', '3', [], [], None, '']],
    None]
ok: CONST GC_INIT_WITH_RECT=0
ok: CONST GC_INIT_WITH_MASK=1
ok: CONST GC_EVAL=2
ok: CONST GC_EVAL_FREEZE_MODEL=3

--- Incoming ---
[   'enum cv.DistanceTransformLabelTypes',
    '',
    [],
    [   ['const cv.DIST_LABEL_CCOMP', '0', [], [], None, ''],
        ['const cv.DIST_LABEL_PIXEL', '1', [], [], None, '']],
    None]
ok: CONST DIST_LABEL_CCOMP=0
ok: CONST DIST_LABEL_PIXEL=1

--- Incoming ---
[   'enum cv.FloodFillFlags',
    '',
    [],
    [   ['const cv.FLOODFILL_FIXED_RANGE', '1 << 16', [], [], None, ''],
        ['const cv.FLOODFILL_MASK_ONLY', '1 << 17', [], [], None, '']],
    None]
ok: CONST FLOODFILL_FIXED_RANGE=1 << 16
ok: CONST FLOODFILL_MASK_ONLY=1 << 17

--- Incoming ---
[   'enum cv.ConnectedComponentsTypes',
    '',
    [],
    [   ['const cv.CC_STAT_LEFT', '0', [], [], None, ''],
        ['const cv.CC_STAT_TOP', '1', [], [], None, ''],
        ['const cv.CC_STAT_WIDTH', '2', [], [], None, ''],
        ['const cv.CC_STAT_HEIGHT', '3', [], [], None, ''],
        ['const cv.CC_STAT_AREA', '4', [], [], None, ''],
        ['const cv.CC_STAT_MAX', '5', [], [], None, '']],
    None]
ok: CONST CC_STAT_LEFT=0
ok: CONST CC_STAT_TOP=1
ok: CONST CC_STAT_WIDTH=2
ok: CONST CC_STAT_HEIGHT=3
ok: CONST CC_STAT_AREA=4
ok: CONST CC_STAT_MAX=5

--- Incoming ---
[   'enum cv.ConnectedComponentsAlgorithmsTypes',
    '',
    [],
    [   ['const cv.CCL_DEFAULT', '-1', [], [], None, ''],
        ['const cv.CCL_WU', '0', [], [], None, ''],
        ['const cv.CCL_GRANA', '1', [], [], None, ''],
        ['const cv.CCL_BOLELLI', '2', [], [], None, ''],
        ['const cv.CCL_SAUF', '3', [], [], None, ''],
        ['const cv.CCL_BBDT', '4', [], [], None, ''],
        ['const cv.CCL_SPAGHETTI', '5', [], [], None, '']],
    None]
ok: CONST CCL_DEFAULT=-1
ok: CONST CCL_WU=0
ok: CONST CCL_GRANA=1
ok: CONST CCL_BOLELLI=2
ok: CONST CCL_SAUF=3
ok: CONST CCL_BBDT=4
ok: CONST CCL_SPAGHETTI=5

--- Incoming ---
[   'enum cv.RetrievalModes',
    '',
    [],
    [   ['const cv.RETR_EXTERNAL', '0', [], [], None, ''],
        ['const cv.RETR_LIST', '1', [], [], None, ''],
        ['const cv.RETR_CCOMP', '2', [], [], None, ''],
        ['const cv.RETR_TREE', '3', [], [], None, ''],
        ['const cv.RETR_FLOODFILL', '4', [], [], None, '']],
    None]
ok: CONST RETR_EXTERNAL=0
ok: CONST RETR_LIST=1
ok: CONST RETR_CCOMP=2
ok: CONST RETR_TREE=3
ok: CONST RETR_FLOODFILL=4

--- Incoming ---
[   'enum cv.ContourApproximationModes',
    '',
    [],
    [   ['const cv.CHAIN_APPROX_NONE', '1', [], [], None, ''],
        ['const cv.CHAIN_APPROX_SIMPLE', '2', [], [], None, ''],
        ['const cv.CHAIN_APPROX_TC89_L1', '3', [], [], None, ''],
        ['const cv.CHAIN_APPROX_TC89_KCOS', '4', [], [], None, '']],
    None]
ok: CONST CHAIN_APPROX_NONE=1
ok: CONST CHAIN_APPROX_SIMPLE=2
ok: CONST CHAIN_APPROX_TC89_L1=3
ok: CONST CHAIN_APPROX_TC89_KCOS=4

--- Incoming ---
[   'enum cv.ShapeMatchModes',
    '',
    [],
    [   ['const cv.CONTOURS_MATCH_I1', '1', [], [], None, ''],
        ['const cv.CONTOURS_MATCH_I2', '2', [], [], None, ''],
        ['const cv.CONTOURS_MATCH_I3', '3', [], [], None, '']],
    None]
ok: CONST CONTOURS_MATCH_I1=1
ok: CONST CONTOURS_MATCH_I2=2
ok: CONST CONTOURS_MATCH_I3=3

--- Incoming ---
[   'enum cv.HoughModes',
    '',
    [],
    [   ['const cv.HOUGH_STANDARD', '0', [], [], None, ''],
        ['const cv.HOUGH_PROBABILISTIC', '1', [], [], None, ''],
        ['const cv.HOUGH_MULTI_SCALE', '2', [], [], None, ''],
        ['const cv.HOUGH_GRADIENT', '3', [], [], None, ''],
        ['const cv.HOUGH_GRADIENT_ALT', '4', [], [], None, '']],
    None]
ok: CONST HOUGH_STANDARD=0
ok: CONST HOUGH_PROBABILISTIC=1
ok: CONST HOUGH_MULTI_SCALE=2
ok: CONST HOUGH_GRADIENT=3
ok: CONST HOUGH_GRADIENT_ALT=4

--- Incoming ---
[   'enum cv.LineSegmentDetectorModes',
    '',
    [],
    [   ['const cv.LSD_REFINE_NONE', '0', [], [], None, ''],
        ['const cv.LSD_REFINE_STD', '1', [], [], None, ''],
        ['const cv.LSD_REFINE_ADV', '2', [], [], None, '']],
    None]
ok: CONST LSD_REFINE_NONE=0
ok: CONST LSD_REFINE_STD=1
ok: CONST LSD_REFINE_ADV=2

--- Incoming ---
[   'enum cv.HistCompMethods',
    '',
    [],
    [   ['const cv.HISTCMP_CORREL', '0', [], [], None, ''],
        ['const cv.HISTCMP_CHISQR', '1', [], [], None, ''],
        ['const cv.HISTCMP_INTERSECT', '2', [], [], None, ''],
        ['const cv.HISTCMP_BHATTACHARYYA', '3', [], [], None, ''],
        [   'const cv.HISTCMP_HELLINGER',
            'HISTCMP_BHATTACHARYYA',
            [],
            [],
            None,
            ''],
        ['const cv.HISTCMP_CHISQR_ALT', '4', [], [], None, ''],
        ['const cv.HISTCMP_KL_DIV', '5', [], [], None, '']],
    None]
ok: CONST HISTCMP_CORREL=0
ok: CONST HISTCMP_CHISQR=1
ok: CONST HISTCMP_INTERSECT=2
ok: CONST HISTCMP_BHATTACHARYYA=3
ok: CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA
ok: CONST HISTCMP_CHISQR_ALT=4
ok: CONST HISTCMP_KL_DIV=5

--- Incoming ---
[   'enum cv.ColorConversionCodes',
    '',
    [],
    [   ['const cv.COLOR_BGR2BGRA', '0', [], [], None, ''],
        ['const cv.COLOR_RGB2RGBA', 'COLOR_BGR2BGRA', [], [], None, ''],
        ['const cv.COLOR_BGRA2BGR', '1', [], [], None, ''],
        ['const cv.COLOR_RGBA2RGB', 'COLOR_BGRA2BGR', [], [], None, ''],
        ['const cv.COLOR_BGR2RGBA', '2', [], [], None, ''],
        ['const cv.COLOR_RGB2BGRA', 'COLOR_BGR2RGBA', [], [], None, ''],
        ['const cv.COLOR_RGBA2BGR', '3', [], [], None, ''],
        ['const cv.COLOR_BGRA2RGB', 'COLOR_RGBA2BGR', [], [], None, ''],
        ['const cv.COLOR_BGR2RGB', '4', [], [], None, ''],
        ['const cv.COLOR_RGB2BGR', 'COLOR_BGR2RGB', [], [], None, ''],
        ['const cv.COLOR_BGRA2RGBA', '5', [], [], None, ''],
        ['const cv.COLOR_RGBA2BGRA', 'COLOR_BGRA2RGBA', [], [], None, ''],
        ['const cv.COLOR_BGR2GRAY', '6', [], [], None, ''],
        ['const cv.COLOR_RGB2GRAY', '7', [], [], None, ''],
        ['const cv.COLOR_GRAY2BGR', '8', [], [], None, ''],
        ['const cv.COLOR_GRAY2RGB', 'COLOR_GRAY2BGR', [], [], None, ''],
        ['const cv.COLOR_GRAY2BGRA', '9', [], [], None, ''],
        ['const cv.COLOR_GRAY2RGBA', 'COLOR_GRAY2BGRA', [], [], None, ''],
        ['const cv.COLOR_BGRA2GRAY', '10', [], [], None, ''],
        ['const cv.COLOR_RGBA2GRAY', '11', [], [], None, ''],
        ['const cv.COLOR_BGR2BGR565', '12', [], [], None, ''],
        ['const cv.COLOR_RGB2BGR565', '13', [], [], None, ''],
        ['const cv.COLOR_BGR5652BGR', '14', [], [], None, ''],
        ['const cv.COLOR_BGR5652RGB', '15', [], [], None, ''],
        ['const cv.COLOR_BGRA2BGR565', '16', [], [], None, ''],
        ['const cv.COLOR_RGBA2BGR565', '17', [], [], None, ''],
        ['const cv.COLOR_BGR5652BGRA', '18', [], [], None, ''],
        ['const cv.COLOR_BGR5652RGBA', '19', [], [], None, ''],
        ['const cv.COLOR_GRAY2BGR565', '20', [], [], None, ''],
        ['const cv.COLOR_BGR5652GRAY', '21', [], [], None, ''],
        ['const cv.COLOR_BGR2BGR555', '22', [], [], None, ''],
        ['const cv.COLOR_RGB2BGR555', '23', [], [], None, ''],
        ['const cv.COLOR_BGR5552BGR', '24', [], [], None, ''],
        ['const cv.COLOR_BGR5552RGB', '25', [], [], None, ''],
        ['const cv.COLOR_BGRA2BGR555', '26', [], [], None, ''],
        ['const cv.COLOR_RGBA2BGR555', '27', [], [], None, ''],
        ['const cv.COLOR_BGR5552BGRA', '28', [], [], None, ''],
        ['const cv.COLOR_BGR5552RGBA', '29', [], [], None, ''],
        ['const cv.COLOR_GRAY2BGR555', '30', [], [], None, ''],
        ['const cv.COLOR_BGR5552GRAY', '31', [], [], None, ''],
        ['const cv.COLOR_BGR2XYZ', '32', [], [], None, ''],
        ['const cv.COLOR_RGB2XYZ', '33', [], [], None, ''],
        ['const cv.COLOR_XYZ2BGR', '34', [], [], None, ''],
        ['const cv.COLOR_XYZ2RGB', '35', [], [], None, ''],
        ['const cv.COLOR_BGR2YCrCb', '36', [], [], None, ''],
        ['const cv.COLOR_RGB2YCrCb', '37', [], [], None, ''],
        ['const cv.COLOR_YCrCb2BGR', '38', [], [], None, ''],
        ['const cv.COLOR_YCrCb2RGB', '39', [], [], None, ''],
        ['const cv.COLOR_BGR2HSV', '40', [], [], None, ''],
        ['const cv.COLOR_RGB2HSV', '41', [], [], None, ''],
        ['const cv.COLOR_BGR2Lab', '44', [], [], None, ''],
        ['const cv.COLOR_RGB2Lab', '45', [], [], None, ''],
        ['const cv.COLOR_BGR2Luv', '50', [], [], None, ''],
        ['const cv.COLOR_RGB2Luv', '51', [], [], None, ''],
        ['const cv.COLOR_BGR2HLS', '52', [], [], None, ''],
        ['const cv.COLOR_RGB2HLS', '53', [], [], None, ''],
        ['const cv.COLOR_HSV2BGR', '54', [], [], None, ''],
        ['const cv.COLOR_HSV2RGB', '55', [], [], None, ''],
        ['const cv.COLOR_Lab2BGR', '56', [], [], None, ''],
        ['const cv.COLOR_Lab2RGB', '57', [], [], None, ''],
        ['const cv.COLOR_Luv2BGR', '58', [], [], None, ''],
        ['const cv.COLOR_Luv2RGB', '59', [], [], None, ''],
        ['const cv.COLOR_HLS2BGR', '60', [], [], None, ''],
        ['const cv.COLOR_HLS2RGB', '61', [], [], None, ''],
        ['const cv.COLOR_BGR2HSV_FULL', '66', [], [], None, ''],
        ['const cv.COLOR_RGB2HSV_FULL', '67', [], [], None, ''],
        ['const cv.COLOR_BGR2HLS_FULL', '68', [], [], None, ''],
        ['const cv.COLOR_RGB2HLS_FULL', '69', [], [], None, ''],
        ['const cv.COLOR_HSV2BGR_FULL', '70', [], [], None, ''],
        ['const cv.COLOR_HSV2RGB_FULL', '71', [], [], None, ''],
        ['const cv.COLOR_HLS2BGR_FULL', '72', [], [], None, ''],
        ['const cv.COLOR_HLS2RGB_FULL', '73', [], [], None, ''],
        ['const cv.COLOR_LBGR2Lab', '74', [], [], None, ''],
        ['const cv.COLOR_LRGB2Lab', '75', [], [], None, ''],
        ['const cv.COLOR_LBGR2Luv', '76', [], [], None, ''],
        ['const cv.COLOR_LRGB2Luv', '77', [], [], None, ''],
        ['const cv.COLOR_Lab2LBGR', '78', [], [], None, ''],
        ['const cv.COLOR_Lab2LRGB', '79', [], [], None, ''],
        ['const cv.COLOR_Luv2LBGR', '80', [], [], None, ''],
        ['const cv.COLOR_Luv2LRGB', '81', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV', '82', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV', '83', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR', '84', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB', '85', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_NV12', '90', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_NV12', '91', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_NV21', '92', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_NV21', '93', [], [], None, ''],
        ['const cv.COLOR_YUV420sp2RGB', 'COLOR_YUV2RGB_NV21', [], [], None, ''],
        ['const cv.COLOR_YUV420sp2BGR', 'COLOR_YUV2BGR_NV21', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_NV12', '94', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_NV12', '95', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_NV21', '96', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_NV21', '97', [], [], None, ''],
        [   'const cv.COLOR_YUV420sp2RGBA',
            'COLOR_YUV2RGBA_NV21',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV420sp2BGRA',
            'COLOR_YUV2BGRA_NV21',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_YUV2RGB_YV12', '98', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_YV12', '99', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_IYUV', '100', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_IYUV', '101', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_I420', 'COLOR_YUV2RGB_IYUV', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_I420', 'COLOR_YUV2BGR_IYUV', [], [], None, ''],
        ['const cv.COLOR_YUV420p2RGB', 'COLOR_YUV2RGB_YV12', [], [], None, ''],
        ['const cv.COLOR_YUV420p2BGR', 'COLOR_YUV2BGR_YV12', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_YV12', '102', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_YV12', '103', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_IYUV', '104', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_IYUV', '105', [], [], None, ''],
        [   'const cv.COLOR_YUV2RGBA_I420',
            'COLOR_YUV2RGBA_IYUV',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2BGRA_I420',
            'COLOR_YUV2BGRA_IYUV',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV420p2RGBA',
            'COLOR_YUV2RGBA_YV12',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV420p2BGRA',
            'COLOR_YUV2BGRA_YV12',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_YUV2GRAY_420', '106', [], [], None, ''],
        [   'const cv.COLOR_YUV2GRAY_NV21',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_NV12',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_YV12',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_IYUV',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_I420',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV420sp2GRAY',
            'COLOR_YUV2GRAY_420',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_YUV420p2GRAY', 'COLOR_YUV2GRAY_420', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_UYVY', '107', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_UYVY', '108', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_Y422', 'COLOR_YUV2RGB_UYVY', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_Y422', 'COLOR_YUV2BGR_UYVY', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_UYNV', 'COLOR_YUV2RGB_UYVY', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_UYNV', 'COLOR_YUV2BGR_UYVY', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_UYVY', '111', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_UYVY', '112', [], [], None, ''],
        [   'const cv.COLOR_YUV2RGBA_Y422',
            'COLOR_YUV2RGBA_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2BGRA_Y422',
            'COLOR_YUV2BGRA_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2RGBA_UYNV',
            'COLOR_YUV2RGBA_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2BGRA_UYNV',
            'COLOR_YUV2BGRA_UYVY',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_YUV2RGB_YUY2', '115', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_YUY2', '116', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_YVYU', '117', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_YVYU', '118', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_YUYV', 'COLOR_YUV2RGB_YUY2', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_YUYV', 'COLOR_YUV2BGR_YUY2', [], [], None, ''],
        ['const cv.COLOR_YUV2RGB_YUNV', 'COLOR_YUV2RGB_YUY2', [], [], None, ''],
        ['const cv.COLOR_YUV2BGR_YUNV', 'COLOR_YUV2BGR_YUY2', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_YUY2', '119', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_YUY2', '120', [], [], None, ''],
        ['const cv.COLOR_YUV2RGBA_YVYU', '121', [], [], None, ''],
        ['const cv.COLOR_YUV2BGRA_YVYU', '122', [], [], None, ''],
        [   'const cv.COLOR_YUV2RGBA_YUYV',
            'COLOR_YUV2RGBA_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2BGRA_YUYV',
            'COLOR_YUV2BGRA_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2RGBA_YUNV',
            'COLOR_YUV2RGBA_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2BGRA_YUNV',
            'COLOR_YUV2BGRA_YUY2',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_YUV2GRAY_UYVY', '123', [], [], None, ''],
        ['const cv.COLOR_YUV2GRAY_YUY2', '124', [], [], None, ''],
        [   'const cv.COLOR_YUV2GRAY_Y422',
            'COLOR_YUV2GRAY_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_UYNV',
            'COLOR_YUV2GRAY_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_YVYU',
            'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_YUYV',
            'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_YUV2GRAY_YUNV',
            'COLOR_YUV2GRAY_YUY2',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_RGBA2mRGBA', '125', [], [], None, ''],
        ['const cv.COLOR_mRGBA2RGBA', '126', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_I420', '127', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_I420', '128', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_IYUV', 'COLOR_RGB2YUV_I420', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_IYUV', 'COLOR_BGR2YUV_I420', [], [], None, ''],
        ['const cv.COLOR_RGBA2YUV_I420', '129', [], [], None, ''],
        ['const cv.COLOR_BGRA2YUV_I420', '130', [], [], None, ''],
        [   'const cv.COLOR_RGBA2YUV_IYUV',
            'COLOR_RGBA2YUV_I420',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BGRA2YUV_IYUV',
            'COLOR_BGRA2YUV_I420',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_RGB2YUV_YV12', '131', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_YV12', '132', [], [], None, ''],
        ['const cv.COLOR_RGBA2YUV_YV12', '133', [], [], None, ''],
        ['const cv.COLOR_BGRA2YUV_YV12', '134', [], [], None, ''],
        ['const cv.COLOR_BayerBG2BGR', '46', [], [], None, ''],
        ['const cv.COLOR_BayerGB2BGR', '47', [], [], None, ''],
        ['const cv.COLOR_BayerRG2BGR', '48', [], [], None, ''],
        ['const cv.COLOR_BayerGR2BGR', '49', [], [], None, ''],
        ['const cv.COLOR_BayerRGGB2BGR', 'COLOR_BayerBG2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerGRBG2BGR', 'COLOR_BayerGB2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerBGGR2BGR', 'COLOR_BayerRG2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerGBRG2BGR', 'COLOR_BayerGR2BGR', [], [], None, ''],
        [   'const cv.COLOR_BayerRGGB2RGB',
            'COLOR_BayerBGGR2BGR',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2RGB',
            'COLOR_BayerGBRG2BGR',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2RGB',
            'COLOR_BayerRGGB2BGR',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2RGB',
            'COLOR_BayerGRBG2BGR',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_BayerBG2RGB', 'COLOR_BayerRG2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerGB2RGB', 'COLOR_BayerGR2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerRG2RGB', 'COLOR_BayerBG2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerGR2RGB', 'COLOR_BayerGB2BGR', [], [], None, ''],
        ['const cv.COLOR_BayerBG2GRAY', '86', [], [], None, ''],
        ['const cv.COLOR_BayerGB2GRAY', '87', [], [], None, ''],
        ['const cv.COLOR_BayerRG2GRAY', '88', [], [], None, ''],
        ['const cv.COLOR_BayerGR2GRAY', '89', [], [], None, ''],
        [   'const cv.COLOR_BayerRGGB2GRAY',
            'COLOR_BayerBG2GRAY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2GRAY',
            'COLOR_BayerGB2GRAY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2GRAY',
            'COLOR_BayerRG2GRAY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2GRAY',
            'COLOR_BayerGR2GRAY',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_BayerBG2BGR_VNG', '62', [], [], None, ''],
        ['const cv.COLOR_BayerGB2BGR_VNG', '63', [], [], None, ''],
        ['const cv.COLOR_BayerRG2BGR_VNG', '64', [], [], None, ''],
        ['const cv.COLOR_BayerGR2BGR_VNG', '65', [], [], None, ''],
        [   'const cv.COLOR_BayerRGGB2BGR_VNG',
            'COLOR_BayerBG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2BGR_VNG',
            'COLOR_BayerGB2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2BGR_VNG',
            'COLOR_BayerRG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2BGR_VNG',
            'COLOR_BayerGR2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerRGGB2RGB_VNG',
            'COLOR_BayerBGGR2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2RGB_VNG',
            'COLOR_BayerGBRG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2RGB_VNG',
            'COLOR_BayerRGGB2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2RGB_VNG',
            'COLOR_BayerGRBG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBG2RGB_VNG',
            'COLOR_BayerRG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGB2RGB_VNG',
            'COLOR_BayerGR2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerRG2RGB_VNG',
            'COLOR_BayerBG2BGR_VNG',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGR2RGB_VNG',
            'COLOR_BayerGB2BGR_VNG',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_BayerBG2BGR_EA', '135', [], [], None, ''],
        ['const cv.COLOR_BayerGB2BGR_EA', '136', [], [], None, ''],
        ['const cv.COLOR_BayerRG2BGR_EA', '137', [], [], None, ''],
        ['const cv.COLOR_BayerGR2BGR_EA', '138', [], [], None, ''],
        [   'const cv.COLOR_BayerRGGB2BGR_EA',
            'COLOR_BayerBG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2BGR_EA',
            'COLOR_BayerGB2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2BGR_EA',
            'COLOR_BayerRG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2BGR_EA',
            'COLOR_BayerGR2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerRGGB2RGB_EA',
            'COLOR_BayerBGGR2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2RGB_EA',
            'COLOR_BayerGBRG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2RGB_EA',
            'COLOR_BayerRGGB2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2RGB_EA',
            'COLOR_BayerGRBG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBG2RGB_EA',
            'COLOR_BayerRG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGB2RGB_EA',
            'COLOR_BayerGR2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerRG2RGB_EA',
            'COLOR_BayerBG2BGR_EA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGR2RGB_EA',
            'COLOR_BayerGB2BGR_EA',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_BayerBG2BGRA', '139', [], [], None, ''],
        ['const cv.COLOR_BayerGB2BGRA', '140', [], [], None, ''],
        ['const cv.COLOR_BayerRG2BGRA', '141', [], [], None, ''],
        ['const cv.COLOR_BayerGR2BGRA', '142', [], [], None, ''],
        [   'const cv.COLOR_BayerRGGB2BGRA',
            'COLOR_BayerBG2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2BGRA',
            'COLOR_BayerGB2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2BGRA',
            'COLOR_BayerRG2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2BGRA',
            'COLOR_BayerGR2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerRGGB2RGBA',
            'COLOR_BayerBGGR2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGRBG2RGBA',
            'COLOR_BayerGBRG2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerBGGR2RGBA',
            'COLOR_BayerRGGB2BGRA',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BayerGBRG2RGBA',
            'COLOR_BayerGRBG2BGRA',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_BayerBG2RGBA', 'COLOR_BayerRG2BGRA', [], [], None, ''],
        ['const cv.COLOR_BayerGB2RGBA', 'COLOR_BayerGR2BGRA', [], [], None, ''],
        ['const cv.COLOR_BayerRG2RGBA', 'COLOR_BayerBG2BGRA', [], [], None, ''],
        ['const cv.COLOR_BayerGR2RGBA', 'COLOR_BayerGB2BGRA', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_UYVY', '143', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_UYVY', '144', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_Y422', 'COLOR_RGB2YUV_UYVY', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_Y422', 'COLOR_BGR2YUV_UYVY', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_UYNV', 'COLOR_RGB2YUV_UYVY', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_UYNV', 'COLOR_BGR2YUV_UYVY', [], [], None, ''],
        ['const cv.COLOR_RGBA2YUV_UYVY', '145', [], [], None, ''],
        ['const cv.COLOR_BGRA2YUV_UYVY', '146', [], [], None, ''],
        [   'const cv.COLOR_RGBA2YUV_Y422',
            'COLOR_RGBA2YUV_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BGRA2YUV_Y422',
            'COLOR_BGRA2YUV_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_RGBA2YUV_UYNV',
            'COLOR_RGBA2YUV_UYVY',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BGRA2YUV_UYNV',
            'COLOR_BGRA2YUV_UYVY',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_RGB2YUV_YUY2', '147', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_YUY2', '148', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_YVYU', '149', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_YVYU', '150', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_YUYV', 'COLOR_RGB2YUV_YUY2', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_YUYV', 'COLOR_BGR2YUV_YUY2', [], [], None, ''],
        ['const cv.COLOR_RGB2YUV_YUNV', 'COLOR_RGB2YUV_YUY2', [], [], None, ''],
        ['const cv.COLOR_BGR2YUV_YUNV', 'COLOR_BGR2YUV_YUY2', [], [], None, ''],
        ['const cv.COLOR_RGBA2YUV_YUY2', '151', [], [], None, ''],
        ['const cv.COLOR_BGRA2YUV_YUY2', '152', [], [], None, ''],
        ['const cv.COLOR_RGBA2YUV_YVYU', '153', [], [], None, ''],
        ['const cv.COLOR_BGRA2YUV_YVYU', '154', [], [], None, ''],
        [   'const cv.COLOR_RGBA2YUV_YUYV',
            'COLOR_RGBA2YUV_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BGRA2YUV_YUYV',
            'COLOR_BGRA2YUV_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_RGBA2YUV_YUNV',
            'COLOR_RGBA2YUV_YUY2',
            [],
            [],
            None,
            ''],
        [   'const cv.COLOR_BGRA2YUV_YUNV',
            'COLOR_BGRA2YUV_YUY2',
            [],
            [],
            None,
            ''],
        ['const cv.COLOR_COLORCVT_MAX', '155', [], [], None, '']],
    None]
ok: CONST COLOR_BGR2BGRA=0
ok: CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA
ok: CONST COLOR_BGRA2BGR=1
ok: CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR
ok: CONST COLOR_BGR2RGBA=2
ok: CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA
ok: CONST COLOR_RGBA2BGR=3
ok: CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR
ok: CONST COLOR_BGR2RGB=4
ok: CONST COLOR_RGB2BGR=COLOR_BGR2RGB
ok: CONST COLOR_BGRA2RGBA=5
ok: CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA
ok: CONST COLOR_BGR2GRAY=6
ok: CONST COLOR_RGB2GRAY=7
ok: CONST COLOR_GRAY2BGR=8
ok: CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR
ok: CONST COLOR_GRAY2BGRA=9
ok: CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA
ok: CONST COLOR_BGRA2GRAY=10
ok: CONST COLOR_RGBA2GRAY=11
ok: CONST COLOR_BGR2BGR565=12
ok: CONST COLOR_RGB2BGR565=13
ok: CONST COLOR_BGR5652BGR=14
ok: CONST COLOR_BGR5652RGB=15
ok: CONST COLOR_BGRA2BGR565=16
ok: CONST COLOR_RGBA2BGR565=17
ok: CONST COLOR_BGR5652BGRA=18
ok: CONST COLOR_BGR5652RGBA=19
ok: CONST COLOR_GRAY2BGR565=20
ok: CONST COLOR_BGR5652GRAY=21
ok: CONST COLOR_BGR2BGR555=22
ok: CONST COLOR_RGB2BGR555=23
ok: CONST COLOR_BGR5552BGR=24
ok: CONST COLOR_BGR5552RGB=25
ok: CONST COLOR_BGRA2BGR555=26
ok: CONST COLOR_RGBA2BGR555=27
ok: CONST COLOR_BGR5552BGRA=28
ok: CONST COLOR_BGR5552RGBA=29
ok: CONST COLOR_GRAY2BGR555=30
ok: CONST COLOR_BGR5552GRAY=31
ok: CONST COLOR_BGR2XYZ=32
ok: CONST COLOR_RGB2XYZ=33
ok: CONST COLOR_XYZ2BGR=34
ok: CONST COLOR_XYZ2RGB=35
ok: CONST COLOR_BGR2YCrCb=36
ok: CONST COLOR_RGB2YCrCb=37
ok: CONST COLOR_YCrCb2BGR=38
ok: CONST COLOR_YCrCb2RGB=39
ok: CONST COLOR_BGR2HSV=40
ok: CONST COLOR_RGB2HSV=41
ok: CONST COLOR_BGR2Lab=44
ok: CONST COLOR_RGB2Lab=45
ok: CONST COLOR_BGR2Luv=50
ok: CONST COLOR_RGB2Luv=51
ok: CONST COLOR_BGR2HLS=52
ok: CONST COLOR_RGB2HLS=53
ok: CONST COLOR_HSV2BGR=54
ok: CONST COLOR_HSV2RGB=55
ok: CONST COLOR_Lab2BGR=56
ok: CONST COLOR_Lab2RGB=57
ok: CONST COLOR_Luv2BGR=58
ok: CONST COLOR_Luv2RGB=59
ok: CONST COLOR_HLS2BGR=60
ok: CONST COLOR_HLS2RGB=61
ok: CONST COLOR_BGR2HSV_FULL=66
ok: CONST COLOR_RGB2HSV_FULL=67
ok: CONST COLOR_BGR2HLS_FULL=68
ok: CONST COLOR_RGB2HLS_FULL=69
ok: CONST COLOR_HSV2BGR_FULL=70
ok: CONST COLOR_HSV2RGB_FULL=71
ok: CONST COLOR_HLS2BGR_FULL=72
ok: CONST COLOR_HLS2RGB_FULL=73
ok: CONST COLOR_LBGR2Lab=74
ok: CONST COLOR_LRGB2Lab=75
ok: CONST COLOR_LBGR2Luv=76
ok: CONST COLOR_LRGB2Luv=77
ok: CONST COLOR_Lab2LBGR=78
ok: CONST COLOR_Lab2LRGB=79
ok: CONST COLOR_Luv2LBGR=80
ok: CONST COLOR_Luv2LRGB=81
ok: CONST COLOR_BGR2YUV=82
ok: CONST COLOR_RGB2YUV=83
ok: CONST COLOR_YUV2BGR=84
ok: CONST COLOR_YUV2RGB=85
ok: CONST COLOR_YUV2RGB_NV12=90
ok: CONST COLOR_YUV2BGR_NV12=91
ok: CONST COLOR_YUV2RGB_NV21=92
ok: CONST COLOR_YUV2BGR_NV21=93
ok: CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21
ok: CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21
ok: CONST COLOR_YUV2RGBA_NV12=94
ok: CONST COLOR_YUV2BGRA_NV12=95
ok: CONST COLOR_YUV2RGBA_NV21=96
ok: CONST COLOR_YUV2BGRA_NV21=97
ok: CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21
ok: CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21
ok: CONST COLOR_YUV2RGB_YV12=98
ok: CONST COLOR_YUV2BGR_YV12=99
ok: CONST COLOR_YUV2RGB_IYUV=100
ok: CONST COLOR_YUV2BGR_IYUV=101
ok: CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV
ok: CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV
ok: CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12
ok: CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12
ok: CONST COLOR_YUV2RGBA_YV12=102
ok: CONST COLOR_YUV2BGRA_YV12=103
ok: CONST COLOR_YUV2RGBA_IYUV=104
ok: CONST COLOR_YUV2BGRA_IYUV=105
ok: CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV
ok: CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV
ok: CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12
ok: CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12
ok: CONST COLOR_YUV2GRAY_420=106
ok: CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420
ok: CONST COLOR_YUV2RGB_UYVY=107
ok: CONST COLOR_YUV2BGR_UYVY=108
ok: CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY
ok: CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY
ok: CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY
ok: CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY
ok: CONST COLOR_YUV2RGBA_UYVY=111
ok: CONST COLOR_YUV2BGRA_UYVY=112
ok: CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY
ok: CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY
ok: CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY
ok: CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY
ok: CONST COLOR_YUV2RGB_YUY2=115
ok: CONST COLOR_YUV2BGR_YUY2=116
ok: CONST COLOR_YUV2RGB_YVYU=117
ok: CONST COLOR_YUV2BGR_YVYU=118
ok: CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2
ok: CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2
ok: CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2
ok: CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2
ok: CONST COLOR_YUV2RGBA_YUY2=119
ok: CONST COLOR_YUV2BGRA_YUY2=120
ok: CONST COLOR_YUV2RGBA_YVYU=121
ok: CONST COLOR_YUV2BGRA_YVYU=122
ok: CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2
ok: CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2
ok: CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2
ok: CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2
ok: CONST COLOR_YUV2GRAY_UYVY=123
ok: CONST COLOR_YUV2GRAY_YUY2=124
ok: CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY
ok: CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY
ok: CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2
ok: CONST COLOR_RGBA2mRGBA=125
ok: CONST COLOR_mRGBA2RGBA=126
ok: CONST COLOR_RGB2YUV_I420=127
ok: CONST COLOR_BGR2YUV_I420=128
ok: CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420
ok: CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420
ok: CONST COLOR_RGBA2YUV_I420=129
ok: CONST COLOR_BGRA2YUV_I420=130
ok: CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420
ok: CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420
ok: CONST COLOR_RGB2YUV_YV12=131
ok: CONST COLOR_BGR2YUV_YV12=132
ok: CONST COLOR_RGBA2YUV_YV12=133
ok: CONST COLOR_BGRA2YUV_YV12=134
ok: CONST COLOR_BayerBG2BGR=46
ok: CONST COLOR_BayerGB2BGR=47
ok: CONST COLOR_BayerRG2BGR=48
ok: CONST COLOR_BayerGR2BGR=49
ok: CONST COLOR_BayerRGGB2BGR=COLOR_BayerBG2BGR
ok: CONST COLOR_BayerGRBG2BGR=COLOR_BayerGB2BGR
ok: CONST COLOR_BayerBGGR2BGR=COLOR_BayerRG2BGR
ok: CONST COLOR_BayerGBRG2BGR=COLOR_BayerGR2BGR
ok: CONST COLOR_BayerRGGB2RGB=COLOR_BayerBGGR2BGR
ok: CONST COLOR_BayerGRBG2RGB=COLOR_BayerGBRG2BGR
ok: CONST COLOR_BayerBGGR2RGB=COLOR_BayerRGGB2BGR
ok: CONST COLOR_BayerGBRG2RGB=COLOR_BayerGRBG2BGR
ok: CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR
ok: CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR
ok: CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR
ok: CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR
ok: CONST COLOR_BayerBG2GRAY=86
ok: CONST COLOR_BayerGB2GRAY=87
ok: CONST COLOR_BayerRG2GRAY=88
ok: CONST COLOR_BayerGR2GRAY=89
ok: CONST COLOR_BayerRGGB2GRAY=COLOR_BayerBG2GRAY
ok: CONST COLOR_BayerGRBG2GRAY=COLOR_BayerGB2GRAY
ok: CONST COLOR_BayerBGGR2GRAY=COLOR_BayerRG2GRAY
ok: CONST COLOR_BayerGBRG2GRAY=COLOR_BayerGR2GRAY
ok: CONST COLOR_BayerBG2BGR_VNG=62
ok: CONST COLOR_BayerGB2BGR_VNG=63
ok: CONST COLOR_BayerRG2BGR_VNG=64
ok: CONST COLOR_BayerGR2BGR_VNG=65
ok: CONST COLOR_BayerRGGB2BGR_VNG=COLOR_BayerBG2BGR_VNG
ok: CONST COLOR_BayerGRBG2BGR_VNG=COLOR_BayerGB2BGR_VNG
ok: CONST COLOR_BayerBGGR2BGR_VNG=COLOR_BayerRG2BGR_VNG
ok: CONST COLOR_BayerGBRG2BGR_VNG=COLOR_BayerGR2BGR_VNG
ok: CONST COLOR_BayerRGGB2RGB_VNG=COLOR_BayerBGGR2BGR_VNG
ok: CONST COLOR_BayerGRBG2RGB_VNG=COLOR_BayerGBRG2BGR_VNG
ok: CONST COLOR_BayerBGGR2RGB_VNG=COLOR_BayerRGGB2BGR_VNG
ok: CONST COLOR_BayerGBRG2RGB_VNG=COLOR_BayerGRBG2BGR_VNG
ok: CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG
ok: CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG
ok: CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG
ok: CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG
ok: CONST COLOR_BayerBG2BGR_EA=135
ok: CONST COLOR_BayerGB2BGR_EA=136
ok: CONST COLOR_BayerRG2BGR_EA=137
ok: CONST COLOR_BayerGR2BGR_EA=138
ok: CONST COLOR_BayerRGGB2BGR_EA=COLOR_BayerBG2BGR_EA
ok: CONST COLOR_BayerGRBG2BGR_EA=COLOR_BayerGB2BGR_EA
ok: CONST COLOR_BayerBGGR2BGR_EA=COLOR_BayerRG2BGR_EA
ok: CONST COLOR_BayerGBRG2BGR_EA=COLOR_BayerGR2BGR_EA
ok: CONST COLOR_BayerRGGB2RGB_EA=COLOR_BayerBGGR2BGR_EA
ok: CONST COLOR_BayerGRBG2RGB_EA=COLOR_BayerGBRG2BGR_EA
ok: CONST COLOR_BayerBGGR2RGB_EA=COLOR_BayerRGGB2BGR_EA
ok: CONST COLOR_BayerGBRG2RGB_EA=COLOR_BayerGRBG2BGR_EA
ok: CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA
ok: CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA
ok: CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA
ok: CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA
ok: CONST COLOR_BayerBG2BGRA=139
ok: CONST COLOR_BayerGB2BGRA=140
ok: CONST COLOR_BayerRG2BGRA=141
ok: CONST COLOR_BayerGR2BGRA=142
ok: CONST COLOR_BayerRGGB2BGRA=COLOR_BayerBG2BGRA
ok: CONST COLOR_BayerGRBG2BGRA=COLOR_BayerGB2BGRA
ok: CONST COLOR_BayerBGGR2BGRA=COLOR_BayerRG2BGRA
ok: CONST COLOR_BayerGBRG2BGRA=COLOR_BayerGR2BGRA
ok: CONST COLOR_BayerRGGB2RGBA=COLOR_BayerBGGR2BGRA
ok: CONST COLOR_BayerGRBG2RGBA=COLOR_BayerGBRG2BGRA
ok: CONST COLOR_BayerBGGR2RGBA=COLOR_BayerRGGB2BGRA
ok: CONST COLOR_BayerGBRG2RGBA=COLOR_BayerGRBG2BGRA
ok: CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA
ok: CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA
ok: CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA
ok: CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA
ok: CONST COLOR_RGB2YUV_UYVY=143
ok: CONST COLOR_BGR2YUV_UYVY=144
ok: CONST COLOR_RGB2YUV_Y422=COLOR_RGB2YUV_UYVY
ok: CONST COLOR_BGR2YUV_Y422=COLOR_BGR2YUV_UYVY
ok: CONST COLOR_RGB2YUV_UYNV=COLOR_RGB2YUV_UYVY
ok: CONST COLOR_BGR2YUV_UYNV=COLOR_BGR2YUV_UYVY
ok: CONST COLOR_RGBA2YUV_UYVY=145
ok: CONST COLOR_BGRA2YUV_UYVY=146
ok: CONST COLOR_RGBA2YUV_Y422=COLOR_RGBA2YUV_UYVY
ok: CONST COLOR_BGRA2YUV_Y422=COLOR_BGRA2YUV_UYVY
ok: CONST COLOR_RGBA2YUV_UYNV=COLOR_RGBA2YUV_UYVY
ok: CONST COLOR_BGRA2YUV_UYNV=COLOR_BGRA2YUV_UYVY
ok: CONST COLOR_RGB2YUV_YUY2=147
ok: CONST COLOR_BGR2YUV_YUY2=148
ok: CONST COLOR_RGB2YUV_YVYU=149
ok: CONST COLOR_BGR2YUV_YVYU=150
ok: CONST COLOR_RGB2YUV_YUYV=COLOR_RGB2YUV_YUY2
ok: CONST COLOR_BGR2YUV_YUYV=COLOR_BGR2YUV_YUY2
ok: CONST COLOR_RGB2YUV_YUNV=COLOR_RGB2YUV_YUY2
ok: CONST COLOR_BGR2YUV_YUNV=COLOR_BGR2YUV_YUY2
ok: CONST COLOR_RGBA2YUV_YUY2=151
ok: CONST COLOR_BGRA2YUV_YUY2=152
ok: CONST COLOR_RGBA2YUV_YVYU=153
ok: CONST COLOR_BGRA2YUV_YVYU=154
ok: CONST COLOR_RGBA2YUV_YUYV=COLOR_RGBA2YUV_YUY2
ok: CONST COLOR_BGRA2YUV_YUYV=COLOR_BGRA2YUV_YUY2
ok: CONST COLOR_RGBA2YUV_YUNV=COLOR_RGBA2YUV_YUY2
ok: CONST COLOR_BGRA2YUV_YUNV=COLOR_BGRA2YUV_YUY2
ok: CONST COLOR_COLORCVT_MAX=155

--- Incoming ---
[   'enum cv.RectanglesIntersectTypes',
    '',
    [],
    [   ['const cv.INTERSECT_NONE', '0', [], [], None, ''],
        ['const cv.INTERSECT_PARTIAL', '1', [], [], None, ''],
        ['const cv.INTERSECT_FULL', '2', [], [], None, '']],
    None]
ok: CONST INTERSECT_NONE=0
ok: CONST INTERSECT_PARTIAL=1
ok: CONST INTERSECT_FULL=2

--- Incoming ---
[   'enum cv.LineTypes',
    '',
    [],
    [   ['const cv.FILLED', '-1', [], [], None, ''],
        ['const cv.LINE_4', '4', [], [], None, ''],
        ['const cv.LINE_8', '8', [], [], None, ''],
        ['const cv.LINE_AA', '16', [], [], None, '']],
    None]
ok: CONST FILLED=-1
ok: CONST LINE_4=4
ok: CONST LINE_8=8
ok: CONST LINE_AA=16

--- Incoming ---
[   'enum cv.HersheyFonts',
    '',
    [],
    [   ['const cv.FONT_HERSHEY_SIMPLEX', '0', [], [], None, ''],
        ['const cv.FONT_HERSHEY_PLAIN', '1', [], [], None, ''],
        ['const cv.FONT_HERSHEY_DUPLEX', '2', [], [], None, ''],
        ['const cv.FONT_HERSHEY_COMPLEX', '3', [], [], None, ''],
        ['const cv.FONT_HERSHEY_TRIPLEX', '4', [], [], None, ''],
        ['const cv.FONT_HERSHEY_COMPLEX_SMALL', '5', [], [], None, ''],
        ['const cv.FONT_HERSHEY_SCRIPT_SIMPLEX', '6', [], [], None, ''],
        ['const cv.FONT_HERSHEY_SCRIPT_COMPLEX', '7', [], [], None, ''],
        ['const cv.FONT_ITALIC', '16', [], [], None, '']],
    None]
ok: CONST FONT_HERSHEY_SIMPLEX=0
ok: CONST FONT_HERSHEY_PLAIN=1
ok: CONST FONT_HERSHEY_DUPLEX=2
ok: CONST FONT_HERSHEY_COMPLEX=3
ok: CONST FONT_HERSHEY_TRIPLEX=4
ok: CONST FONT_HERSHEY_COMPLEX_SMALL=5
ok: CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6
ok: CONST FONT_HERSHEY_SCRIPT_COMPLEX=7
ok: CONST FONT_ITALIC=16

--- Incoming ---
[   'enum cv.MarkerTypes',
    '',
    [],
    [   ['const cv.MARKER_CROSS', '0', [], [], None, ''],
        ['const cv.MARKER_TILTED_CROSS', '1', [], [], None, ''],
        ['const cv.MARKER_STAR', '2', [], [], None, ''],
        ['const cv.MARKER_DIAMOND', '3', [], [], None, ''],
        ['const cv.MARKER_SQUARE', '4', [], [], None, ''],
        ['const cv.MARKER_TRIANGLE_UP', '5', [], [], None, ''],
        ['const cv.MARKER_TRIANGLE_DOWN', '6', [], [], None, '']],
    None]
ok: CONST MARKER_CROSS=0
ok: CONST MARKER_TILTED_CROSS=1
ok: CONST MARKER_STAR=2
ok: CONST MARKER_DIAMOND=3
ok: CONST MARKER_SQUARE=4
ok: CONST MARKER_TRIANGLE_UP=5
ok: CONST MARKER_TRIANGLE_DOWN=6

--- Incoming ---
['class cv.GeneralizedHough', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.GeneralizedHough : Algorithm, name: GeneralizedHough, base: Algorithm

--- Incoming ---
[   'cv.GeneralizedHough.setTemplate',
    'void',
    ['/V', '/PV'],
    [['Mat', 'templ', '', []], ['Point', 'templCenter', 'Point(-1, -1)', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat templ=, ARG Point templCenter=Point(-1, -1)]>

--- Incoming ---
[   'cv.GeneralizedHough.setTemplate',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'edges', '', []],
        ['Mat', 'dx', '', []],
        ['Mat', 'dy', '', []],
        ['Point', 'templCenter', 'Point(-1, -1)', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Point templCenter=Point(-1, -1)]>

--- Incoming ---
[   'cv.GeneralizedHough.detect',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'positions', '', ['/O']],
        ['Mat', 'votes', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.GeneralizedHough.detect [ARG Mat image=, ARG Mat positions=, ARG Mat votes=Mat()]>

--- Incoming ---
[   'cv.GeneralizedHough.detect',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'edges', '', []],
        ['Mat', 'dx', '', []],
        ['Mat', 'dy', '', []],
        ['Mat', 'positions', '', ['/O']],
        ['Mat', 'votes', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.GeneralizedHough.detect [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Mat positions=, ARG Mat votes=Mat()]>

--- Incoming ---
[   'cv.GeneralizedHough.setCannyLowThresh',
    'void',
    ['/V', '/PV'],
    [['int', 'cannyLowThresh', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setCannyLowThresh [ARG int cannyLowThresh=]>

--- Incoming ---
['cv.GeneralizedHough.getCannyLowThresh', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GeneralizedHough.getCannyLowThresh []>

--- Incoming ---
[   'cv.GeneralizedHough.setCannyHighThresh',
    'void',
    ['/V', '/PV'],
    [['int', 'cannyHighThresh', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setCannyHighThresh [ARG int cannyHighThresh=]>

--- Incoming ---
[   'cv.GeneralizedHough.getCannyHighThresh',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.GeneralizedHough.getCannyHighThresh []>

--- Incoming ---
[   'cv.GeneralizedHough.setMinDist',
    'void',
    ['/V', '/PV'],
    [['double', 'minDist', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setMinDist [ARG double minDist=]>

--- Incoming ---
['cv.GeneralizedHough.getMinDist', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GeneralizedHough.getMinDist []>

--- Incoming ---
[   'cv.GeneralizedHough.setDp',
    'void',
    ['/V', '/PV'],
    [['double', 'dp', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setDp [ARG double dp=]>

--- Incoming ---
['cv.GeneralizedHough.getDp', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GeneralizedHough.getDp []>

--- Incoming ---
[   'cv.GeneralizedHough.setMaxBufferSize',
    'void',
    ['/V', '/PV'],
    [['int', 'maxBufferSize', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHough.setMaxBufferSize [ARG int maxBufferSize=]>

--- Incoming ---
['cv.GeneralizedHough.getMaxBufferSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GeneralizedHough.getMaxBufferSize []>

--- Incoming ---
['class cv.GeneralizedHoughBallard', ': cv::GeneralizedHough', [], [], None]
ok: class CLASS cv::.GeneralizedHoughBallard : GeneralizedHough, name: GeneralizedHoughBallard, base: GeneralizedHough

--- Incoming ---
[   'cv.GeneralizedHoughBallard.setLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'levels', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughBallard.setLevels [ARG int levels=]>

--- Incoming ---
['cv.GeneralizedHoughBallard.getLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GeneralizedHoughBallard.getLevels []>

--- Incoming ---
[   'cv.GeneralizedHoughBallard.setVotesThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'votesThreshold', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughBallard.setVotesThreshold [ARG int votesThreshold=]>

--- Incoming ---
[   'cv.GeneralizedHoughBallard.getVotesThreshold',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.GeneralizedHoughBallard.getVotesThreshold []>

--- Incoming ---
['class cv.GeneralizedHoughGuil', ': cv::GeneralizedHough', [], [], None]
ok: class CLASS cv::.GeneralizedHoughGuil : GeneralizedHough, name: GeneralizedHoughGuil, base: GeneralizedHough

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setXi',
    'void',
    ['/V', '/PV'],
    [['double', 'xi', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setXi [ARG double xi=]>

--- Incoming ---
['cv.GeneralizedHoughGuil.getXi', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getXi []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'levels', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setLevels [ARG int levels=]>

--- Incoming ---
['cv.GeneralizedHoughGuil.getLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getLevels []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setAngleEpsilon',
    'void',
    ['/V', '/PV'],
    [['double', 'angleEpsilon', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleEpsilon [ARG double angleEpsilon=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getAngleEpsilon',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getAngleEpsilon []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setMinAngle',
    'void',
    ['/V', '/PV'],
    [['double', 'minAngle', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMinAngle [ARG double minAngle=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getMinAngle',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMinAngle []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setMaxAngle',
    'void',
    ['/V', '/PV'],
    [['double', 'maxAngle', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMaxAngle [ARG double maxAngle=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getMaxAngle',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMaxAngle []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setAngleStep',
    'void',
    ['/V', '/PV'],
    [['double', 'angleStep', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleStep [ARG double angleStep=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getAngleStep',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getAngleStep []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setAngleThresh',
    'void',
    ['/V', '/PV'],
    [['int', 'angleThresh', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setAngleThresh [ARG int angleThresh=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getAngleThresh',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getAngleThresh []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setMinScale',
    'void',
    ['/V', '/PV'],
    [['double', 'minScale', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMinScale [ARG double minScale=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getMinScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMinScale []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setMaxScale',
    'void',
    ['/V', '/PV'],
    [['double', 'maxScale', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setMaxScale [ARG double maxScale=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getMaxScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getMaxScale []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setScaleStep',
    'void',
    ['/V', '/PV'],
    [['double', 'scaleStep', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setScaleStep [ARG double scaleStep=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getScaleStep',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.GeneralizedHoughGuil.getScaleStep []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setScaleThresh',
    'void',
    ['/V', '/PV'],
    [['int', 'scaleThresh', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setScaleThresh [ARG int scaleThresh=]>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.getScaleThresh',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getScaleThresh []>

--- Incoming ---
[   'cv.GeneralizedHoughGuil.setPosThresh',
    'void',
    ['/V', '/PV'],
    [['int', 'posThresh', '', []]],
    'void']
ok: FUNC <void cv.GeneralizedHoughGuil.setPosThresh [ARG int posThresh=]>

--- Incoming ---
['cv.GeneralizedHoughGuil.getPosThresh', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GeneralizedHoughGuil.getPosThresh []>

--- Incoming ---
['class cv.CLAHE', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.CLAHE : Algorithm, name: CLAHE, base: Algorithm

--- Incoming ---
[   'cv.CLAHE.apply',
    'void',
    ['/V', '/PV'],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.CLAHE.setClipLimit',
    'void',
    ['/V', '/PV'],
    [['double', 'clipLimit', '', []]],
    'void']
ok: FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>

--- Incoming ---
['cv.CLAHE.getClipLimit', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.CLAHE.getClipLimit []>

--- Incoming ---
[   'cv.CLAHE.setTilesGridSize',
    'void',
    ['/V', '/PV'],
    [['Size', 'tileGridSize', '', []]],
    'void']
ok: FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>

--- Incoming ---
['cv.CLAHE.getTilesGridSize', 'Size', ['/C', '/V', '/PV'], [], 'Size']
ok: FUNC <Size cv.CLAHE.getTilesGridSize []>

--- Incoming ---
['cv.CLAHE.collectGarbage', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.CLAHE.collectGarbage []>

--- Incoming ---
['class cv.Subdiv2D', '', [], [], None]
ok: class CLASS cv::.Subdiv2D : , name: Subdiv2D, base: 

--- Incoming ---
[   'enum cv.Subdiv2D.<unnamed>',
    '',
    [],
    [   ['const cv.Subdiv2D.PTLOC_ERROR', '-2', [], [], None, ''],
        ['const cv.Subdiv2D.PTLOC_OUTSIDE_RECT', '-1', [], [], None, ''],
        ['const cv.Subdiv2D.PTLOC_INSIDE', '0', [], [], None, ''],
        ['const cv.Subdiv2D.PTLOC_VERTEX', '1', [], [], None, ''],
        ['const cv.Subdiv2D.PTLOC_ON_EDGE', '2', [], [], None, '']],
    None]
ok: CONST PTLOC_ERROR=-2
ok: CONST PTLOC_OUTSIDE_RECT=-1
ok: CONST PTLOC_INSIDE=0
ok: CONST PTLOC_VERTEX=1
ok: CONST PTLOC_ON_EDGE=2

--- Incoming ---
[   'enum cv.Subdiv2D.<unnamed>',
    '',
    [],
    [   ['const cv.Subdiv2D.NEXT_AROUND_ORG', '0x00', [], [], None, ''],
        ['const cv.Subdiv2D.NEXT_AROUND_DST', '0x22', [], [], None, ''],
        ['const cv.Subdiv2D.PREV_AROUND_ORG', '0x11', [], [], None, ''],
        ['const cv.Subdiv2D.PREV_AROUND_DST', '0x33', [], [], None, ''],
        ['const cv.Subdiv2D.NEXT_AROUND_LEFT', '0x13', [], [], None, ''],
        ['const cv.Subdiv2D.NEXT_AROUND_RIGHT', '0x31', [], [], None, ''],
        ['const cv.Subdiv2D.PREV_AROUND_LEFT', '0x20', [], [], None, ''],
        ['const cv.Subdiv2D.PREV_AROUND_RIGHT', '0x02', [], [], None, '']],
    None]
ok: CONST NEXT_AROUND_ORG=0x00
ok: CONST NEXT_AROUND_DST=0x22
ok: CONST PREV_AROUND_ORG=0x11
ok: CONST PREV_AROUND_DST=0x33
ok: CONST NEXT_AROUND_LEFT=0x13
ok: CONST NEXT_AROUND_RIGHT=0x31
ok: CONST PREV_AROUND_LEFT=0x20
ok: CONST PREV_AROUND_RIGHT=0x02

--- Incoming ---
['cv.Subdiv2D.Subdiv2D', '', [], [], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D []>

--- Incoming ---
['cv.Subdiv2D.Subdiv2D', '', [], [['Rect', 'rect', '', []]], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>

--- Incoming ---
['cv.Subdiv2D.initDelaunay', 'void', [], [['Rect', 'rect', '', []]], 'void']
ok: FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>

--- Incoming ---
['cv.Subdiv2D.insert', 'int', [], [['Point2f', 'pt', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>

--- Incoming ---
[   'cv.Subdiv2D.insert',
    'void',
    [],
    [['vector_Point2f', 'ptvec', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>

--- Incoming ---
[   'cv.Subdiv2D.locate',
    'int',
    [],
    [   ['Point2f', 'pt', '', []],
        ['int', 'edge', '', ['/O', '/Ref']],
        ['int', 'vertex', '', ['/O', '/Ref']]],
    'int']
ok: FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>

--- Incoming ---
[   'cv.Subdiv2D.findNearest',
    'int',
    [],
    [['Point2f', 'pt', '', []], ['Point2f*', 'nearestPt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>

--- Incoming ---
[   'cv.Subdiv2D.getEdgeList',
    'void',
    ['/C'],
    [['vector_Vec4f', 'edgeList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>

--- Incoming ---
[   'cv.Subdiv2D.getLeadingEdgeList',
    'void',
    ['/C'],
    [['vector_int', 'leadingEdgeList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>

--- Incoming ---
[   'cv.Subdiv2D.getTriangleList',
    'void',
    ['/C'],
    [['vector_Vec6f', 'triangleList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>

--- Incoming ---
[   'cv.Subdiv2D.getVoronoiFacetList',
    'void',
    [],
    [   ['vector_int', 'idx', '', ['/C', '/Ref']],
        ['vector_vector_Point2f', 'facetList', '', ['/O', '/Ref']],
        ['vector_Point2f', 'facetCenters', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>

--- Incoming ---
[   'cv.Subdiv2D.getVertex',
    'Point2f',
    ['/C'],
    [['int', 'vertex', '', []], ['int*', 'firstEdge', '0', ['/O']]],
    'Point2f']
ok: FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>

--- Incoming ---
[   'cv.Subdiv2D.getEdge',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['int', 'nextEdgeType', '', []]],
    'int']
ok: FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>

--- Incoming ---
['cv.Subdiv2D.nextEdge', 'int', ['/C'], [['int', 'edge', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>

--- Incoming ---
[   'cv.Subdiv2D.rotateEdge',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['int', 'rotate', '', []]],
    'int']
ok: FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>

--- Incoming ---
['cv.Subdiv2D.symEdge', 'int', ['/C'], [['int', 'edge', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>

--- Incoming ---
[   'cv.Subdiv2D.edgeOrg',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['Point2f*', 'orgpt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>

--- Incoming ---
[   'cv.Subdiv2D.edgeDst',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['Point2f*', 'dstpt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>

--- Incoming ---
['class cv.LineSegmentDetector', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.LineSegmentDetector : Algorithm, name: LineSegmentDetector, base: Algorithm

--- Incoming ---
[   'cv.LineSegmentDetector.detect',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['Mat', 'width', 'Mat()', ['/O']],
        ['Mat', 'prec', 'Mat()', ['/O']],
        ['Mat', 'nfa', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.LineSegmentDetector.detect [ARG Mat image=, ARG Mat lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>

--- Incoming ---
[   'cv.LineSegmentDetector.drawSegments',
    'void',
    ['/V', '/PV'],
    [['Mat', 'image', '', ['/IO']], ['Mat', 'lines', '', []]],
    'void']
ok: FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat image=, ARG Mat lines=]>

--- Incoming ---
[   'cv.LineSegmentDetector.compareSegments',
    'int',
    ['/V', '/PV'],
    [   ['Size', 'size', '', ['/C', '/Ref']],
        ['Mat', 'lines1', '', []],
        ['Mat', 'lines2', '', []],
        ['Mat', 'image', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat image=Mat()]>

--- Incoming ---
[   'cv.createLineSegmentDetector',
    'Ptr_LineSegmentDetector',
    [],
    [   ['int', 'refine', 'LSD_REFINE_STD', []],
        ['double', 'scale', '0.8', []],
        ['double', 'sigma_scale', '0.6', []],
        ['double', 'quant', '2.0', []],
        ['double', 'ang_th', '22.5', []],
        ['double', 'log_eps', '0', []],
        ['double', 'density_th', '0.7', []],
        ['int', 'n_bins', '1024', []]],
    'Ptr<LineSegmentDetector>']
ok: FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG int refine=LSD_REFINE_STD, ARG double scale=0.8, ARG double sigma_scale=0.6, ARG double quant=2.0, ARG double ang_th=22.5, ARG double log_eps=0, ARG double density_th=0.7, ARG int n_bins=1024]>

--- Incoming ---
[   'cv.getGaussianKernel',
    'Mat',
    [],
    [   ['int', 'ksize', '', []],
        ['double', 'sigma', '', []],
        ['int', 'ktype', 'CV_64F', []]],
    'Mat']
ok: FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>

--- Incoming ---
[   'cv.getDerivKernels',
    'void',
    [],
    [   ['Mat', 'kx', '', ['/O']],
        ['Mat', 'ky', '', ['/O']],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['int', 'ksize', '', []],
        ['bool', 'normalize', 'false', []],
        ['int', 'ktype', 'CV_32F', []]],
    'void']
ok: FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>

--- Incoming ---
[   'cv.getGaborKernel',
    'Mat',
    [],
    [   ['Size', 'ksize', '', []],
        ['double', 'sigma', '', []],
        ['double', 'theta', '', []],
        ['double', 'lambd', '', []],
        ['double', 'gamma', '', []],
        ['double', 'psi', 'CV_PI*0.5', []],
        ['int', 'ktype', 'CV_64F', []]],
    'Mat']
ok: FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>

--- Incoming ---
[   'cv.getStructuringElement',
    'Mat',
    [],
    [   ['int', 'shape', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []]],
    'Mat']
ok: FUNC <Mat cv..getStructuringElement [ARG int shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>

--- Incoming ---
[   'cv.medianBlur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ksize', '', []]],
    'void']
ok: FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>

--- Incoming ---
[   'cv.GaussianBlur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'ksize', '', []],
        ['double', 'sigmaX', '', []],
        ['double', 'sigmaY', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.bilateralFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'd', '', []],
        ['double', 'sigmaColor', '', []],
        ['double', 'sigmaSpace', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.boxFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['bool', 'normalize', 'true', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.sqrBoxFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1, -1)', []],
        ['bool', 'normalize', 'true', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..sqrBoxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.blur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.stackBlur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'ksize', '', []]],
    'void']
ok: FUNC <void cv..stackBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=]>

--- Incoming ---
[   'cv.filter2D',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.sepFilter2D',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Mat', 'kernelX', '', []],
        ['Mat', 'kernelY', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Sobel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['int', 'ksize', '3', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.spatialGradient',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dx', '', ['/O']],
        ['Mat', 'dy', '', ['/O']],
        ['int', 'ksize', '3', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Scharr',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Laplacian',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'ksize', '1', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Canny',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'edges', '', ['/O']],
        ['double', 'threshold1', '', []],
        ['double', 'threshold2', '', []],
        ['int', 'apertureSize', '3', []],
        ['bool', 'L2gradient', 'false', []]],
    'void']
ok: FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>

--- Incoming ---
[   'cv.Canny',
    'void',
    [],
    [   ['Mat', 'dx', '', []],
        ['Mat', 'dy', '', []],
        ['Mat', 'edges', '', ['/O']],
        ['double', 'threshold1', '', []],
        ['double', 'threshold2', '', []],
        ['bool', 'L2gradient', 'false', []]],
    'void']
ok: FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>

--- Incoming ---
[   'cv.cornerMinEigenVal',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '3', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerHarris',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '', []],
        ['double', 'k', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerEigenValsAndVecs',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.preCornerDetect',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ksize', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerSubPix',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/IO']],
        ['Size', 'winSize', '', []],
        ['Size', 'zeroZone', '', []],
        ['TermCriteria', 'criteria', '', []]],
    'void']
ok: FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.goodFeaturesToTrack',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'blockSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.goodFeaturesToTrack',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['Mat', 'mask', '', []],
        ['int', 'blockSize', '', []],
        ['int', 'gradientSize', '', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.goodFeaturesToTrack',
    'void',
    ['=goodFeaturesToTrackWithQuality'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'cornersQuality', '', ['/O']],
        ['int', 'blockSize', '3', []],
        ['int', 'gradientSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG Mat corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG Mat cornersQuality=, ARG int blockSize=3, ARG int gradientSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.HoughLines',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['double', 'rho', '', []],
        ['double', 'theta', '', []],
        ['int', 'threshold', '', []],
        ['double', 'srn', '0', []],
        ['double', 'stn', '0', []],
        ['double', 'min_theta', '0', []],
        ['double', 'max_theta', 'CV_PI', []]],
    'void']
ok: FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>

--- Incoming ---
[   'cv.HoughLinesP',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['double', 'rho', '', []],
        ['double', 'theta', '', []],
        ['int', 'threshold', '', []],
        ['double', 'minLineLength', '0', []],
        ['double', 'maxLineGap', '0', []]],
    'void']
ok: FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>

--- Incoming ---
[   'cv.HoughLinesPointSet',
    'void',
    [],
    [   ['Mat', 'point', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['int', 'lines_max', '', []],
        ['int', 'threshold', '', []],
        ['double', 'min_rho', '', []],
        ['double', 'max_rho', '', []],
        ['double', 'rho_step', '', []],
        ['double', 'min_theta', '', []],
        ['double', 'max_theta', '', []],
        ['double', 'theta_step', '', []]],
    'void']
ok: FUNC <void cv..HoughLinesPointSet [ARG Mat point=, ARG Mat lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>

--- Incoming ---
[   'cv.HoughCircles',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'circles', '', ['/O']],
        ['int', 'method', '', []],
        ['double', 'dp', '', []],
        ['double', 'minDist', '', []],
        ['double', 'param1', '100', []],
        ['double', 'param2', '100', []],
        ['int', 'minRadius', '0', []],
        ['int', 'maxRadius', '0', []]],
    'void']
ok: FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG int method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>

--- Incoming ---
[   'cv.erode',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.dilate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.morphologyEx',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'op', '', []],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG int op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.resize',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dsize', '', []],
        ['double', 'fx', '0', []],
        ['double', 'fy', '0', []],
        ['int', 'interpolation', 'INTER_LINEAR', []]],
    'void']
ok: FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>

--- Incoming ---
[   'cv.warpAffine',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'M', '', []],
        ['Size', 'dsize', '', []],
        ['int', 'flags', 'INTER_LINEAR', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.warpPerspective',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'M', '', []],
        ['Size', 'dsize', '', []],
        ['int', 'flags', 'INTER_LINEAR', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.remap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'map1', '', []],
        ['Mat', 'map2', '', []],
        ['int', 'interpolation', '', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.convertMaps',
    'void',
    [],
    [   ['Mat', 'map1', '', []],
        ['Mat', 'map2', '', []],
        ['Mat', 'dstmap1', '', ['/O']],
        ['Mat', 'dstmap2', '', ['/O']],
        ['int', 'dstmap1type', '', []],
        ['bool', 'nninterpolation', 'false', []]],
    'void']
ok: FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>

--- Incoming ---
[   'cv.getRotationMatrix2D',
    'Mat',
    [],
    [   ['Point2f', 'center', '', []],
        ['double', 'angle', '', []],
        ['double', 'scale', '', []]],
    'Mat']
ok: FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>

--- Incoming ---
[   'cv.invertAffineTransform',
    'void',
    [],
    [['Mat', 'M', '', []], ['Mat', 'iM', '', ['/O']]],
    'void']
ok: FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>

--- Incoming ---
[   'cv.getPerspectiveTransform',
    'Mat',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['int', 'solveMethod', 'DECOMP_LU', []]],
    'Mat']
ok: FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG int solveMethod=DECOMP_LU]>

--- Incoming ---
[   'cv.getAffineTransform',
    'Mat',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', []]],
    'Mat']
ok: FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>

--- Incoming ---
[   'cv.getRectSubPix',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patchSize', '', []],
        ['Point2f', 'center', '', []],
        ['Mat', 'patch', '', ['/O']],
        ['int', 'patchType', '-1', []]],
    'void']
ok: FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>

--- Incoming ---
[   'cv.logPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point2f', 'center', '', []],
        ['double', 'M', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>

--- Incoming ---
[   'cv.linearPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point2f', 'center', '', []],
        ['double', 'maxRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.warpPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dsize', '', []],
        ['Point2f', 'center', '', []],
        ['double', 'maxRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.integral',
    'void',
    ['=integral3'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['Mat', 'sqsum', '', ['/O']],
        ['Mat', 'tilted', '', ['/O']],
        ['int', 'sdepth', '-1', []],
        ['int', 'sqdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   'cv.integral',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['int', 'sdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>

--- Incoming ---
[   'cv.integral',
    'void',
    ['=integral2'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['Mat', 'sqsum', '', ['/O']],
        ['int', 'sdepth', '-1', []],
        ['int', 'sqdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   'cv.accumulate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateSquare',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateProduct',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateWeighted',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['double', 'alpha', '', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.phaseCorrelate',
    'Point2d',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'window', 'Mat()', []],
        ['double*', 'response', '0', ['/O']]],
    'Point2d']
ok: FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>

--- Incoming ---
[   'cv.createHanningWindow',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/O']],
        ['Size', 'winSize', '', []],
        ['int', 'type', '', []]],
    'void']
ok: FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>

--- Incoming ---
[   'cv.divSpectrums',
    'void',
    [],
    [   ['Mat', 'a', '', []],
        ['Mat', 'b', '', []],
        ['Mat', 'c', '', ['/O']],
        ['int', 'flags', '', []],
        ['bool', 'conjB', 'false', []]],
    'void']
ok: FUNC <void cv..divSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>

--- Incoming ---
[   'cv.threshold',
    'double',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'thresh', '', []],
        ['double', 'maxval', '', []],
        ['int', 'type', '', []]],
    'double']
ok: FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG int type=]>

--- Incoming ---
[   'cv.adaptiveThreshold',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'maxValue', '', []],
        ['int', 'adaptiveMethod', '', []],
        ['int', 'thresholdType', '', []],
        ['int', 'blockSize', '', []],
        ['double', 'C', '', []]],
    'void']
ok: FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG int adaptiveMethod=, ARG int thresholdType=, ARG int blockSize=, ARG double C=]>

--- Incoming ---
[   'cv.pyrDown',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dstsize', 'Size()', ['/C', '/Ref']],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.pyrUp',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dstsize', 'Size()', ['/C', '/Ref']],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.calcHist',
    'void',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['vector_int', 'channels', '', ['/C', '/Ref']],
        ['Mat', 'mask', '', []],
        ['Mat', 'hist', '', ['/O']],
        ['vector_int', 'histSize', '', ['/C', '/Ref']],
        ['vector_float', 'ranges', '', ['/C', '/Ref']],
        ['bool', 'accumulate', 'false', []]],
    'void']
ok: FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>

--- Incoming ---
[   'cv.calcBackProject',
    'void',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['vector_int', 'channels', '', ['/C', '/Ref']],
        ['Mat', 'hist', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['vector_float', 'ranges', '', ['/C', '/Ref']],
        ['double', 'scale', '', []]],
    'void']
ok: FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>

--- Incoming ---
[   'cv.compareHist',
    'double',
    [],
    [['Mat', 'H1', '', []], ['Mat', 'H2', '', []], ['int', 'method', '', []]],
    'double']
ok: FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG int method=]>

--- Incoming ---
[   'cv.equalizeHist',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.createCLAHE',
    'Ptr_CLAHE',
    [],
    [   ['double', 'clipLimit', '40.0', []],
        ['Size', 'tileGridSize', 'Size(8, 8)', []]],
    'Ptr<CLAHE>']
ok: FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>

--- Incoming ---
[   'cv.wrapperEMD',
    'float',
    ['=EMD'],
    [   ['Mat', 'signature1', '', []],
        ['Mat', 'signature2', '', []],
        ['int', 'distType', '', []],
        ['Mat', 'cost', 'Mat()', []],
        ['Ptr_float', 'lowerBound', 'Ptr<float>()', ['/IO']],
        ['Mat', 'flow', 'Mat()', ['/O']]],
    'float']
ok: FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG int distType=, ARG Mat cost=Mat(), ARG Ptr_float lowerBound=Ptr<float>(), ARG Mat flow=Mat()]>

--- Incoming ---
[   'cv.watershed',
    'void',
    [],
    [['Mat', 'image', '', []], ['Mat', 'markers', '', ['/IO']]],
    'void']
ok: FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>

--- Incoming ---
[   'cv.pyrMeanShiftFiltering',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'sp', '', []],
        ['double', 'sr', '', []],
        ['int', 'maxLevel', '1', []],
        [   'TermCriteria',
            'termcrit',
            'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)',
            []]],
    'void']
ok: FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>

--- Incoming ---
[   'cv.grabCut',
    'void',
    [],
    [   ['Mat', 'img', '', []],
        ['Mat', 'mask', '', ['/IO']],
        ['Rect', 'rect', '', []],
        ['Mat', 'bgdModel', '', ['/IO']],
        ['Mat', 'fgdModel', '', ['/IO']],
        ['int', 'iterCount', '', []],
        ['int', 'mode', 'GC_EVAL', []]],
    'void']
ok: FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>

--- Incoming ---
[   'cv.distanceTransform',
    'void',
    ['=distanceTransformWithLabels'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'distanceType', '', []],
        ['int', 'maskSize', '', []],
        ['int', 'labelType', 'DIST_LABEL_CCOMP', []]],
    'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG int distanceType=, ARG int maskSize=, ARG int labelType=DIST_LABEL_CCOMP]>

--- Incoming ---
[   'cv.distanceTransform',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'distanceType', '', []],
        ['int', 'maskSize', '', []],
        ['int', 'dstType', 'CV_32F', []]],
    'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG int distanceType=, ARG int maskSize=, ARG int dstType=CV_32F]>

--- Incoming ---
[   'cv.floodFill',
    'int',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Mat', 'mask', '', ['/IO']],
        ['Point', 'seedPoint', '', []],
        ['Scalar', 'newVal', '', []],
        ['Rect*', 'rect', '0', ['/O']],
        ['Scalar', 'loDiff', 'Scalar()', []],
        ['Scalar', 'upDiff', 'Scalar()', []],
        ['int', 'flags', '4', []]],
    'int']
ok: FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>

--- Incoming ---
[   'cv.blendLinear',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'weights1', '', []],
        ['Mat', 'weights2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..blendLinear [ARG Mat src1=, ARG Mat src2=, ARG Mat weights1=, ARG Mat weights2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.cvtColor',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'code', '', []],
        ['int', 'dstCn', '0', []]],
    'void']
ok: FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>

--- Incoming ---
[   'cv.cvtColorTwoPlane',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'code', '', []]],
    'void']
ok: FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>

--- Incoming ---
[   'cv.demosaicing',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'code', '', []],
        ['int', 'dstCn', '0', []]],
    'void']
ok: FUNC <void cv..demosaicing [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>

--- Incoming ---
[   'cv.moments',
    'Moments',
    [],
    [['Mat', 'array', '', []], ['bool', 'binaryImage', 'false', []]],
    'Moments']
ok: FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>

--- Incoming ---
[   'cv.HuMoments',
    'void',
    [],
    [['Moments', 'm', '', ['/C', '/Ref']], ['Mat', 'hu', '', ['/O']]],
    'void']
ok: FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>

--- Incoming ---
[   'enum cv.TemplateMatchModes',
    '',
    [],
    [   ['const cv.TM_SQDIFF', '0', [], [], None, ''],
        ['const cv.TM_SQDIFF_NORMED', '1', [], [], None, ''],
        ['const cv.TM_CCORR', '2', [], [], None, ''],
        ['const cv.TM_CCORR_NORMED', '3', [], [], None, ''],
        ['const cv.TM_CCOEFF', '4', [], [], None, ''],
        ['const cv.TM_CCOEFF_NORMED', '5', [], [], None, '']],
    None]
ok: CONST TM_SQDIFF=0
ok: CONST TM_SQDIFF_NORMED=1
ok: CONST TM_CCORR=2
ok: CONST TM_CCORR_NORMED=3
ok: CONST TM_CCOEFF=4
ok: CONST TM_CCOEFF_NORMED=5

--- Incoming ---
[   'cv.matchTemplate',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'templ', '', []],
        ['Mat', 'result', '', ['/O']],
        ['int', 'method', '', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG int method=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.connectedComponents',
    'int',
    ['=connectedComponentsWithAlgorithm'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'connectivity', '', []],
        ['int', 'ltype', '', []],
        ['int', 'ccltype', '', []]],
    'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>

--- Incoming ---
[   'cv.connectedComponents',
    'int',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'connectivity', '8', []],
        ['int', 'ltype', 'CV_32S', []]],
    'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   'cv.connectedComponentsWithStats',
    'int',
    ['=connectedComponentsWithStatsWithAlgorithm'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['Mat', 'stats', '', ['/O']],
        ['Mat', 'centroids', '', ['/O']],
        ['int', 'connectivity', '', []],
        ['int', 'ltype', '', []],
        ['int', 'ccltype', '', []]],
    'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>

--- Incoming ---
[   'cv.connectedComponentsWithStats',
    'int',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['Mat', 'stats', '', ['/O']],
        ['Mat', 'centroids', '', ['/O']],
        ['int', 'connectivity', '8', []],
        ['int', 'ltype', 'CV_32S', []]],
    'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   'cv.findContours',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_Mat', 'contours', '', ['/O']],
        ['Mat', 'hierarchy', '', ['/O']],
        ['int', 'mode', '', []],
        ['int', 'method', '', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG int mode=, ARG int method=, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.findContoursLinkRuns',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_Mat', 'contours', '', ['/O']],
        ['Mat', 'hierarchy', '', ['/O']]],
    'void']
ok: FUNC <void cv..findContoursLinkRuns [ARG Mat image=, ARG vector_Mat contours=, ARG Mat hierarchy=]>

--- Incoming ---
[   'cv.findContoursLinkRuns',
    'void',
    [],
    [['Mat', 'image', '', []], ['vector_Mat', 'contours', '', ['/O']]],
    'void']
ok: FUNC <void cv..findContoursLinkRuns [ARG Mat image=, ARG vector_Mat contours=]>

--- Incoming ---
[   'cv.approxPolyDP',
    'void',
    [],
    [   ['Mat', 'curve', '', []],
        ['Mat', 'approxCurve', '', ['/O']],
        ['double', 'epsilon', '', []],
        ['bool', 'closed', '', []]],
    'void']
ok: FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>

--- Incoming ---
[   'cv.arcLength',
    'double',
    [],
    [['Mat', 'curve', '', []], ['bool', 'closed', '', []]],
    'double']
ok: FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>

--- Incoming ---
['cv.boundingRect', 'Rect', [], [['Mat', 'array', '', []]], 'Rect']
ok: FUNC <Rect cv..boundingRect [ARG Mat array=]>

--- Incoming ---
[   'cv.contourArea',
    'double',
    [],
    [['Mat', 'contour', '', []], ['bool', 'oriented', 'false', []]],
    'double']
ok: FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>

--- Incoming ---
[   'cv.minAreaRect',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>

--- Incoming ---
[   'cv.boxPoints',
    'void',
    [],
    [['RotatedRect', 'box', '', []], ['Mat', 'points', '', ['/O']]],
    'void']
ok: FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>

--- Incoming ---
[   'cv.minEnclosingCircle',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Point2f', 'center', '', ['/O', '/Ref']],
        ['float', 'radius', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>

--- Incoming ---
[   'cv.minEnclosingTriangle',
    'double',
    [],
    [['Mat', 'points', '', []], ['Mat', 'triangle', '', ['/O', '/O']]],
    'double']
ok: FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>

--- Incoming ---
[   'cv.matchShapes',
    'double',
    [],
    [   ['Mat', 'contour1', '', []],
        ['Mat', 'contour2', '', []],
        ['int', 'method', '', []],
        ['double', 'parameter', '', []]],
    'double']
ok: FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG int method=, ARG double parameter=]>

--- Incoming ---
[   'cv.convexHull',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Mat', 'hull', '', ['/O']],
        ['bool', 'clockwise', 'false', []],
        ['bool', 'returnPoints', 'true', []]],
    'void']
ok: FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>

--- Incoming ---
[   'cv.convexityDefects',
    'void',
    [],
    [   ['Mat', 'contour', '', []],
        ['Mat', 'convexhull', '', []],
        ['Mat', 'convexityDefects', '', ['/O']]],
    'void']
ok: FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>

--- Incoming ---
['cv.isContourConvex', 'bool', [], [['Mat', 'contour', '', []]], 'bool']
ok: FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>

--- Incoming ---
[   'cv.intersectConvexConvex',
    'float',
    [],
    [   ['Mat', 'p1', '', []],
        ['Mat', 'p2', '', []],
        ['Mat', 'p12', '', ['/O']],
        ['bool', 'handleNested', 'true', []]],
    'float']
ok: FUNC <float cv..intersectConvexConvex [ARG Mat p1=, ARG Mat p2=, ARG Mat p12=, ARG bool handleNested=true]>

--- Incoming ---
['cv.fitEllipse', 'RotatedRect', [], [['Mat', 'points', '', []]], 'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>

--- Incoming ---
[   'cv.fitEllipseAMS',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>

--- Incoming ---
[   'cv.fitEllipseDirect',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>

--- Incoming ---
[   'cv.fitLine',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Mat', 'line', '', ['/O']],
        ['int', 'distType', '', []],
        ['double', 'param', '', []],
        ['double', 'reps', '', []],
        ['double', 'aeps', '', []]],
    'void']
ok: FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG int distType=, ARG double param=, ARG double reps=, ARG double aeps=]>

--- Incoming ---
[   'cv.pointPolygonTest',
    'double',
    [],
    [   ['Mat', 'contour', '', []],
        ['Point2f', 'pt', '', []],
        ['bool', 'measureDist', '', []]],
    'double']
ok: FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>

--- Incoming ---
[   'cv.rotatedRectangleIntersection',
    'int',
    [],
    [   ['RotatedRect', 'rect1', '', ['/C', '/Ref']],
        ['RotatedRect', 'rect2', '', ['/C', '/Ref']],
        ['Mat', 'intersectingRegion', '', ['/O']]],
    'int']
ok: FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>

--- Incoming ---
[   'cv.createGeneralizedHoughBallard',
    'Ptr_GeneralizedHoughBallard',
    [],
    [],
    'Ptr<GeneralizedHoughBallard>']
ok: FUNC <Ptr_GeneralizedHoughBallard cv..createGeneralizedHoughBallard []>

--- Incoming ---
[   'cv.createGeneralizedHoughGuil',
    'Ptr_GeneralizedHoughGuil',
    [],
    [],
    'Ptr<GeneralizedHoughGuil>']
ok: FUNC <Ptr_GeneralizedHoughGuil cv..createGeneralizedHoughGuil []>

--- Incoming ---
[   'enum cv.ColormapTypes',
    '',
    [],
    [   ['const cv.COLORMAP_AUTUMN', '0', [], [], None, ''],
        ['const cv.COLORMAP_BONE', '1', [], [], None, ''],
        ['const cv.COLORMAP_JET', '2', [], [], None, ''],
        ['const cv.COLORMAP_WINTER', '3', [], [], None, ''],
        ['const cv.COLORMAP_RAINBOW', '4', [], [], None, ''],
        ['const cv.COLORMAP_OCEAN', '5', [], [], None, ''],
        ['const cv.COLORMAP_SUMMER', '6', [], [], None, ''],
        ['const cv.COLORMAP_SPRING', '7', [], [], None, ''],
        ['const cv.COLORMAP_COOL', '8', [], [], None, ''],
        ['const cv.COLORMAP_HSV', '9', [], [], None, ''],
        ['const cv.COLORMAP_PINK', '10', [], [], None, ''],
        ['const cv.COLORMAP_HOT', '11', [], [], None, ''],
        ['const cv.COLORMAP_PARULA', '12', [], [], None, ''],
        ['const cv.COLORMAP_MAGMA', '13', [], [], None, ''],
        ['const cv.COLORMAP_INFERNO', '14', [], [], None, ''],
        ['const cv.COLORMAP_PLASMA', '15', [], [], None, ''],
        ['const cv.COLORMAP_VIRIDIS', '16', [], [], None, ''],
        ['const cv.COLORMAP_CIVIDIS', '17', [], [], None, ''],
        ['const cv.COLORMAP_TWILIGHT', '18', [], [], None, ''],
        ['const cv.COLORMAP_TWILIGHT_SHIFTED', '19', [], [], None, ''],
        ['const cv.COLORMAP_TURBO', '20', [], [], None, ''],
        ['const cv.COLORMAP_DEEPGREEN', '21', [], [], None, '']],
    None]
ok: CONST COLORMAP_AUTUMN=0
ok: CONST COLORMAP_BONE=1
ok: CONST COLORMAP_JET=2
ok: CONST COLORMAP_WINTER=3
ok: CONST COLORMAP_RAINBOW=4
ok: CONST COLORMAP_OCEAN=5
ok: CONST COLORMAP_SUMMER=6
ok: CONST COLORMAP_SPRING=7
ok: CONST COLORMAP_COOL=8
ok: CONST COLORMAP_HSV=9
ok: CONST COLORMAP_PINK=10
ok: CONST COLORMAP_HOT=11
ok: CONST COLORMAP_PARULA=12
ok: CONST COLORMAP_MAGMA=13
ok: CONST COLORMAP_INFERNO=14
ok: CONST COLORMAP_PLASMA=15
ok: CONST COLORMAP_VIRIDIS=16
ok: CONST COLORMAP_CIVIDIS=17
ok: CONST COLORMAP_TWILIGHT=18
ok: CONST COLORMAP_TWILIGHT_SHIFTED=19
ok: CONST COLORMAP_TURBO=20
ok: CONST COLORMAP_DEEPGREEN=21

--- Incoming ---
[   'cv.applyColorMap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'colormap', '', []]],
    'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG int colormap=]>

--- Incoming ---
[   'cv.applyColorMap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'userColor', '', []]],
    'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>

--- Incoming ---
[   'cv.line',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.arrowedLine',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'line_type', '8', []],
        ['int', 'shift', '0', []],
        ['double', 'tipLength', '0.1', []]],
    'void']
ok: FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int line_type=8, ARG int shift=0, ARG double tipLength=0.1]>

--- Incoming ---
[   'cv.rectangle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.rectangle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Rect', 'rec', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.circle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'center', '', []],
        ['int', 'radius', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.ellipse',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'center', '', []],
        ['Size', 'axes', '', []],
        ['double', 'angle', '', []],
        ['double', 'startAngle', '', []],
        ['double', 'endAngle', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.ellipse',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['RotatedRect', 'box', '', ['/C', '/Ref']],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []]],
    'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8]>

--- Incoming ---
[   'cv.drawMarker',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'position', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'markerType', 'MARKER_CROSS', []],
        ['int', 'markerSize', '20', []],
        ['int', 'thickness', '1', []],
        ['int', 'line_type', '8', []]],
    'void']
ok: FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG int markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG int line_type=8]>

--- Incoming ---
[   'cv.fillConvexPoly',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Mat', 'points', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.fillPoly',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['vector_Mat', 'pts', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.polylines',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['vector_Mat', 'pts', '', []],
        ['bool', 'isClosed', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.drawContours',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['vector_Mat', 'contours', '', []],
        ['int', 'contourIdx', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['Mat', 'hierarchy', 'Mat()', []],
        ['int', 'maxLevel', 'INT_MAX', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.clipLine',
    'bool',
    [],
    [   ['Rect', 'imgRect', '', []],
        ['Point', 'pt1', '', ['/IO', '/Ref']],
        ['Point', 'pt2', '', ['/IO', '/Ref']]],
    'bool']
ok: FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>

--- Incoming ---
[   'cv.ellipse2Poly',
    'void',
    [],
    [   ['Point', 'center', '', []],
        ['Size', 'axes', '', []],
        ['int', 'angle', '', []],
        ['int', 'arcStart', '', []],
        ['int', 'arcEnd', '', []],
        ['int', 'delta', '', []],
        ['vector_Point', 'pts', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>

--- Incoming ---
[   'cv.putText',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['String', 'text', '', ['/C', '/Ref']],
        ['Point', 'org', '', []],
        ['int', 'fontFace', '', []],
        ['double', 'fontScale', '', []],
        ['Scalar', 'color', '', []],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['bool', 'bottomLeftOrigin', 'false', []]],
    'void']
ok: FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG int fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG bool bottomLeftOrigin=false]>

--- Incoming ---
[   'cv.getTextSize',
    'Size',
    [],
    [   ['String', 'text', '', ['/C', '/Ref']],
        ['int', 'fontFace', '', []],
        ['double', 'fontScale', '', []],
        ['int', 'thickness', '', []],
        ['int*', 'baseLine', '', ['/O']]],
    'Size']
manual: FUNC <Size cv..getTextSize [ARG String text=, ARG int fontFace=, ARG double fontScale=, ARG int thickness=, ARG int * baseLine=]>

--- Incoming ---
[   'cv.getFontScaleFromHeight',
    'double',
    [],
    [   ['int', 'fontFace', '', ['/C']],
        ['int', 'pixelHeight', '', ['/C']],
        ['int', 'thickness', '1', ['/C']]],
    'double']
ok: FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/bindings.hpp =====
Namespaces: ['', 'cv']

--- Incoming ---
[   'cv.HoughLinesWithAccumulator',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['double', 'rho', '', []],
        ['double', 'theta', '', []],
        ['int', 'threshold', '', []],
        ['double', 'srn', '0', []],
        ['double', 'stn', '0', []],
        ['double', 'min_theta', '0', []],
        ['double', 'max_theta', 'CV_PI', []]],
    'void']
ok: FUNC <void cv..HoughLinesWithAccumulator [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/segmentation.hpp =====
Namespaces: ['', 'cv', 'cv.segmentation']

--- Incoming ---
['class cv.segmentation.IntelligentScissorsMB', '', ['/Simple'], [], None]
ok: class CLASS cv.segmentation::.IntelligentScissorsMB : , name: IntelligentScissorsMB, base: 

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.IntelligentScissorsMB',
    '',
    [],
    [],
    None]
ok: FUNC < cv.segmentation.IntelligentScissorsMB.IntelligentScissorsMB []>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.setWeights',
    'IntelligentScissorsMB',
    [],
    [   ['float', 'weight_non_edge', '', []],
        ['float', 'weight_gradient_direction', '', []],
        ['float', 'weight_gradient_magnitude', '', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setWeights [ARG float weight_non_edge=, ARG float weight_gradient_direction=, ARG float weight_gradient_magnitude=]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.setGradientMagnitudeMaxLimit',
    'IntelligentScissorsMB',
    [],
    [['float', 'gradient_magnitude_threshold_max', '0.0f', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setGradientMagnitudeMaxLimit [ARG float gradient_magnitude_threshold_max=0.0f]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.setEdgeFeatureZeroCrossingParameters',
    'IntelligentScissorsMB',
    [],
    [['float', 'gradient_magnitude_min_value', '0.0f', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setEdgeFeatureZeroCrossingParameters [ARG float gradient_magnitude_min_value=0.0f]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.setEdgeFeatureCannyParameters',
    'IntelligentScissorsMB',
    [],
    [   ['double', 'threshold1', '', []],
        ['double', 'threshold2', '', []],
        ['int', 'apertureSize', '3', []],
        ['bool', 'L2gradient', 'false', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setEdgeFeatureCannyParameters [ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.applyImage',
    'IntelligentScissorsMB',
    [],
    [['Mat', 'image', '', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.applyImage [ARG Mat image=]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.applyImageFeatures',
    'IntelligentScissorsMB',
    [],
    [   ['Mat', 'non_edge', '', []],
        ['Mat', 'gradient_direction', '', []],
        ['Mat', 'gradient_magnitude', '', []],
        ['Mat', 'image', 'Mat()', []]],
    'IntelligentScissorsMB']
ok: FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.applyImageFeatures [ARG Mat non_edge=, ARG Mat gradient_direction=, ARG Mat gradient_magnitude=, ARG Mat image=Mat()]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.buildMap',
    'void',
    [],
    [['Point', 'sourcePt', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.segmentation.IntelligentScissorsMB.buildMap [ARG Point sourcePt=]>

--- Incoming ---
[   'cv.segmentation.IntelligentScissorsMB.getContour',
    'void',
    ['/C'],
    [   ['Point', 'targetPt', '', ['/C', '/Ref']],
        ['Mat', 'contour', '', ['/O']],
        ['bool', 'backward', 'false', []]],
    'void']
ok: FUNC <void cv.segmentation.IntelligentScissorsMB.getContour [ARG Point targetPt=, ARG Mat contour=, ARG bool backward=false]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp =====
Namespaces: ['', 'cv', 'cv.segmentation']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/imgproc.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp =====
Namespaces: ['', 'cv', 'cv.hal', 'cv.segmentation']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/hal/hal.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/legacy.hpp =====
Namespaces: ['', 'cv', 'cv.hal', 'cv.segmentation']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/legacy.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp =====
Namespaces: ['', 'cv', 'cv.detail', 'cv.hal', 'cv.segmentation']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp


===== Generating... =====
CLASS cv::.CLAHE : Algorithm
FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>
java: void apply(Mat src, Mat dst)
FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>
java: void setClipLimit(double clipLimit)
FUNC <double cv.CLAHE.getClipLimit []>
java: double getClipLimit()
FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>
java: void setTilesGridSize(Size tileGridSize)
FUNC <Size cv.CLAHE.getTilesGridSize []>
java: Size getTilesGridSize()
FUNC <void cv.CLAHE.collectGarbage []>
java: void collectGarbage()
CLASS cv::.GeneralizedHough : Algorithm
FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat templ=, ARG Point templCenter=Point(-1, -1)]>
java: void setTemplate(Mat templ, Point templCenter)
java: void setTemplate(Mat templ)
FUNC <void cv.GeneralizedHough.setTemplate [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Point templCenter=Point(-1, -1)]>
java: void setTemplate(Mat edges, Mat dx, Mat dy, Point templCenter)
java: void setTemplate(Mat edges, Mat dx, Mat dy)
FUNC <void cv.GeneralizedHough.detect [ARG Mat image=, ARG Mat positions=, ARG Mat votes=Mat()]>
java: void detect(Mat image, Mat positions, Mat votes)
java: void detect(Mat image, Mat positions)
FUNC <void cv.GeneralizedHough.detect [ARG Mat edges=, ARG Mat dx=, ARG Mat dy=, ARG Mat positions=, ARG Mat votes=Mat()]>
java: void detect(Mat edges, Mat dx, Mat dy, Mat positions, Mat votes)
java: void detect(Mat edges, Mat dx, Mat dy, Mat positions)
FUNC <void cv.GeneralizedHough.setCannyLowThresh [ARG int cannyLowThresh=]>
java: void setCannyLowThresh(int cannyLowThresh)
FUNC <int cv.GeneralizedHough.getCannyLowThresh []>
java: int getCannyLowThresh()
FUNC <void cv.GeneralizedHough.setCannyHighThresh [ARG int cannyHighThresh=]>
java: void setCannyHighThresh(int cannyHighThresh)
FUNC <int cv.GeneralizedHough.getCannyHighThresh []>
java: int getCannyHighThresh()
FUNC <void cv.GeneralizedHough.setMinDist [ARG double minDist=]>
java: void setMinDist(double minDist)
FUNC <double cv.GeneralizedHough.getMinDist []>
java: double getMinDist()
FUNC <void cv.GeneralizedHough.setDp [ARG double dp=]>
java: void setDp(double dp)
FUNC <double cv.GeneralizedHough.getDp []>
java: double getDp()
FUNC <void cv.GeneralizedHough.setMaxBufferSize [ARG int maxBufferSize=]>
java: void setMaxBufferSize(int maxBufferSize)
FUNC <int cv.GeneralizedHough.getMaxBufferSize []>
java: int getMaxBufferSize()
CLASS cv::.GeneralizedHoughBallard : GeneralizedHough
FUNC <void cv.GeneralizedHoughBallard.setLevels [ARG int levels=]>
java: void setLevels(int levels)
FUNC <int cv.GeneralizedHoughBallard.getLevels []>
java: int getLevels()
FUNC <void cv.GeneralizedHoughBallard.setVotesThreshold [ARG int votesThreshold=]>
java: void setVotesThreshold(int votesThreshold)
FUNC <int cv.GeneralizedHoughBallard.getVotesThreshold []>
java: int getVotesThreshold()
CLASS cv::.GeneralizedHoughGuil : GeneralizedHough
FUNC <void cv.GeneralizedHoughGuil.setXi [ARG double xi=]>
java: void setXi(double xi)
FUNC <double cv.GeneralizedHoughGuil.getXi []>
java: double getXi()
FUNC <void cv.GeneralizedHoughGuil.setLevels [ARG int levels=]>
java: void setLevels(int levels)
FUNC <int cv.GeneralizedHoughGuil.getLevels []>
java: int getLevels()
FUNC <void cv.GeneralizedHoughGuil.setAngleEpsilon [ARG double angleEpsilon=]>
java: void setAngleEpsilon(double angleEpsilon)
FUNC <double cv.GeneralizedHoughGuil.getAngleEpsilon []>
java: double getAngleEpsilon()
FUNC <void cv.GeneralizedHoughGuil.setMinAngle [ARG double minAngle=]>
java: void setMinAngle(double minAngle)
FUNC <double cv.GeneralizedHoughGuil.getMinAngle []>
java: double getMinAngle()
FUNC <void cv.GeneralizedHoughGuil.setMaxAngle [ARG double maxAngle=]>
java: void setMaxAngle(double maxAngle)
FUNC <double cv.GeneralizedHoughGuil.getMaxAngle []>
java: double getMaxAngle()
FUNC <void cv.GeneralizedHoughGuil.setAngleStep [ARG double angleStep=]>
java: void setAngleStep(double angleStep)
FUNC <double cv.GeneralizedHoughGuil.getAngleStep []>
java: double getAngleStep()
FUNC <void cv.GeneralizedHoughGuil.setAngleThresh [ARG int angleThresh=]>
java: void setAngleThresh(int angleThresh)
FUNC <int cv.GeneralizedHoughGuil.getAngleThresh []>
java: int getAngleThresh()
FUNC <void cv.GeneralizedHoughGuil.setMinScale [ARG double minScale=]>
java: void setMinScale(double minScale)
FUNC <double cv.GeneralizedHoughGuil.getMinScale []>
java: double getMinScale()
FUNC <void cv.GeneralizedHoughGuil.setMaxScale [ARG double maxScale=]>
java: void setMaxScale(double maxScale)
FUNC <double cv.GeneralizedHoughGuil.getMaxScale []>
java: double getMaxScale()
FUNC <void cv.GeneralizedHoughGuil.setScaleStep [ARG double scaleStep=]>
java: void setScaleStep(double scaleStep)
FUNC <double cv.GeneralizedHoughGuil.getScaleStep []>
java: double getScaleStep()
FUNC <void cv.GeneralizedHoughGuil.setScaleThresh [ARG int scaleThresh=]>
java: void setScaleThresh(int scaleThresh)
FUNC <int cv.GeneralizedHoughGuil.getScaleThresh []>
java: int getScaleThresh()
FUNC <void cv.GeneralizedHoughGuil.setPosThresh [ARG int posThresh=]>
java: void setPosThresh(int posThresh)
FUNC <int cv.GeneralizedHoughGuil.getPosThresh []>
java: int getPosThresh()
CLASS cv::.Imgproc : 
[CONST IPL_BORDER_CONSTANT=0(manual), CONST IPL_BORDER_REPLICATE=1(manual), CONST IPL_BORDER_REFLECT=2(manual), CONST IPL_BORDER_WRAP=3(manual), CONST IPL_BORDER_REFLECT_101=4(manual), CONST IPL_BORDER_TRANSPARENT=5(manual), CONST CV_INTER_NN=0, CONST CV_INTER_LINEAR=1, CONST CV_INTER_CUBIC=2, CONST CV_INTER_AREA=3, CONST CV_INTER_LANCZOS4=4, CONST CV_MOP_ERODE=0, CONST CV_MOP_DILATE=1, CONST CV_MOP_OPEN=2, CONST CV_MOP_CLOSE=3, CONST CV_MOP_GRADIENT=4, CONST CV_MOP_TOPHAT=5, CONST CV_MOP_BLACKHAT=6, CONST CV_RETR_EXTERNAL=0, CONST CV_RETR_LIST=1, CONST CV_RETR_CCOMP=2, CONST CV_RETR_TREE=3, CONST CV_RETR_FLOODFILL=4, CONST CV_CHAIN_APPROX_NONE=1, CONST CV_CHAIN_APPROX_SIMPLE=2, CONST CV_CHAIN_APPROX_TC89_L1=3, CONST CV_CHAIN_APPROX_TC89_KCOS=4, CONST CV_THRESH_BINARY=0, CONST CV_THRESH_BINARY_INV=1, CONST CV_THRESH_TRUNC=2, CONST CV_THRESH_TOZERO=3, CONST CV_THRESH_TOZERO_INV=4, CONST CV_THRESH_MASK=7, CONST CV_THRESH_OTSU=8, CONST CV_THRESH_TRIANGLE=16]
[CONST CV_GAUSSIAN_5x5=7, CONST CV_SCHARR=-1, CONST CV_MAX_SOBEL_KSIZE=7, CONST CV_RGBA2mRGBA=125, CONST CV_mRGBA2RGBA=126, CONST CV_WARP_FILL_OUTLIERS=8, CONST CV_WARP_INVERSE_MAP=16, CONST CV_WARP_RELATIVE_MAP=32, CONST CV_CHAIN_CODE=0, CONST CV_LINK_RUNS=5, CONST CV_POLY_APPROX_DP=0, CONST CV_CONTOURS_MATCH_I1=1, CONST CV_CONTOURS_MATCH_I2=2, CONST CV_CONTOURS_MATCH_I3=3, CONST CV_CLOCKWISE=1, CONST CV_COUNTER_CLOCKWISE=2, CONST CV_COMP_CORREL=0, CONST CV_COMP_CHISQR=1, CONST CV_COMP_INTERSECT=2, CONST CV_COMP_BHATTACHARYYA=3, CONST CV_COMP_HELLINGER=CV_COMP_BHATTACHARYYA, CONST CV_COMP_CHISQR_ALT=4, CONST CV_COMP_KL_DIV=5, CONST CV_DIST_MASK_3=3, CONST CV_DIST_MASK_5=5, CONST CV_DIST_MASK_PRECISE=0, CONST CV_DIST_LABEL_CCOMP=0, CONST CV_DIST_LABEL_PIXEL=1, CONST CV_DIST_USER=-1, CONST CV_DIST_L1=1, CONST CV_DIST_L2=2, CONST CV_DIST_C=3, CONST CV_DIST_L12=4, CONST CV_DIST_FAIR=5, CONST CV_DIST_WELSCH=6, CONST CV_DIST_HUBER=7, CONST CV_CANNY_L2_GRADIENT=(1 << 31), CONST CV_HOUGH_STANDARD=0, CONST CV_HOUGH_PROBABILISTIC=1, CONST CV_HOUGH_MULTI_SCALE=2, CONST CV_HOUGH_GRADIENT=3]
[CONST CV_SHAPE_RECT=0, CONST CV_SHAPE_CROSS=1, CONST CV_SHAPE_ELLIPSE=2, CONST CV_SHAPE_CUSTOM=100]
[CONST CV_BLUR_NO_SCALE=0, CONST CV_BLUR=1, CONST CV_GAUSSIAN=2, CONST CV_MEDIAN=3, CONST CV_BILATERAL=4]
[CONST ADAPTIVE_THRESH_MEAN_C=0, CONST ADAPTIVE_THRESH_GAUSSIAN_C=1]
[CONST COLOR_BGR2BGRA=0, CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA, CONST COLOR_BGRA2BGR=1, CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR, CONST COLOR_BGR2RGBA=2, CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA, CONST COLOR_RGBA2BGR=3, CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR, CONST COLOR_BGR2RGB=4, CONST COLOR_RGB2BGR=COLOR_BGR2RGB, CONST COLOR_BGRA2RGBA=5, CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA, CONST COLOR_BGR2GRAY=6, CONST COLOR_RGB2GRAY=7, CONST COLOR_GRAY2BGR=8, CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR, CONST COLOR_GRAY2BGRA=9, CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA, CONST COLOR_BGRA2GRAY=10, CONST COLOR_RGBA2GRAY=11, CONST COLOR_BGR2BGR565=12, CONST COLOR_RGB2BGR565=13, CONST COLOR_BGR5652BGR=14, CONST COLOR_BGR5652RGB=15, CONST COLOR_BGRA2BGR565=16, CONST COLOR_RGBA2BGR565=17, CONST COLOR_BGR5652BGRA=18, CONST COLOR_BGR5652RGBA=19, CONST COLOR_GRAY2BGR565=20, CONST COLOR_BGR5652GRAY=21, CONST COLOR_BGR2BGR555=22, CONST COLOR_RGB2BGR555=23, CONST COLOR_BGR5552BGR=24, CONST COLOR_BGR5552RGB=25, CONST COLOR_BGRA2BGR555=26, CONST COLOR_RGBA2BGR555=27, CONST COLOR_BGR5552BGRA=28, CONST COLOR_BGR5552RGBA=29, CONST COLOR_GRAY2BGR555=30, CONST COLOR_BGR5552GRAY=31, CONST COLOR_BGR2XYZ=32, CONST COLOR_RGB2XYZ=33, CONST COLOR_XYZ2BGR=34, CONST COLOR_XYZ2RGB=35, CONST COLOR_BGR2YCrCb=36, CONST COLOR_RGB2YCrCb=37, CONST COLOR_YCrCb2BGR=38, CONST COLOR_YCrCb2RGB=39, CONST COLOR_BGR2HSV=40, CONST COLOR_RGB2HSV=41, CONST COLOR_BGR2Lab=44, CONST COLOR_RGB2Lab=45, CONST COLOR_BGR2Luv=50, CONST COLOR_RGB2Luv=51, CONST COLOR_BGR2HLS=52, CONST COLOR_RGB2HLS=53, CONST COLOR_HSV2BGR=54, CONST COLOR_HSV2RGB=55, CONST COLOR_Lab2BGR=56, CONST COLOR_Lab2RGB=57, CONST COLOR_Luv2BGR=58, CONST COLOR_Luv2RGB=59, CONST COLOR_HLS2BGR=60, CONST COLOR_HLS2RGB=61, CONST COLOR_BGR2HSV_FULL=66, CONST COLOR_RGB2HSV_FULL=67, CONST COLOR_BGR2HLS_FULL=68, CONST COLOR_RGB2HLS_FULL=69, CONST COLOR_HSV2BGR_FULL=70, CONST COLOR_HSV2RGB_FULL=71, CONST COLOR_HLS2BGR_FULL=72, CONST COLOR_HLS2RGB_FULL=73, CONST COLOR_LBGR2Lab=74, CONST COLOR_LRGB2Lab=75, CONST COLOR_LBGR2Luv=76, CONST COLOR_LRGB2Luv=77, CONST COLOR_Lab2LBGR=78, CONST COLOR_Lab2LRGB=79, CONST COLOR_Luv2LBGR=80, CONST COLOR_Luv2LRGB=81, CONST COLOR_BGR2YUV=82, CONST COLOR_RGB2YUV=83, CONST COLOR_YUV2BGR=84, CONST COLOR_YUV2RGB=85, CONST COLOR_YUV2RGB_NV12=90, CONST COLOR_YUV2BGR_NV12=91, CONST COLOR_YUV2RGB_NV21=92, CONST COLOR_YUV2BGR_NV21=93, CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21, CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21, CONST COLOR_YUV2RGBA_NV12=94, CONST COLOR_YUV2BGRA_NV12=95, CONST COLOR_YUV2RGBA_NV21=96, CONST COLOR_YUV2BGRA_NV21=97, CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21, CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21, CONST COLOR_YUV2RGB_YV12=98, CONST COLOR_YUV2BGR_YV12=99, CONST COLOR_YUV2RGB_IYUV=100, CONST COLOR_YUV2BGR_IYUV=101, CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV, CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV, CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12, CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12, CONST COLOR_YUV2RGBA_YV12=102, CONST COLOR_YUV2BGRA_YV12=103, CONST COLOR_YUV2RGBA_IYUV=104, CONST COLOR_YUV2BGRA_IYUV=105, CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV, CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV, CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12, CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12, CONST COLOR_YUV2GRAY_420=106, CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420, CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV2RGB_UYVY=107, CONST COLOR_YUV2BGR_UYVY=108, CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGBA_UYVY=111, CONST COLOR_YUV2BGRA_UYVY=112, CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGB_YUY2=115, CONST COLOR_YUV2BGR_YUY2=116, CONST COLOR_YUV2RGB_YVYU=117, CONST COLOR_YUV2BGR_YVYU=118, CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGBA_YUY2=119, CONST COLOR_YUV2BGRA_YUY2=120, CONST COLOR_YUV2RGBA_YVYU=121, CONST COLOR_YUV2BGRA_YVYU=122, CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2GRAY_UYVY=123, CONST COLOR_YUV2GRAY_YUY2=124, CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2, CONST COLOR_RGBA2mRGBA=125, CONST COLOR_mRGBA2RGBA=126, CONST COLOR_RGB2YUV_I420=127, CONST COLOR_BGR2YUV_I420=128, CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420, CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420, CONST COLOR_RGBA2YUV_I420=129, CONST COLOR_BGRA2YUV_I420=130, CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420, CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420, CONST COLOR_RGB2YUV_YV12=131, CONST COLOR_BGR2YUV_YV12=132, CONST COLOR_RGBA2YUV_YV12=133, CONST COLOR_BGRA2YUV_YV12=134, CONST COLOR_BayerBG2BGR=46, CONST COLOR_BayerGB2BGR=47, CONST COLOR_BayerRG2BGR=48, CONST COLOR_BayerGR2BGR=49, CONST COLOR_BayerRGGB2BGR=COLOR_BayerBG2BGR, CONST COLOR_BayerGRBG2BGR=COLOR_BayerGB2BGR, CONST COLOR_BayerBGGR2BGR=COLOR_BayerRG2BGR, CONST COLOR_BayerGBRG2BGR=COLOR_BayerGR2BGR, CONST COLOR_BayerRGGB2RGB=COLOR_BayerBGGR2BGR, CONST COLOR_BayerGRBG2RGB=COLOR_BayerGBRG2BGR, CONST COLOR_BayerBGGR2RGB=COLOR_BayerRGGB2BGR, CONST COLOR_BayerGBRG2RGB=COLOR_BayerGRBG2BGR, CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR, CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR, CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR, CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR, CONST COLOR_BayerBG2GRAY=86, CONST COLOR_BayerGB2GRAY=87, CONST COLOR_BayerRG2GRAY=88, CONST COLOR_BayerGR2GRAY=89, CONST COLOR_BayerRGGB2GRAY=COLOR_BayerBG2GRAY, CONST COLOR_BayerGRBG2GRAY=COLOR_BayerGB2GRAY, CONST COLOR_BayerBGGR2GRAY=COLOR_BayerRG2GRAY, CONST COLOR_BayerGBRG2GRAY=COLOR_BayerGR2GRAY, CONST COLOR_BayerBG2BGR_VNG=62, CONST COLOR_BayerGB2BGR_VNG=63, CONST COLOR_BayerRG2BGR_VNG=64, CONST COLOR_BayerGR2BGR_VNG=65, CONST COLOR_BayerRGGB2BGR_VNG=COLOR_BayerBG2BGR_VNG, CONST COLOR_BayerGRBG2BGR_VNG=COLOR_BayerGB2BGR_VNG, CONST COLOR_BayerBGGR2BGR_VNG=COLOR_BayerRG2BGR_VNG, CONST COLOR_BayerGBRG2BGR_VNG=COLOR_BayerGR2BGR_VNG, CONST COLOR_BayerRGGB2RGB_VNG=COLOR_BayerBGGR2BGR_VNG, CONST COLOR_BayerGRBG2RGB_VNG=COLOR_BayerGBRG2BGR_VNG, CONST COLOR_BayerBGGR2RGB_VNG=COLOR_BayerRGGB2BGR_VNG, CONST COLOR_BayerGBRG2RGB_VNG=COLOR_BayerGRBG2BGR_VNG, CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG, CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG, CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG, CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG, CONST COLOR_BayerBG2BGR_EA=135, CONST COLOR_BayerGB2BGR_EA=136, CONST COLOR_BayerRG2BGR_EA=137, CONST COLOR_BayerGR2BGR_EA=138, CONST COLOR_BayerRGGB2BGR_EA=COLOR_BayerBG2BGR_EA, CONST COLOR_BayerGRBG2BGR_EA=COLOR_BayerGB2BGR_EA, CONST COLOR_BayerBGGR2BGR_EA=COLOR_BayerRG2BGR_EA, CONST COLOR_BayerGBRG2BGR_EA=COLOR_BayerGR2BGR_EA, CONST COLOR_BayerRGGB2RGB_EA=COLOR_BayerBGGR2BGR_EA, CONST COLOR_BayerGRBG2RGB_EA=COLOR_BayerGBRG2BGR_EA, CONST COLOR_BayerBGGR2RGB_EA=COLOR_BayerRGGB2BGR_EA, CONST COLOR_BayerGBRG2RGB_EA=COLOR_BayerGRBG2BGR_EA, CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA, CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA, CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA, CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA, CONST COLOR_BayerBG2BGRA=139, CONST COLOR_BayerGB2BGRA=140, CONST COLOR_BayerRG2BGRA=141, CONST COLOR_BayerGR2BGRA=142, CONST COLOR_BayerRGGB2BGRA=COLOR_BayerBG2BGRA, CONST COLOR_BayerGRBG2BGRA=COLOR_BayerGB2BGRA, CONST COLOR_BayerBGGR2BGRA=COLOR_BayerRG2BGRA, CONST COLOR_BayerGBRG2BGRA=COLOR_BayerGR2BGRA, CONST COLOR_BayerRGGB2RGBA=COLOR_BayerBGGR2BGRA, CONST COLOR_BayerGRBG2RGBA=COLOR_BayerGBRG2BGRA, CONST COLOR_BayerBGGR2RGBA=COLOR_BayerRGGB2BGRA, CONST COLOR_BayerGBRG2RGBA=COLOR_BayerGRBG2BGRA, CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA, CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA, CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA, CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA, CONST COLOR_RGB2YUV_UYVY=143, CONST COLOR_BGR2YUV_UYVY=144, CONST COLOR_RGB2YUV_Y422=COLOR_RGB2YUV_UYVY, CONST COLOR_BGR2YUV_Y422=COLOR_BGR2YUV_UYVY, CONST COLOR_RGB2YUV_UYNV=COLOR_RGB2YUV_UYVY, CONST COLOR_BGR2YUV_UYNV=COLOR_BGR2YUV_UYVY, CONST COLOR_RGBA2YUV_UYVY=145, CONST COLOR_BGRA2YUV_UYVY=146, CONST COLOR_RGBA2YUV_Y422=COLOR_RGBA2YUV_UYVY, CONST COLOR_BGRA2YUV_Y422=COLOR_BGRA2YUV_UYVY, CONST COLOR_RGBA2YUV_UYNV=COLOR_RGBA2YUV_UYVY, CONST COLOR_BGRA2YUV_UYNV=COLOR_BGRA2YUV_UYVY, CONST COLOR_RGB2YUV_YUY2=147, CONST COLOR_BGR2YUV_YUY2=148, CONST COLOR_RGB2YUV_YVYU=149, CONST COLOR_BGR2YUV_YVYU=150, CONST COLOR_RGB2YUV_YUYV=COLOR_RGB2YUV_YUY2, CONST COLOR_BGR2YUV_YUYV=COLOR_BGR2YUV_YUY2, CONST COLOR_RGB2YUV_YUNV=COLOR_RGB2YUV_YUY2, CONST COLOR_BGR2YUV_YUNV=COLOR_BGR2YUV_YUY2, CONST COLOR_RGBA2YUV_YUY2=151, CONST COLOR_BGRA2YUV_YUY2=152, CONST COLOR_RGBA2YUV_YVYU=153, CONST COLOR_BGRA2YUV_YVYU=154, CONST COLOR_RGBA2YUV_YUYV=COLOR_RGBA2YUV_YUY2, CONST COLOR_BGRA2YUV_YUYV=COLOR_BGRA2YUV_YUY2, CONST COLOR_RGBA2YUV_YUNV=COLOR_RGBA2YUV_YUY2, CONST COLOR_BGRA2YUV_YUNV=COLOR_BGRA2YUV_YUY2, CONST COLOR_COLORCVT_MAX=155]
[CONST COLORMAP_AUTUMN=0, CONST COLORMAP_BONE=1, CONST COLORMAP_JET=2, CONST COLORMAP_WINTER=3, CONST COLORMAP_RAINBOW=4, CONST COLORMAP_OCEAN=5, CONST COLORMAP_SUMMER=6, CONST COLORMAP_SPRING=7, CONST COLORMAP_COOL=8, CONST COLORMAP_HSV=9, CONST COLORMAP_PINK=10, CONST COLORMAP_HOT=11, CONST COLORMAP_PARULA=12, CONST COLORMAP_MAGMA=13, CONST COLORMAP_INFERNO=14, CONST COLORMAP_PLASMA=15, CONST COLORMAP_VIRIDIS=16, CONST COLORMAP_CIVIDIS=17, CONST COLORMAP_TWILIGHT=18, CONST COLORMAP_TWILIGHT_SHIFTED=19, CONST COLORMAP_TURBO=20, CONST COLORMAP_DEEPGREEN=21]
[CONST CCL_DEFAULT=-1, CONST CCL_WU=0, CONST CCL_GRANA=1, CONST CCL_BOLELLI=2, CONST CCL_SAUF=3, CONST CCL_BBDT=4, CONST CCL_SPAGHETTI=5]
[CONST CC_STAT_LEFT=0, CONST CC_STAT_TOP=1, CONST CC_STAT_WIDTH=2, CONST CC_STAT_HEIGHT=3, CONST CC_STAT_AREA=4, CONST CC_STAT_MAX=5]
[CONST CHAIN_APPROX_NONE=1, CONST CHAIN_APPROX_SIMPLE=2, CONST CHAIN_APPROX_TC89_L1=3, CONST CHAIN_APPROX_TC89_KCOS=4]
[CONST DIST_LABEL_CCOMP=0, CONST DIST_LABEL_PIXEL=1]
[CONST DIST_MASK_3=3, CONST DIST_MASK_5=5, CONST DIST_MASK_PRECISE=0]
[CONST DIST_USER=-1, CONST DIST_L1=1, CONST DIST_L2=2, CONST DIST_C=3, CONST DIST_L12=4, CONST DIST_FAIR=5, CONST DIST_WELSCH=6, CONST DIST_HUBER=7]
[CONST FLOODFILL_FIXED_RANGE=1 << 16, CONST FLOODFILL_MASK_ONLY=1 << 17]
[CONST GC_BGD=0, CONST GC_FGD=1, CONST GC_PR_BGD=2, CONST GC_PR_FGD=3]
[CONST GC_INIT_WITH_RECT=0, CONST GC_INIT_WITH_MASK=1, CONST GC_EVAL=2, CONST GC_EVAL_FREEZE_MODEL=3]
[CONST FONT_HERSHEY_SIMPLEX=0, CONST FONT_HERSHEY_PLAIN=1, CONST FONT_HERSHEY_DUPLEX=2, CONST FONT_HERSHEY_COMPLEX=3, CONST FONT_HERSHEY_TRIPLEX=4, CONST FONT_HERSHEY_COMPLEX_SMALL=5, CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6, CONST FONT_HERSHEY_SCRIPT_COMPLEX=7, CONST FONT_ITALIC=16]
[CONST HISTCMP_CORREL=0, CONST HISTCMP_CHISQR=1, CONST HISTCMP_INTERSECT=2, CONST HISTCMP_BHATTACHARYYA=3, CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA, CONST HISTCMP_CHISQR_ALT=4, CONST HISTCMP_KL_DIV=5]
[CONST HOUGH_STANDARD=0, CONST HOUGH_PROBABILISTIC=1, CONST HOUGH_MULTI_SCALE=2, CONST HOUGH_GRADIENT=3, CONST HOUGH_GRADIENT_ALT=4]
[CONST INTER_NEAREST=0, CONST INTER_LINEAR=1, CONST INTER_CUBIC=2, CONST INTER_AREA=3, CONST INTER_LANCZOS4=4, CONST INTER_LINEAR_EXACT=5, CONST INTER_NEAREST_EXACT=6, CONST INTER_MAX=7, CONST WARP_FILL_OUTLIERS=8, CONST WARP_INVERSE_MAP=16, CONST WARP_RELATIVE_MAP=32]
[CONST INTER_BITS=5, CONST INTER_BITS2=INTER_BITS * 2, CONST INTER_TAB_SIZE=1 << INTER_BITS, CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE]
[CONST LSD_REFINE_NONE=0, CONST LSD_REFINE_STD=1, CONST LSD_REFINE_ADV=2]
[CONST FILLED=-1, CONST LINE_4=4, CONST LINE_8=8, CONST LINE_AA=16]
[CONST MARKER_CROSS=0, CONST MARKER_TILTED_CROSS=1, CONST MARKER_STAR=2, CONST MARKER_DIAMOND=3, CONST MARKER_SQUARE=4, CONST MARKER_TRIANGLE_UP=5, CONST MARKER_TRIANGLE_DOWN=6]
[CONST MORPH_RECT=0, CONST MORPH_CROSS=1, CONST MORPH_ELLIPSE=2]
[CONST MORPH_ERODE=0, CONST MORPH_DILATE=1, CONST MORPH_OPEN=2, CONST MORPH_CLOSE=3, CONST MORPH_GRADIENT=4, CONST MORPH_TOPHAT=5, CONST MORPH_BLACKHAT=6, CONST MORPH_HITMISS=7]
[CONST INTERSECT_NONE=0, CONST INTERSECT_PARTIAL=1, CONST INTERSECT_FULL=2]
[CONST RETR_EXTERNAL=0, CONST RETR_LIST=1, CONST RETR_CCOMP=2, CONST RETR_TREE=3, CONST RETR_FLOODFILL=4]
[CONST CONTOURS_MATCH_I1=1, CONST CONTOURS_MATCH_I2=2, CONST CONTOURS_MATCH_I3=3]
[CONST FILTER_SCHARR=-1]
[CONST TM_SQDIFF=0, CONST TM_SQDIFF_NORMED=1, CONST TM_CCORR=2, CONST TM_CCORR_NORMED=3, CONST TM_CCOEFF=4, CONST TM_CCOEFF_NORMED=5]
[CONST THRESH_BINARY=0, CONST THRESH_BINARY_INV=1, CONST THRESH_TRUNC=2, CONST THRESH_TOZERO=3, CONST THRESH_TOZERO_INV=4, CONST THRESH_MASK=7, CONST THRESH_OTSU=8, CONST THRESH_TRIANGLE=16]
[CONST WARP_POLAR_LINEAR=0, CONST WARP_POLAR_LOG=256]
FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG int refine=LSD_REFINE_STD, ARG double scale=0.8, ARG double sigma_scale=0.6, ARG double quant=2.0, ARG double ang_th=22.5, ARG double log_eps=0, ARG double density_th=0.7, ARG int n_bins=1024]>
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant, double ang_th, double log_eps, double density_th, int n_bins)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant, double ang_th, double log_eps, double density_th)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant, double ang_th, double log_eps)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant, double ang_th)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale, double quant)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale, double sigma_scale)
java: LineSegmentDetector createLineSegmentDetector(int refine, double scale)
java: LineSegmentDetector createLineSegmentDetector(int refine)
java: LineSegmentDetector createLineSegmentDetector()
FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>
java: Mat getGaussianKernel(int ksize, double sigma, int ktype)
java: Mat getGaussianKernel(int ksize, double sigma)
FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize, boolean normalize, int ktype)
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize, boolean normalize)
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize)
FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi, int ktype)
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi)
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma)
FUNC <Mat cv..getStructuringElement [ARG int shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>
java: Mat getStructuringElement(int shape, Size ksize, Point anchor)
java: Mat getStructuringElement(int shape, Size ksize)
FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>
java: void medianBlur(Mat src, Mat dst, int ksize)
FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG int borderType=BORDER_DEFAULT]>
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX, double sigmaY, int borderType)
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX, double sigmaY)
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)
FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG int borderType=BORDER_DEFAULT]>
java: void bilateralFilter(Mat src, Mat dst, int d, double sigmaColor, double sigmaSpace, int borderType)
java: void bilateralFilter(Mat src, Mat dst, int d, double sigmaColor, double sigmaSpace)
FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize, int borderType)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize)
FUNC <void cv..sqrBoxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>
java: void sqrBoxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize, int borderType)
java: void sqrBoxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize)
java: void sqrBoxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor)
java: void sqrBoxFilter(Mat src, Mat dst, int ddepth, Size ksize)
FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG int borderType=BORDER_DEFAULT]>
java: void blur(Mat src, Mat dst, Size ksize, Point anchor, int borderType)
java: void blur(Mat src, Mat dst, Size ksize, Point anchor)
java: void blur(Mat src, Mat dst, Size ksize)
FUNC <void cv..stackBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=]>
java: void stackBlur(Mat src, Mat dst, Size ksize)
FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta, int borderType)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel)
FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor, double delta, int borderType)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor, double delta)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY)
FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale, double delta)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy)
FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>
java: void spatialGradient(Mat src, Mat dx, Mat dy, int ksize, int borderType)
java: void spatialGradient(Mat src, Mat dx, Mat dy, int ksize)
java: void spatialGradient(Mat src, Mat dx, Mat dy)
FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale, double delta, int borderType)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale, double delta)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy)
FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale, double delta, int borderType)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale, double delta)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize)
java: void Laplacian(Mat src, Mat dst, int ddepth)
FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2, int apertureSize, boolean L2gradient)
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2, int apertureSize)
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2)
FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>
java: void Canny(Mat dx, Mat dy, Mat edges, double threshold1, double threshold2, boolean L2gradient)
java: void Canny(Mat dx, Mat dy, Mat edges, double threshold1, double threshold2)
FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize, int ksize, int borderType)
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize, int ksize)
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize)
FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG int borderType=BORDER_DEFAULT]>
java: void cornerHarris(Mat src, Mat dst, int blockSize, int ksize, double k, int borderType)
java: void cornerHarris(Mat src, Mat dst, int blockSize, int ksize, double k)
FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>
java: void cornerEigenValsAndVecs(Mat src, Mat dst, int blockSize, int ksize, int borderType)
java: void cornerEigenValsAndVecs(Mat src, Mat dst, int blockSize, int ksize)
FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>
java: void preCornerDetect(Mat src, Mat dst, int ksize, int borderType)
java: void preCornerDetect(Mat src, Mat dst, int ksize)
FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>
java: void cornerSubPix(Mat image, Mat corners, Size winSize, Size zeroZone, TermCriteria criteria)
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, boolean useHarrisDetector, double k)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, boolean useHarrisDetector)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance)
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize, boolean useHarrisDetector, double k)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize, boolean useHarrisDetector)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize)
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG Mat corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG Mat cornersQuality=, ARG int blockSize=3, ARG int gradientSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: void goodFeaturesToTrackWithQuality(Mat image, Mat corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, Mat cornersQuality, int blockSize, int gradientSize, boolean useHarrisDetector, double k)
java: void goodFeaturesToTrackWithQuality(Mat image, Mat corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, Mat cornersQuality, int blockSize, int gradientSize, boolean useHarrisDetector)
java: void goodFeaturesToTrackWithQuality(Mat image, Mat corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, Mat cornersQuality, int blockSize, int gradientSize)
java: void goodFeaturesToTrackWithQuality(Mat image, Mat corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, Mat cornersQuality, int blockSize)
java: void goodFeaturesToTrackWithQuality(Mat image, Mat corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, Mat cornersQuality)
FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta, double max_theta)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold)
FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold, double minLineLength, double maxLineGap)
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold, double minLineLength)
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold)
FUNC <void cv..HoughLinesPointSet [ARG Mat point=, ARG Mat lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>
java: void HoughLinesPointSet(Mat point, Mat lines, int lines_max, int threshold, double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)
FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG int method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2, int minRadius)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist)
FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor)
java: void erode(Mat src, Mat dst, Mat kernel)
FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor)
java: void dilate(Mat src, Mat dst, Mat kernel)
FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG int op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations, int borderType)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel)
FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>
java: void resize(Mat src, Mat dst, Size dsize, double fx, double fy, int interpolation)
java: void resize(Mat src, Mat dst, Size dsize, double fx, double fy)
java: void resize(Mat src, Mat dst, Size dsize, double fx)
java: void resize(Mat src, Mat dst, Size dsize)
FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode, Scalar borderValue)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize)
FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode, Scalar borderValue)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize)
FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation, int borderMode, Scalar borderValue)
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation, int borderMode)
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation)
FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>
java: void convertMaps(Mat map1, Mat map2, Mat dstmap1, Mat dstmap2, int dstmap1type, boolean nninterpolation)
java: void convertMaps(Mat map1, Mat map2, Mat dstmap1, Mat dstmap2, int dstmap1type)
FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>
java: Mat getRotationMatrix2D(Point center, double angle, double scale)
FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>
java: void invertAffineTransform(Mat M, Mat iM)
FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG int solveMethod=DECOMP_LU]>
java: Mat getPerspectiveTransform(Mat src, Mat dst, int solveMethod)
java: Mat getPerspectiveTransform(Mat src, Mat dst)
FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>
java: Mat getAffineTransform(MatOfPoint2f src, MatOfPoint2f dst)
FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>
java: void getRectSubPix(Mat image, Size patchSize, Point center, Mat patch, int patchType)
java: void getRectSubPix(Mat image, Size patchSize, Point center, Mat patch)
FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>
java: void logPolar(Mat src, Mat dst, Point center, double M, int flags)
FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
java: void linearPolar(Mat src, Mat dst, Point center, double maxRadius, int flags)
FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
java: void warpPolar(Mat src, Mat dst, Size dsize, Point center, double maxRadius, int flags)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted, int sdepth, int sqdepth)
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted, int sdepth)
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>
java: void integral(Mat src, Mat sum, int sdepth)
java: void integral(Mat src, Mat sum)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>
java: void integral2(Mat src, Mat sum, Mat sqsum, int sdepth, int sqdepth)
java: void integral2(Mat src, Mat sum, Mat sqsum, int sdepth)
java: void integral2(Mat src, Mat sum, Mat sqsum)
FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulate(Mat src, Mat dst, Mat mask)
java: void accumulate(Mat src, Mat dst)
FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulateSquare(Mat src, Mat dst, Mat mask)
java: void accumulateSquare(Mat src, Mat dst)
FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulateProduct(Mat src1, Mat src2, Mat dst, Mat mask)
java: void accumulateProduct(Mat src1, Mat src2, Mat dst)
FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>
java: void accumulateWeighted(Mat src, Mat dst, double alpha, Mat mask)
java: void accumulateWeighted(Mat src, Mat dst, double alpha)
FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>
java: Point phaseCorrelate(Mat src1, Mat src2, Mat window, double[] response)
java: Point phaseCorrelate(Mat src1, Mat src2, Mat window)
java: Point phaseCorrelate(Mat src1, Mat src2)
FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>
java: void createHanningWindow(Mat dst, Size winSize, int type)
FUNC <void cv..divSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>
java: void divSpectrums(Mat a, Mat b, Mat c, int flags, boolean conjB)
java: void divSpectrums(Mat a, Mat b, Mat c, int flags)
FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG int type=]>
java: double threshold(Mat src, Mat dst, double thresh, double maxval, int type)
FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG int adaptiveMethod=, ARG int thresholdType=, ARG int blockSize=, ARG double C=]>
java: void adaptiveThreshold(Mat src, Mat dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)
FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>
java: void pyrDown(Mat src, Mat dst, Size dstsize, int borderType)
java: void pyrDown(Mat src, Mat dst, Size dstsize)
java: void pyrDown(Mat src, Mat dst)
FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>
java: void pyrUp(Mat src, Mat dst, Size dstsize, int borderType)
java: void pyrUp(Mat src, Mat dst, Size dstsize)
java: void pyrUp(Mat src, Mat dst)
FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>
java: void calcHist(List<Mat> images, MatOfInt channels, Mat mask, Mat hist, MatOfInt histSize, MatOfFloat ranges, boolean accumulate)
java: void calcHist(List<Mat> images, MatOfInt channels, Mat mask, Mat hist, MatOfInt histSize, MatOfFloat ranges)
FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>
java: void calcBackProject(List<Mat> images, MatOfInt channels, Mat hist, Mat dst, MatOfFloat ranges, double scale)
FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG int method=]>
java: double compareHist(Mat H1, Mat H2, int method)
FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>
java: void equalizeHist(Mat src, Mat dst)
FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>
java: CLAHE createCLAHE(double clipLimit, Size tileGridSize)
java: CLAHE createCLAHE(double clipLimit)
java: CLAHE createCLAHE()
FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG int distType=, ARG Mat cost=Mat(), ARG Ptr_float lowerBound=Ptr<float>(), ARG Mat flow=Mat()]>
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost, Mat flow)
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost)
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost)
java: float EMD(Mat signature1, Mat signature2, int distType)
FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>
java: void watershed(Mat image, Mat markers)
FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr, int maxLevel, TermCriteria termcrit)
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr, int maxLevel)
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr)
FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>
java: void grabCut(Mat img, Mat mask, Rect rect, Mat bgdModel, Mat fgdModel, int iterCount, int mode)
java: void grabCut(Mat img, Mat mask, Rect rect, Mat bgdModel, Mat fgdModel, int iterCount)
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG int distanceType=, ARG int maskSize=, ARG int labelType=DIST_LABEL_CCOMP]>
java: void distanceTransformWithLabels(Mat src, Mat dst, Mat labels, int distanceType, int maskSize, int labelType)
java: void distanceTransformWithLabels(Mat src, Mat dst, Mat labels, int distanceType, int maskSize)
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG int distanceType=, ARG int maskSize=, ARG int dstType=CV_32F]>
java: void distanceTransform(Mat src, Mat dst, int distanceType, int maskSize, int dstType)
java: void distanceTransform(Mat src, Mat dst, int distanceType, int maskSize)
FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal)
FUNC <void cv..blendLinear [ARG Mat src1=, ARG Mat src2=, ARG Mat weights1=, ARG Mat weights2=, ARG Mat dst=]>
java: void blendLinear(Mat src1, Mat src2, Mat weights1, Mat weights2, Mat dst)
FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>
java: void cvtColor(Mat src, Mat dst, int code, int dstCn)
java: void cvtColor(Mat src, Mat dst, int code)
FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>
java: void cvtColorTwoPlane(Mat src1, Mat src2, Mat dst, int code)
FUNC <void cv..demosaicing [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>
java: void demosaicing(Mat src, Mat dst, int code, int dstCn)
java: void demosaicing(Mat src, Mat dst, int code)
FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>
java: Moments moments(Mat array, boolean binaryImage)
java: Moments moments(Mat array)
FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>
java: void HuMoments(Moments m, Mat hu)
FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG int method=, ARG Mat mask=Mat()]>
java: void matchTemplate(Mat image, Mat templ, Mat result, int method, Mat mask)
java: void matchTemplate(Mat image, Mat templ, Mat result, int method)
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>
java: int connectedComponentsWithAlgorithm(Mat image, Mat labels, int connectivity, int ltype, int ccltype)
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>
java: int connectedComponents(Mat image, Mat labels, int connectivity, int ltype)
java: int connectedComponents(Mat image, Mat labels, int connectivity)
java: int connectedComponents(Mat image, Mat labels)
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>
java: int connectedComponentsWithStatsWithAlgorithm(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity, int ltype, int ccltype)
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity, int ltype)
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity)
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids)
FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG int mode=, ARG int method=, ARG Point offset=Point()]>
java: void findContours(Mat image, List<MatOfPoint> contours, Mat hierarchy, int mode, int method, Point offset)
java: void findContours(Mat image, List<MatOfPoint> contours, Mat hierarchy, int mode, int method)
FUNC <void cv..findContoursLinkRuns [ARG Mat image=, ARG vector_Mat contours=, ARG Mat hierarchy=]>
java: void findContoursLinkRuns(Mat image, List<Mat> contours, Mat hierarchy)
FUNC <void cv..findContoursLinkRuns [ARG Mat image=, ARG vector_Mat contours=]>
java: void findContoursLinkRuns(Mat image, List<Mat> contours)
FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>
java: void approxPolyDP(MatOfPoint2f curve, MatOfPoint2f approxCurve, double epsilon, boolean closed)
FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>
java: double arcLength(MatOfPoint2f curve, boolean closed)
FUNC <Rect cv..boundingRect [ARG Mat array=]>
java: Rect boundingRect(Mat array)
FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>
java: double contourArea(Mat contour, boolean oriented)
java: double contourArea(Mat contour)
FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>
java: RotatedRect minAreaRect(MatOfPoint2f points)
FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>
java: void boxPoints(RotatedRect box, Mat points)
FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>
java: void minEnclosingCircle(MatOfPoint2f points, Point center, float[] radius)
FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>
java: double minEnclosingTriangle(Mat points, Mat triangle)
FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG int method=, ARG double parameter=]>
java: double matchShapes(Mat contour1, Mat contour2, int method, double parameter)
FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>
java: void convexHull(MatOfPoint points, MatOfInt hull, boolean clockwise)
java: void convexHull(MatOfPoint points, MatOfInt hull, boolean clockwise)
java: void convexHull(MatOfPoint points, MatOfInt hull)
FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>
java: void convexityDefects(MatOfPoint contour, MatOfInt convexhull, MatOfInt4 convexityDefects)
FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>
java: boolean isContourConvex(MatOfPoint contour)
FUNC <float cv..intersectConvexConvex [ARG Mat p1=, ARG Mat p2=, ARG Mat p12=, ARG bool handleNested=true]>
java: float intersectConvexConvex(Mat p1, Mat p2, Mat p12, boolean handleNested)
java: float intersectConvexConvex(Mat p1, Mat p2, Mat p12)
FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>
java: RotatedRect fitEllipse(MatOfPoint2f points)
FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>
java: RotatedRect fitEllipseAMS(Mat points)
FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>
java: RotatedRect fitEllipseDirect(Mat points)
FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG int distType=, ARG double param=, ARG double reps=, ARG double aeps=]>
java: void fitLine(Mat points, Mat line, int distType, double param, double reps, double aeps)
FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>
java: double pointPolygonTest(MatOfPoint2f contour, Point pt, boolean measureDist)
FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>
java: int rotatedRectangleIntersection(RotatedRect rect1, RotatedRect rect2, Mat intersectingRegion)
FUNC <Ptr_GeneralizedHoughBallard cv..createGeneralizedHoughBallard []>
java: GeneralizedHoughBallard createGeneralizedHoughBallard()
FUNC <Ptr_GeneralizedHoughGuil cv..createGeneralizedHoughGuil []>
java: GeneralizedHoughGuil createGeneralizedHoughGuil()
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG int colormap=]>
java: void applyColorMap(Mat src, Mat dst, int colormap)
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>
java: void applyColorMap(Mat src, Mat dst, Mat userColor)
FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift)
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType)
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void line(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int line_type=8, ARG int shift=0, ARG double tipLength=0.1]>
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type, int shift, double tipLength)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type, int shift)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness, int lineType, int shift)
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness, int lineType)
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness)
java: void rectangle(Mat img, Rect rec, Scalar color)
FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness, int lineType, int shift)
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness, int lineType)
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness)
java: void circle(Mat img, Point center, int radius, Scalar color)
FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness, int lineType, int shift)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness, int lineType)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color)
FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8]>
java: void ellipse(Mat img, RotatedRect box, Scalar color, int thickness, int lineType)
java: void ellipse(Mat img, RotatedRect box, Scalar color, int thickness)
java: void ellipse(Mat img, RotatedRect box, Scalar color)
FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG int markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG int line_type=8]>
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize, int thickness, int line_type)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize, int thickness)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType)
java: void drawMarker(Mat img, Point position, Scalar color)
FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0]>
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color, int lineType, int shift)
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color, int lineType)
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color)
FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType, int shift, Point offset)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType, int shift)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color)
FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness, int lineType, int shift)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness, int lineType)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color)
FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy, int maxLevel, Point offset)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy, int maxLevel)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color)
FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>
java: boolean clipLine(Rect imgRect, Point pt1, Point pt2)
FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>
java: void ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, MatOfPoint pts)
FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG int fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG bool bottomLeftOrigin=false]>
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType, boolean bottomLeftOrigin)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color)
FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>
java: double getFontScaleFromHeight(int fontFace, int pixelHeight, int thickness)
java: double getFontScaleFromHeight(int fontFace, int pixelHeight)
FUNC <void cv..HoughLinesWithAccumulator [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>
java: void HoughLinesWithAccumulator(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta, double max_theta)
java: void HoughLinesWithAccumulator(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta)
java: void HoughLinesWithAccumulator(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn)
java: void HoughLinesWithAccumulator(Mat image, Mat lines, double rho, double theta, int threshold, double srn)
java: void HoughLinesWithAccumulator(Mat image, Mat lines, double rho, double theta, int threshold)
manual function: getTextSize
CLASS cv::.LineSegmentDetector : Algorithm
FUNC <void cv.LineSegmentDetector.detect [ARG Mat image=, ARG Mat lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>
java: void detect(Mat image, Mat lines, Mat width, Mat prec, Mat nfa)
java: void detect(Mat image, Mat lines, Mat width, Mat prec)
java: void detect(Mat image, Mat lines, Mat width)
java: void detect(Mat image, Mat lines)
FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat image=, ARG Mat lines=]>
java: void drawSegments(Mat image, Mat lines)
FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat image=Mat()]>
java: int compareSegments(Size size, Mat lines1, Mat lines2, Mat image)
java: int compareSegments(Size size, Mat lines1, Mat lines2)
CLASS cv::.Subdiv2D : 
[CONST PTLOC_ERROR=-2, CONST PTLOC_OUTSIDE_RECT=-1, CONST PTLOC_INSIDE=0, CONST PTLOC_VERTEX=1, CONST PTLOC_ON_EDGE=2, CONST NEXT_AROUND_ORG=0x00, CONST NEXT_AROUND_DST=0x22, CONST PREV_AROUND_ORG=0x11, CONST PREV_AROUND_DST=0x33, CONST NEXT_AROUND_LEFT=0x13, CONST NEXT_AROUND_RIGHT=0x31, CONST PREV_AROUND_LEFT=0x20, CONST PREV_AROUND_RIGHT=0x02]
FUNC < cv.Subdiv2D.Subdiv2D []>
java:  Subdiv2D()
FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>
java:  Subdiv2D(Rect rect)
FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>
java: void initDelaunay(Rect rect)
FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>
java: int insert(Point pt)
FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>
java: void insert(MatOfPoint2f ptvec)
FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>
java: int locate(Point pt, int[] edge, int[] vertex)
FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>
java: int findNearest(Point pt, Point nearestPt)
java: int findNearest(Point pt)
FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>
java: void getEdgeList(MatOfFloat4 edgeList)
FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>
java: void getLeadingEdgeList(MatOfInt leadingEdgeList)
FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>
java: void getTriangleList(MatOfFloat6 triangleList)
FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>
java: void getVoronoiFacetList(MatOfInt idx, List<MatOfPoint2f> facetList, MatOfPoint2f facetCenters)
FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>
java: Point getVertex(int vertex, int[] firstEdge)
java: Point getVertex(int vertex)
FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>
java: int getEdge(int edge, int nextEdgeType)
FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>
java: int nextEdge(int edge)
FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>
java: int rotateEdge(int edge, int rotate)
FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>
java: int symEdge(int edge)
FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>
java: int edgeOrg(int edge, Point orgpt)
java: int edgeOrg(int edge)
FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>
java: int edgeDst(int edge, Point dstpt)
java: int edgeDst(int edge)
CLASS cv.segmentation::.IntelligentScissorsMB : 
FUNC < cv.segmentation.IntelligentScissorsMB.IntelligentScissorsMB []>
java:  IntelligentScissorsMB()
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setWeights [ARG float weight_non_edge=, ARG float weight_gradient_direction=, ARG float weight_gradient_magnitude=]>
java: IntelligentScissorsMB setWeights(float weight_non_edge, float weight_gradient_direction, float weight_gradient_magnitude)
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setGradientMagnitudeMaxLimit [ARG float gradient_magnitude_threshold_max=0.0f]>
java: IntelligentScissorsMB setGradientMagnitudeMaxLimit(float gradient_magnitude_threshold_max)
java: IntelligentScissorsMB setGradientMagnitudeMaxLimit()
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setEdgeFeatureZeroCrossingParameters [ARG float gradient_magnitude_min_value=0.0f]>
java: IntelligentScissorsMB setEdgeFeatureZeroCrossingParameters(float gradient_magnitude_min_value)
java: IntelligentScissorsMB setEdgeFeatureZeroCrossingParameters()
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.setEdgeFeatureCannyParameters [ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>
java: IntelligentScissorsMB setEdgeFeatureCannyParameters(double threshold1, double threshold2, int apertureSize, boolean L2gradient)
java: IntelligentScissorsMB setEdgeFeatureCannyParameters(double threshold1, double threshold2, int apertureSize)
java: IntelligentScissorsMB setEdgeFeatureCannyParameters(double threshold1, double threshold2)
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.applyImage [ARG Mat image=]>
java: IntelligentScissorsMB applyImage(Mat image)
FUNC <IntelligentScissorsMB cv.segmentation.IntelligentScissorsMB.applyImageFeatures [ARG Mat non_edge=, ARG Mat gradient_direction=, ARG Mat gradient_magnitude=, ARG Mat image=Mat()]>
java: IntelligentScissorsMB applyImageFeatures(Mat non_edge, Mat gradient_direction, Mat gradient_magnitude, Mat image)
java: IntelligentScissorsMB applyImageFeatures(Mat non_edge, Mat gradient_direction, Mat gradient_magnitude)
FUNC <void cv.segmentation.IntelligentScissorsMB.buildMap [ARG Point sourcePt=]>
java: void buildMap(Point sourcePt)
FUNC <void cv.segmentation.IntelligentScissorsMB.getContour [ARG Point targetPt=, ARG Mat contour=, ARG bool backward=false]>
java: void getContour(Point targetPt, Mat contour, boolean backward)
java: void getContour(Point targetPt, Mat contour)

=== MODULE: ml (/home/adminlab/franka_ros2_ws/src/opencv/modules/ml) ===


Files (2):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/ml/include/opencv2/ml.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/ml/include/opencv2/ml/ml.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Ml : , name: Ml, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/ml/include/opencv2/ml.hpp =====
Namespaces: ['cv', 'cv.ml']

--- Incoming ---
[   'enum cv.ml.VariableTypes',
    '',
    [],
    [   ['const cv.ml.VAR_NUMERICAL', '0', [], [], None, ''],
        ['const cv.ml.VAR_ORDERED', '0', [], [], None, ''],
        ['const cv.ml.VAR_CATEGORICAL', '1', [], [], None, '']],
    None]
ok: CONST VAR_NUMERICAL=0
ok: CONST VAR_ORDERED=0
ok: CONST VAR_CATEGORICAL=1

--- Incoming ---
[   'enum cv.ml.ErrorTypes',
    '',
    [],
    [   ['const cv.ml.TEST_ERROR', '0', [], [], None, ''],
        ['const cv.ml.TRAIN_ERROR', '1', [], [], None, '']],
    None]
ok: CONST TEST_ERROR=0
ok: CONST TRAIN_ERROR=1

--- Incoming ---
[   'enum cv.ml.SampleTypes',
    '',
    [],
    [   ['const cv.ml.ROW_SAMPLE', '0', [], [], None, ''],
        ['const cv.ml.COL_SAMPLE', '1', [], [], None, '']],
    None]
ok: CONST ROW_SAMPLE=0
ok: CONST COL_SAMPLE=1

--- Incoming ---
[   'class cv.ml.ParamGrid',
    '',
    [],
    [   ['double', 'minVal', '', ['/RW']],
        ['double', 'maxVal', '', ['/RW']],
        ['double', 'logStep', '', ['/RW']]],
    None]
ok: class CLASS cv.ml::.ParamGrid : , name: ParamGrid, base: 

--- Incoming ---
[   'cv.ml.ParamGrid.create',
    'Ptr_ParamGrid',
    ['/S'],
    [   ['double', 'minVal', '0.', []],
        ['double', 'maxVal', '0.', []],
        ['double', 'logstep', '1.', []]],
    'Ptr<ParamGrid>']
ok: FUNC <Ptr_ParamGrid cv.ml.ParamGrid.create [ARG double minVal=0., ARG double maxVal=0., ARG double logstep=1.]>

--- Incoming ---
['class cv.ml.TrainData', '', [], [], None]
ok: class CLASS cv.ml::.TrainData : , name: TrainData, base: 

--- Incoming ---
['cv.ml.TrainData.getLayout', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getLayout []>

--- Incoming ---
['cv.ml.TrainData.getNTrainSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNTrainSamples []>

--- Incoming ---
['cv.ml.TrainData.getNTestSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNTestSamples []>

--- Incoming ---
['cv.ml.TrainData.getNSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNSamples []>

--- Incoming ---
['cv.ml.TrainData.getNVars', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNVars []>

--- Incoming ---
['cv.ml.TrainData.getNAllVars', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNAllVars []>

--- Incoming ---
[   'cv.ml.TrainData.getSample',
    'void',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'varIdx', '', []],
        ['int', 'sidx', '', []],
        ['float*', 'buf', '', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.getSample [ARG Mat varIdx=, ARG int sidx=, ARG float * buf=]>

--- Incoming ---
['cv.ml.TrainData.getSamples', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSamples []>

--- Incoming ---
['cv.ml.TrainData.getMissing', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getMissing []>

--- Incoming ---
[   'cv.ml.TrainData.getTrainSamples',
    'Mat',
    ['/C', '/V', '/PV'],
    [   ['int', 'layout', 'ROW_SAMPLE', []],
        ['bool', 'compressSamples', 'true', []],
        ['bool', 'compressVars', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSamples [ARG int layout=ROW_SAMPLE, ARG bool compressSamples=true, ARG bool compressVars=true]>

--- Incoming ---
['cv.ml.TrainData.getTrainResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainResponses []>

--- Incoming ---
[   'cv.ml.TrainData.getTrainNormCatResponses',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getTestResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestResponses []>

--- Incoming ---
[   'cv.ml.TrainData.getTestNormCatResponses',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getResponses []>

--- Incoming ---
['cv.ml.TrainData.getNormCatResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getTrainSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getTestSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getVarIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarIdx []>

--- Incoming ---
['cv.ml.TrainData.getVarType', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarType []>

--- Incoming ---
['cv.ml.TrainData.getVarSymbolFlags', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarSymbolFlags []>

--- Incoming ---
['cv.ml.TrainData.getResponseType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getResponseType []>

--- Incoming ---
['cv.ml.TrainData.getTrainSampleIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSampleIdx []>

--- Incoming ---
['cv.ml.TrainData.getTestSampleIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSampleIdx []>

--- Incoming ---
[   'cv.ml.TrainData.getValues',
    'void',
    ['/C', '/V', '/PV'],
    [   ['int', 'vi', '', []],
        ['Mat', 'sidx', '', []],
        ['float*', 'values', '', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.getValues [ARG int vi=, ARG Mat sidx=, ARG float * values=]>

--- Incoming ---
['cv.ml.TrainData.getDefaultSubstValues', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getDefaultSubstValues []>

--- Incoming ---
[   'cv.ml.TrainData.getCatCount',
    'int',
    ['/C', '/V', '/PV'],
    [['int', 'vi', '', []]],
    'int']
ok: FUNC <int cv.ml.TrainData.getCatCount [ARG int vi=]>

--- Incoming ---
['cv.ml.TrainData.getClassLabels', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getClassLabels []>

--- Incoming ---
['cv.ml.TrainData.getCatOfs', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getCatOfs []>

--- Incoming ---
['cv.ml.TrainData.getCatMap', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getCatMap []>

--- Incoming ---
[   'cv.ml.TrainData.setTrainTestSplit',
    'void',
    ['/V', '/PV'],
    [['int', 'count', '', []], ['bool', 'shuffle', 'true', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.setTrainTestSplit [ARG int count=, ARG bool shuffle=true]>

--- Incoming ---
[   'cv.ml.TrainData.setTrainTestSplitRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'ratio', '', []], ['bool', 'shuffle', 'true', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.setTrainTestSplitRatio [ARG double ratio=, ARG bool shuffle=true]>

--- Incoming ---
['cv.ml.TrainData.shuffleTrainTest', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.ml.TrainData.shuffleTrainTest []>

--- Incoming ---
['cv.ml.TrainData.getTestSamples', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSamples []>

--- Incoming ---
[   'cv.ml.TrainData.getNames',
    'void',
    ['/C', '/V', '/PV'],
    [['vector_String', 'names', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.ml.TrainData.getNames [ARG vector_String names=]>

--- Incoming ---
[   'cv.ml.TrainData.getSubVector',
    'Mat',
    ['/S'],
    [['Mat', 'vec', '', ['/C', '/Ref']], ['Mat', 'idx', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSubVector [ARG Mat vec=, ARG Mat idx=]>

--- Incoming ---
[   'cv.ml.TrainData.getSubMatrix',
    'Mat',
    ['/S'],
    [   ['Mat', 'matrix', '', ['/C', '/Ref']],
        ['Mat', 'idx', '', ['/C', '/Ref']],
        ['int', 'layout', '', []]],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSubMatrix [ARG Mat matrix=, ARG Mat idx=, ARG int layout=]>

--- Incoming ---
[   'cv.ml.TrainData.create',
    'Ptr_TrainData',
    ['/S'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []],
        ['Mat', 'varIdx', 'Mat()', []],
        ['Mat', 'sampleIdx', 'Mat()', []],
        ['Mat', 'sampleWeights', 'Mat()', []],
        ['Mat', 'varType', 'Mat()', []]],
    'Ptr<TrainData>']
ok: FUNC <Ptr_TrainData cv.ml.TrainData.create [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG Mat varIdx=Mat(), ARG Mat sampleIdx=Mat(), ARG Mat sampleWeights=Mat(), ARG Mat varType=Mat()]>

--- Incoming ---
['class cv.ml.StatModel', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.ml::.StatModel : Algorithm, name: StatModel, base: Algorithm

--- Incoming ---
[   'enum cv.ml.StatModel.Flags',
    '',
    [],
    [   ['const cv.ml.StatModel.UPDATE_MODEL', '1', [], [], None, ''],
        ['const cv.ml.StatModel.RAW_OUTPUT', '1', [], [], None, ''],
        ['const cv.ml.StatModel.COMPRESSED_INPUT', '2', [], [], None, ''],
        ['const cv.ml.StatModel.PREPROCESSED_INPUT', '4', [], [], None, '']],
    None]
ok: CONST UPDATE_MODEL=1
ok: CONST RAW_OUTPUT=1
ok: CONST COMPRESSED_INPUT=2
ok: CONST PREPROCESSED_INPUT=4

--- Incoming ---
['cv.ml.StatModel.getVarCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.StatModel.getVarCount []>

--- Incoming ---
['cv.ml.StatModel.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.empty []>

--- Incoming ---
['cv.ml.StatModel.isTrained', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.isTrained []>

--- Incoming ---
['cv.ml.StatModel.isClassifier', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.isClassifier []>

--- Incoming ---
[   'cv.ml.StatModel.train',
    'bool',
    ['/V'],
    [   ['Ptr_TrainData', 'trainData', '', ['/C', '/Ref']],
        ['int', 'flags', '0', []]],
    'bool']
ok: FUNC <bool cv.ml.StatModel.train [ARG Ptr_TrainData trainData=, ARG int flags=0]>

--- Incoming ---
[   'cv.ml.StatModel.train',
    'bool',
    ['/V'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []]],
    'bool']
ok: FUNC <bool cv.ml.StatModel.train [ARG Mat samples=, ARG int layout=, ARG Mat responses=]>

--- Incoming ---
[   'cv.ml.StatModel.calcError',
    'float',
    ['/C', '/V'],
    [   ['Ptr_TrainData', 'data', '', ['/C', '/Ref']],
        ['bool', 'test', '', []],
        ['Mat', 'resp', '', ['/O']]],
    'float']
ok: FUNC <float cv.ml.StatModel.calcError [ARG Ptr_TrainData data=, ARG bool test=, ARG Mat resp=]>

--- Incoming ---
[   'cv.ml.StatModel.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.StatModel.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
['class cv.ml.NormalBayesClassifier', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.NormalBayesClassifier : StatModel, name: NormalBayesClassifier, base: StatModel

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.predictProb',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'inputs', '', []],
        ['Mat', 'outputs', '', ['/O']],
        ['Mat', 'outputProbs', '', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.NormalBayesClassifier.predictProb [ARG Mat inputs=, ARG Mat outputs=, ARG Mat outputProbs=, ARG int flags=0]>

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.create',
    'Ptr_NormalBayesClassifier',
    ['/S'],
    [],
    'Ptr<NormalBayesClassifier>']
ok: FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.create []>

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.load',
    'Ptr_NormalBayesClassifier',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<NormalBayesClassifier>']
ok: FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.KNearest', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.KNearest : StatModel, name: KNearest, base: StatModel

--- Incoming ---
['cv.ml.KNearest.getDefaultK', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getDefaultK []>

--- Incoming ---
[   'cv.ml.KNearest.setDefaultK',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setDefaultK [ARG int val=]>

--- Incoming ---
['cv.ml.KNearest.getIsClassifier', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.KNearest.getIsClassifier []>

--- Incoming ---
[   'cv.ml.KNearest.setIsClassifier',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setIsClassifier [ARG bool val=]>

--- Incoming ---
['cv.ml.KNearest.getEmax', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getEmax []>

--- Incoming ---
[   'cv.ml.KNearest.setEmax',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setEmax [ARG int val=]>

--- Incoming ---
['cv.ml.KNearest.getAlgorithmType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getAlgorithmType []>

--- Incoming ---
[   'cv.ml.KNearest.setAlgorithmType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setAlgorithmType [ARG int val=]>

--- Incoming ---
[   'cv.ml.KNearest.findNearest',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['int', 'k', '', []],
        ['Mat', 'results', '', ['/O']],
        ['Mat', 'neighborResponses', 'Mat()', ['/O']],
        ['Mat', 'dist', 'Mat()', ['/O']]],
    'float']
ok: FUNC <float cv.ml.KNearest.findNearest [ARG Mat samples=, ARG int k=, ARG Mat results=, ARG Mat neighborResponses=Mat(), ARG Mat dist=Mat()]>

--- Incoming ---
[   'enum cv.ml.KNearest.Types',
    '',
    [],
    [   ['const cv.ml.KNearest.BRUTE_FORCE', '1', [], [], None, ''],
        ['const cv.ml.KNearest.KDTREE', '2', [], [], None, '']],
    None]
ok: CONST BRUTE_FORCE=1
ok: CONST KDTREE=2

--- Incoming ---
['cv.ml.KNearest.create', 'Ptr_KNearest', ['/S'], [], 'Ptr<KNearest>']
ok: FUNC <Ptr_KNearest cv.ml.KNearest.create []>

--- Incoming ---
[   'cv.ml.KNearest.load',
    'Ptr_KNearest',
    ['/S'],
    [['String', 'filepath', '', ['/C', '/Ref', '/PATH']]],
    'Ptr<KNearest>']
ok: FUNC <Ptr_KNearest cv.ml.KNearest.load [ARG String filepath=]>

--- Incoming ---
['class cv.ml.SVM', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.SVM : StatModel, name: SVM, base: StatModel

--- Incoming ---
['cv.ml.SVM.getType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVM.getType []>

--- Incoming ---
['cv.ml.SVM.setType', 'void', ['/V', '/PV'], [['int', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setType [ARG int val=]>

--- Incoming ---
['cv.ml.SVM.getGamma', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getGamma []>

--- Incoming ---
[   'cv.ml.SVM.setGamma',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setGamma [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getCoef0', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getCoef0 []>

--- Incoming ---
[   'cv.ml.SVM.setCoef0',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setCoef0 [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getDegree', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getDegree []>

--- Incoming ---
[   'cv.ml.SVM.setDegree',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setDegree [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getC', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getC []>

--- Incoming ---
['cv.ml.SVM.setC', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setC [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getNu', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getNu []>

--- Incoming ---
['cv.ml.SVM.setNu', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setNu [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getP', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getP []>

--- Incoming ---
['cv.ml.SVM.setP', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setP [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getClassWeights', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.SVM.getClassWeights []>

--- Incoming ---
[   'cv.ml.SVM.setClassWeights',
    'void',
    ['/V', '/PV'],
    [['Mat', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVM.setClassWeights [ARG Mat val=]>

--- Incoming ---
[   'cv.ml.SVM.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'cv::TermCriteria']
ok: FUNC <TermCriteria cv.ml.SVM.getTermCriteria []>

--- Incoming ---
[   'cv.ml.SVM.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVM.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.SVM.getKernelType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVM.getKernelType []>

--- Incoming ---
[   'cv.ml.SVM.setKernel',
    'void',
    ['/V', '/PV'],
    [['int', 'kernelType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setKernel [ARG int kernelType=]>

--- Incoming ---
[   'enum cv.ml.SVM.Types',
    '',
    [],
    [   ['const cv.ml.SVM.C_SVC', '100', [], [], None, ''],
        ['const cv.ml.SVM.NU_SVC', '101', [], [], None, ''],
        ['const cv.ml.SVM.ONE_CLASS', '102', [], [], None, ''],
        ['const cv.ml.SVM.EPS_SVR', '103', [], [], None, ''],
        ['const cv.ml.SVM.NU_SVR', '104', [], [], None, '']],
    None]
ok: CONST C_SVC=100
ok: CONST NU_SVC=101
ok: CONST ONE_CLASS=102
ok: CONST EPS_SVR=103
ok: CONST NU_SVR=104

--- Incoming ---
[   'enum cv.ml.SVM.KernelTypes',
    '',
    [],
    [   ['const cv.ml.SVM.CUSTOM', '-1', [], [], None, ''],
        ['const cv.ml.SVM.LINEAR', '0', [], [], None, ''],
        ['const cv.ml.SVM.POLY', '1', [], [], None, ''],
        ['const cv.ml.SVM.RBF', '2', [], [], None, ''],
        ['const cv.ml.SVM.SIGMOID', '3', [], [], None, ''],
        ['const cv.ml.SVM.CHI2', '4', [], [], None, ''],
        ['const cv.ml.SVM.INTER', '5', [], [], None, '']],
    None]
ok: CONST CUSTOM=-1
ok: CONST LINEAR=0
ok: CONST POLY=1
ok: CONST RBF=2
ok: CONST SIGMOID=3
ok: CONST CHI2=4
ok: CONST INTER=5

--- Incoming ---
[   'enum cv.ml.SVM.ParamTypes',
    '',
    [],
    [   ['const cv.ml.SVM.C', '0', [], [], None, ''],
        ['const cv.ml.SVM.GAMMA', '1', [], [], None, ''],
        ['const cv.ml.SVM.P', '2', [], [], None, ''],
        ['const cv.ml.SVM.NU', '3', [], [], None, ''],
        ['const cv.ml.SVM.COEF', '4', [], [], None, ''],
        ['const cv.ml.SVM.DEGREE', '5', [], [], None, '']],
    None]
ok: CONST C=0
ok: CONST GAMMA=1
ok: CONST P=2
ok: CONST NU=3
ok: CONST COEF=4
ok: CONST DEGREE=5

--- Incoming ---
[   'cv.ml.SVM.trainAuto',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []],
        ['int', 'kFold', '10', []],
        ['Ptr_ParamGrid', 'Cgrid', 'SVM::getDefaultGridPtr(SVM::C)', []],
        [   'Ptr_ParamGrid',
            'gammaGrid',
            'SVM::getDefaultGridPtr(SVM::GAMMA)',
            []],
        ['Ptr_ParamGrid', 'pGrid', 'SVM::getDefaultGridPtr(SVM::P)', []],
        ['Ptr_ParamGrid', 'nuGrid', 'SVM::getDefaultGridPtr(SVM::NU)', []],
        ['Ptr_ParamGrid', 'coeffGrid', 'SVM::getDefaultGridPtr(SVM::COEF)', []],
        [   'Ptr_ParamGrid',
            'degreeGrid',
            'SVM::getDefaultGridPtr(SVM::DEGREE)',
            []],
        ['bool', 'balanced', 'false', []]],
    'bool']
ok: FUNC <bool cv.ml.SVM.trainAuto [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG int kFold=10, ARG Ptr_ParamGrid Cgrid=SVM::getDefaultGridPtr(SVM::C), ARG Ptr_ParamGrid gammaGrid=SVM::getDefaultGridPtr(SVM::GAMMA), ARG Ptr_ParamGrid pGrid=SVM::getDefaultGridPtr(SVM::P), ARG Ptr_ParamGrid nuGrid=SVM::getDefaultGridPtr(SVM::NU), ARG Ptr_ParamGrid coeffGrid=SVM::getDefaultGridPtr(SVM::COEF), ARG Ptr_ParamGrid degreeGrid=SVM::getDefaultGridPtr(SVM::DEGREE), ARG bool balanced=false]>

--- Incoming ---
['cv.ml.SVM.getSupportVectors', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.SVM.getSupportVectors []>

--- Incoming ---
[   'cv.ml.SVM.getUncompressedSupportVectors',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.SVM.getUncompressedSupportVectors []>

--- Incoming ---
[   'cv.ml.SVM.getDecisionFunction',
    'double',
    ['/C', '/V', '/PV'],
    [   ['int', 'i', '', []],
        ['Mat', 'alpha', '', ['/O']],
        ['Mat', 'svidx', '', ['/O']]],
    'double']
ok: FUNC <double cv.ml.SVM.getDecisionFunction [ARG int i=, ARG Mat alpha=, ARG Mat svidx=]>

--- Incoming ---
[   'cv.ml.SVM.getDefaultGridPtr',
    'Ptr_ParamGrid',
    ['/S'],
    [['int', 'param_id', '', []]],
    'Ptr<ParamGrid>']
ok: FUNC <Ptr_ParamGrid cv.ml.SVM.getDefaultGridPtr [ARG int param_id=]>

--- Incoming ---
['cv.ml.SVM.create', 'Ptr_SVM', ['/S'], [], 'Ptr<SVM>']
ok: FUNC <Ptr_SVM cv.ml.SVM.create []>

--- Incoming ---
[   'cv.ml.SVM.load',
    'Ptr_SVM',
    ['/S'],
    [['String', 'filepath', '', ['/C', '/Ref', '/PATH']]],
    'Ptr<SVM>']
ok: FUNC <Ptr_SVM cv.ml.SVM.load [ARG String filepath=]>

--- Incoming ---
['class cv.ml.EM', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.EM : StatModel, name: EM, base: StatModel

--- Incoming ---
[   'enum cv.ml.EM.Types',
    '',
    [],
    [   ['const cv.ml.EM.COV_MAT_SPHERICAL', '0', [], [], None, ''],
        ['const cv.ml.EM.COV_MAT_DIAGONAL', '1', [], [], None, ''],
        ['const cv.ml.EM.COV_MAT_GENERIC', '2', [], [], None, ''],
        [   'const cv.ml.EM.COV_MAT_DEFAULT',
            'COV_MAT_DIAGONAL',
            [],
            [],
            None,
            '']],
    None]
ok: CONST COV_MAT_SPHERICAL=0
ok: CONST COV_MAT_DIAGONAL=1
ok: CONST COV_MAT_GENERIC=2
ok: CONST COV_MAT_DEFAULT=COV_MAT_DIAGONAL

--- Incoming ---
[   'enum cv.ml.EM.<unnamed>',
    '',
    [],
    [   ['const cv.ml.EM.DEFAULT_NCLUSTERS', '5', [], [], None, ''],
        ['const cv.ml.EM.DEFAULT_MAX_ITERS', '100', [], [], None, '']],
    None]
ok: CONST DEFAULT_NCLUSTERS=5
ok: CONST DEFAULT_MAX_ITERS=100

--- Incoming ---
[   'enum cv.ml.EM.<unnamed>',
    '',
    [],
    [   ['const cv.ml.EM.START_E_STEP', '1', [], [], None, ''],
        ['const cv.ml.EM.START_M_STEP', '2', [], [], None, ''],
        ['const cv.ml.EM.START_AUTO_STEP', '0', [], [], None, '']],
    None]
ok: CONST START_E_STEP=1
ok: CONST START_M_STEP=2
ok: CONST START_AUTO_STEP=0

--- Incoming ---
['cv.ml.EM.getClustersNumber', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.EM.getClustersNumber []>

--- Incoming ---
[   'cv.ml.EM.setClustersNumber',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.EM.setClustersNumber [ARG int val=]>

--- Incoming ---
['cv.ml.EM.getCovarianceMatrixType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.EM.getCovarianceMatrixType []>

--- Incoming ---
[   'cv.ml.EM.setCovarianceMatrixType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.EM.setCovarianceMatrixType [ARG int val=]>

--- Incoming ---
[   'cv.ml.EM.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.EM.getTermCriteria []>

--- Incoming ---
[   'cv.ml.EM.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.EM.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.EM.getWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.EM.getWeights []>

--- Incoming ---
['cv.ml.EM.getMeans', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.EM.getMeans []>

--- Incoming ---
[   'cv.ml.EM.getCovs',
    'void',
    ['/C', '/V', '/PV'],
    [['vector_Mat', 'covs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.EM.getCovs [ARG vector_Mat covs=]>

--- Incoming ---
[   'cv.ml.EM.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.EM.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
[   'cv.ml.EM.predict2',
    'Vec2d',
    ['/C', '/V', '/PV'],
    [['Mat', 'sample', '', []], ['Mat', 'probs', '', ['/O']]],
    'Vec2d']
ok: FUNC <Vec2d cv.ml.EM.predict2 [ARG Mat sample=, ARG Mat probs=]>

--- Incoming ---
[   'cv.ml.EM.trainEM',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainEM [ARG Mat samples=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
[   'cv.ml.EM.trainE',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'means0', '', []],
        ['Mat', 'covs0', 'Mat()', []],
        ['Mat', 'weights0', 'Mat()', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainE [ARG Mat samples=, ARG Mat means0=, ARG Mat covs0=Mat(), ARG Mat weights0=Mat(), ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
[   'cv.ml.EM.trainM',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'probs0', '', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainM [ARG Mat samples=, ARG Mat probs0=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
['cv.ml.EM.create', 'Ptr_EM', ['/S'], [], 'Ptr<EM>']
ok: FUNC <Ptr_EM cv.ml.EM.create []>

--- Incoming ---
[   'cv.ml.EM.load',
    'Ptr_EM',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<EM>']
ok: FUNC <Ptr_EM cv.ml.EM.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.DTrees', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.DTrees : StatModel, name: DTrees, base: StatModel

--- Incoming ---
[   'enum cv.ml.DTrees.Flags',
    '',
    [],
    [   ['const cv.ml.DTrees.PREDICT_AUTO', '0', [], [], None, ''],
        ['const cv.ml.DTrees.PREDICT_SUM', '(1<<8)', [], [], None, ''],
        ['const cv.ml.DTrees.PREDICT_MAX_VOTE', '(2<<8)', [], [], None, ''],
        ['const cv.ml.DTrees.PREDICT_MASK', '(3<<8)', [], [], None, '']],
    None]
ok: CONST PREDICT_AUTO=0
ok: CONST PREDICT_SUM=(1<<8)
ok: CONST PREDICT_MAX_VOTE=(2<<8)
ok: CONST PREDICT_MASK=(3<<8)

--- Incoming ---
['cv.ml.DTrees.getMaxCategories', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMaxCategories []>

--- Incoming ---
[   'cv.ml.DTrees.setMaxCategories',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMaxCategories [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getMaxDepth', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMaxDepth []>

--- Incoming ---
[   'cv.ml.DTrees.setMaxDepth',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMaxDepth [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getMinSampleCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMinSampleCount []>

--- Incoming ---
[   'cv.ml.DTrees.setMinSampleCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMinSampleCount [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getCVFolds', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getCVFolds []>

--- Incoming ---
[   'cv.ml.DTrees.setCVFolds',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setCVFolds [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getUseSurrogates', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getUseSurrogates []>

--- Incoming ---
[   'cv.ml.DTrees.setUseSurrogates',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setUseSurrogates [ARG bool val=]>

--- Incoming ---
['cv.ml.DTrees.getUse1SERule', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getUse1SERule []>

--- Incoming ---
[   'cv.ml.DTrees.setUse1SERule',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setUse1SERule [ARG bool val=]>

--- Incoming ---
['cv.ml.DTrees.getTruncatePrunedTree', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getTruncatePrunedTree []>

--- Incoming ---
[   'cv.ml.DTrees.setTruncatePrunedTree',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setTruncatePrunedTree [ARG bool val=]>

--- Incoming ---
[   'cv.ml.DTrees.getRegressionAccuracy',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.DTrees.getRegressionAccuracy []>

--- Incoming ---
[   'cv.ml.DTrees.setRegressionAccuracy',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setRegressionAccuracy [ARG float val=]>

--- Incoming ---
['cv.ml.DTrees.getPriors', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.DTrees.getPriors []>

--- Incoming ---
[   'cv.ml.DTrees.setPriors',
    'void',
    ['/V', '/PV'],
    [['Mat', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.DTrees.setPriors [ARG Mat val=]>

--- Incoming ---
['cv.ml.DTrees.create', 'Ptr_DTrees', ['/S'], [], 'Ptr<DTrees>']
ok: FUNC <Ptr_DTrees cv.ml.DTrees.create []>

--- Incoming ---
[   'cv.ml.DTrees.load',
    'Ptr_DTrees',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<DTrees>']
ok: FUNC <Ptr_DTrees cv.ml.DTrees.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.RTrees', ': cv::ml::DTrees', [], [], None]
ok: class CLASS cv.ml::.RTrees : DTrees, name: RTrees, base: DTrees

--- Incoming ---
[   'cv.ml.RTrees.getCalculateVarImportance',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.ml.RTrees.getCalculateVarImportance []>

--- Incoming ---
[   'cv.ml.RTrees.setCalculateVarImportance',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.setCalculateVarImportance [ARG bool val=]>

--- Incoming ---
['cv.ml.RTrees.getActiveVarCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.RTrees.getActiveVarCount []>

--- Incoming ---
[   'cv.ml.RTrees.setActiveVarCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.setActiveVarCount [ARG int val=]>

--- Incoming ---
[   'cv.ml.RTrees.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.RTrees.getTermCriteria []>

--- Incoming ---
[   'cv.ml.RTrees.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.RTrees.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.RTrees.getVarImportance', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.RTrees.getVarImportance []>

--- Incoming ---
[   'cv.ml.RTrees.getVotes',
    'void',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.getVotes [ARG Mat samples=, ARG Mat results=, ARG int flags=]>

--- Incoming ---
['cv.ml.RTrees.getOOBError', 'double', ['/C', '/V'], [], 'double']
ok: FUNC <double cv.ml.RTrees.getOOBError []>

--- Incoming ---
['cv.ml.RTrees.create', 'Ptr_RTrees', ['/S'], [], 'Ptr<RTrees>']
ok: FUNC <Ptr_RTrees cv.ml.RTrees.create []>

--- Incoming ---
[   'cv.ml.RTrees.load',
    'Ptr_RTrees',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<RTrees>']
ok: FUNC <Ptr_RTrees cv.ml.RTrees.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.Boost', ': cv::ml::DTrees', [], [], None]
ok: class CLASS cv.ml::.Boost : DTrees, name: Boost, base: DTrees

--- Incoming ---
['cv.ml.Boost.getBoostType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.Boost.getBoostType []>

--- Incoming ---
[   'cv.ml.Boost.setBoostType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setBoostType [ARG int val=]>

--- Incoming ---
['cv.ml.Boost.getWeakCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.Boost.getWeakCount []>

--- Incoming ---
[   'cv.ml.Boost.setWeakCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setWeakCount [ARG int val=]>

--- Incoming ---
['cv.ml.Boost.getWeightTrimRate', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.Boost.getWeightTrimRate []>

--- Incoming ---
[   'cv.ml.Boost.setWeightTrimRate',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setWeightTrimRate [ARG double val=]>

--- Incoming ---
[   'enum cv.ml.Boost.Types',
    '',
    [],
    [   ['const cv.ml.Boost.DISCRETE', '0', [], [], None, ''],
        ['const cv.ml.Boost.REAL', '1', [], [], None, ''],
        ['const cv.ml.Boost.LOGIT', '2', [], [], None, ''],
        ['const cv.ml.Boost.GENTLE', '3', [], [], None, '']],
    None]
ok: CONST DISCRETE=0
ok: CONST REAL=1
ok: CONST LOGIT=2
ok: CONST GENTLE=3

--- Incoming ---
['cv.ml.Boost.create', 'Ptr_Boost', ['/S'], [], 'Ptr<Boost>']
ok: FUNC <Ptr_Boost cv.ml.Boost.create []>

--- Incoming ---
[   'cv.ml.Boost.load',
    'Ptr_Boost',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<Boost>']
ok: FUNC <Ptr_Boost cv.ml.Boost.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.ANN_MLP', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.ANN_MLP : StatModel, name: ANN_MLP, base: StatModel

--- Incoming ---
[   'enum cv.ml.ANN_MLP.TrainingMethods',
    '',
    [],
    [   ['const cv.ml.ANN_MLP.BACKPROP', '0', [], [], None, ''],
        ['const cv.ml.ANN_MLP.RPROP', '1', [], [], None, ''],
        ['const cv.ml.ANN_MLP.ANNEAL', '2', [], [], None, '']],
    None]
ok: CONST BACKPROP=0
ok: CONST RPROP=1
ok: CONST ANNEAL=2

--- Incoming ---
[   'cv.ml.ANN_MLP.setTrainMethod',
    'void',
    ['/V', '/PV'],
    [   ['int', 'method', '', []],
        ['double', 'param1', '0', []],
        ['double', 'param2', '0', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setTrainMethod [ARG int method=, ARG double param1=0, ARG double param2=0]>

--- Incoming ---
['cv.ml.ANN_MLP.getTrainMethod', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.ANN_MLP.getTrainMethod []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setActivationFunction',
    'void',
    ['/V', '/PV'],
    [   ['int', 'type', '', []],
        ['double', 'param1', '0', []],
        ['double', 'param2', '0', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setActivationFunction [ARG int type=, ARG double param1=0, ARG double param2=0]>

--- Incoming ---
[   'cv.ml.ANN_MLP.setLayerSizes',
    'void',
    ['/V', '/PV'],
    [['Mat', '_layer_sizes', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setLayerSizes [ARG Mat _layer_sizes=]>

--- Incoming ---
['cv.ml.ANN_MLP.getLayerSizes', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.ANN_MLP.getLayerSizes []>

--- Incoming ---
[   'cv.ml.ANN_MLP.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.ANN_MLP.getTermCriteria []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getBackpropWeightScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getBackpropWeightScale []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setBackpropWeightScale',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setBackpropWeightScale [ARG double val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getBackpropMomentumScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getBackpropMomentumScale []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setBackpropMomentumScale',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setBackpropMomentumScale [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDW0', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDW0 []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDW0',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDW0 [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWPlus', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWPlus []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWPlus',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWPlus [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMinus', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMinus []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMinus',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMinus [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMin', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMin []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMin',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMin [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMax', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMax []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMax',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMax [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealInitialT', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealInitialT []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealInitialT',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealInitialT [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealFinalT', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealFinalT []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealFinalT',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealFinalT [ARG double val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getAnnealCoolingRatio',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealCoolingRatio []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealCoolingRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealCoolingRatio [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealItePerStep', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.ANN_MLP.getAnnealItePerStep []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealItePerStep',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealItePerStep [ARG int val=]>

--- Incoming ---
[   'enum cv.ml.ANN_MLP.ActivationFunctions',
    '',
    [],
    [   ['const cv.ml.ANN_MLP.IDENTITY', '0', [], [], None, ''],
        ['const cv.ml.ANN_MLP.SIGMOID_SYM', '1', [], [], None, ''],
        ['const cv.ml.ANN_MLP.GAUSSIAN', '2', [], [], None, ''],
        ['const cv.ml.ANN_MLP.RELU', '3', [], [], None, ''],
        ['const cv.ml.ANN_MLP.LEAKYRELU', '4', [], [], None, '']],
    None]
ok: CONST IDENTITY=0
ok: CONST SIGMOID_SYM=1
ok: CONST GAUSSIAN=2
ok: CONST RELU=3
ok: CONST LEAKYRELU=4

--- Incoming ---
[   'enum cv.ml.ANN_MLP.TrainFlags',
    '',
    [],
    [   ['const cv.ml.ANN_MLP.UPDATE_WEIGHTS', '1', [], [], None, ''],
        ['const cv.ml.ANN_MLP.NO_INPUT_SCALE', '2', [], [], None, ''],
        ['const cv.ml.ANN_MLP.NO_OUTPUT_SCALE', '4', [], [], None, '']],
    None]
ok: CONST UPDATE_WEIGHTS=1
ok: CONST NO_INPUT_SCALE=2
ok: CONST NO_OUTPUT_SCALE=4

--- Incoming ---
[   'cv.ml.ANN_MLP.getWeights',
    'Mat',
    ['/C', '/V', '/PV'],
    [['int', 'layerIdx', '', []]],
    'Mat']
ok: FUNC <Mat cv.ml.ANN_MLP.getWeights [ARG int layerIdx=]>

--- Incoming ---
['cv.ml.ANN_MLP.create', 'Ptr_ANN_MLP', ['/S'], [], 'Ptr<ANN_MLP>']
ok: FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.create []>

--- Incoming ---
[   'cv.ml.ANN_MLP.load',
    'Ptr_ANN_MLP',
    ['/S'],
    [['String', 'filepath', '', ['/C', '/Ref', '/PATH']]],
    'Ptr<ANN_MLP>']
ok: FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.load [ARG String filepath=]>

--- Incoming ---
['class cv.ml.LogisticRegression', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.LogisticRegression : StatModel, name: LogisticRegression, base: StatModel

--- Incoming ---
[   'cv.ml.LogisticRegression.getLearningRate',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.LogisticRegression.getLearningRate []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setLearningRate',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setLearningRate [ARG double val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getIterations []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setIterations [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getRegularization',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getRegularization []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setRegularization',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setRegularization [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getTrainMethod',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getTrainMethod []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setTrainMethod',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setTrainMethod [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getMiniBatchSize',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getMiniBatchSize []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setMiniBatchSize',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setMiniBatchSize [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.LogisticRegression.getTermCriteria []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
[   'enum cv.ml.LogisticRegression.RegKinds',
    '',
    [],
    [   ['const cv.ml.LogisticRegression.REG_DISABLE', '-1', [], [], None, ''],
        ['const cv.ml.LogisticRegression.REG_L1', '0', [], [], None, ''],
        ['const cv.ml.LogisticRegression.REG_L2', '1', [], [], None, '']],
    None]
ok: CONST REG_DISABLE=-1
ok: CONST REG_L1=0
ok: CONST REG_L2=1

--- Incoming ---
[   'enum cv.ml.LogisticRegression.Methods',
    '',
    [],
    [   ['const cv.ml.LogisticRegression.BATCH', '0', [], [], None, ''],
        ['const cv.ml.LogisticRegression.MINI_BATCH', '1', [], [], None, '']],
    None]
ok: CONST BATCH=0
ok: CONST MINI_BATCH=1

--- Incoming ---
[   'cv.ml.LogisticRegression.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.LogisticRegression.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
[   'cv.ml.LogisticRegression.get_learnt_thetas',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.LogisticRegression.get_learnt_thetas []>

--- Incoming ---
[   'cv.ml.LogisticRegression.create',
    'Ptr_LogisticRegression',
    ['/S'],
    [],
    'Ptr<LogisticRegression>']
ok: FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.create []>

--- Incoming ---
[   'cv.ml.LogisticRegression.load',
    'Ptr_LogisticRegression',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<LogisticRegression>']
ok: FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.SVMSGD', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.SVMSGD : StatModel, name: SVMSGD, base: StatModel

--- Incoming ---
[   'enum cv.ml.SVMSGD.SvmsgdType',
    '',
    [],
    [   ['const cv.ml.SVMSGD.SGD', '0', [], [], None, ''],
        ['const cv.ml.SVMSGD.ASGD', '1', [], [], None, '']],
    None]
ok: CONST SGD=0
ok: CONST ASGD=1

--- Incoming ---
[   'enum cv.ml.SVMSGD.MarginType',
    '',
    [],
    [   ['const cv.ml.SVMSGD.SOFT_MARGIN', '0', [], [], None, ''],
        ['const cv.ml.SVMSGD.HARD_MARGIN', '1', [], [], None, '']],
    None]
ok: CONST SOFT_MARGIN=0
ok: CONST HARD_MARGIN=1

--- Incoming ---
['cv.ml.SVMSGD.getWeights', 'Mat', ['/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.SVMSGD.getWeights []>

--- Incoming ---
['cv.ml.SVMSGD.getShift', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.ml.SVMSGD.getShift []>

--- Incoming ---
['cv.ml.SVMSGD.create', 'Ptr_SVMSGD', ['/S'], [], 'Ptr<SVMSGD>']
ok: FUNC <Ptr_SVMSGD cv.ml.SVMSGD.create []>

--- Incoming ---
[   'cv.ml.SVMSGD.load',
    'Ptr_SVMSGD',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref', '/PATH']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<SVMSGD>']
ok: FUNC <Ptr_SVMSGD cv.ml.SVMSGD.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
[   'cv.ml.SVMSGD.setOptimalParameters',
    'void',
    ['/V', '/PV'],
    [   ['int', 'svmsgdType', 'SVMSGD::ASGD', []],
        ['int', 'marginType', 'SVMSGD::SOFT_MARGIN', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setOptimalParameters [ARG int svmsgdType=SVMSGD::ASGD, ARG int marginType=SVMSGD::SOFT_MARGIN]>

--- Incoming ---
['cv.ml.SVMSGD.getSvmsgdType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVMSGD.getSvmsgdType []>

--- Incoming ---
[   'cv.ml.SVMSGD.setSvmsgdType',
    'void',
    ['/V', '/PV'],
    [['int', 'svmsgdType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setSvmsgdType [ARG int svmsgdType=]>

--- Incoming ---
['cv.ml.SVMSGD.getMarginType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVMSGD.getMarginType []>

--- Incoming ---
[   'cv.ml.SVMSGD.setMarginType',
    'void',
    ['/V', '/PV'],
    [['int', 'marginType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setMarginType [ARG int marginType=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getMarginRegularization',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.SVMSGD.getMarginRegularization []>

--- Incoming ---
[   'cv.ml.SVMSGD.setMarginRegularization',
    'void',
    ['/V', '/PV'],
    [['float', 'marginRegularization', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setMarginRegularization [ARG float marginRegularization=]>

--- Incoming ---
['cv.ml.SVMSGD.getInitialStepSize', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.ml.SVMSGD.getInitialStepSize []>

--- Incoming ---
[   'cv.ml.SVMSGD.setInitialStepSize',
    'void',
    ['/V', '/PV'],
    [['float', 'InitialStepSize', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setInitialStepSize [ARG float InitialStepSize=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getStepDecreasingPower',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.SVMSGD.getStepDecreasingPower []>

--- Incoming ---
[   'cv.ml.SVMSGD.setStepDecreasingPower',
    'void',
    ['/V', '/PV'],
    [['float', 'stepDecreasingPower', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setStepDecreasingPower [ARG float stepDecreasingPower=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.SVMSGD.getTermCriteria []>

--- Incoming ---
[   'cv.ml.SVMSGD.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setTermCriteria [ARG TermCriteria val=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/ml/include/opencv2/ml/ml.hpp =====
Namespaces: ['cv', 'cv.ml']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/ml/include/opencv2/ml/ml.hpp


===== Generating... =====
CLASS cv::.Ml : 
[CONST TEST_ERROR=0, CONST TRAIN_ERROR=1]
[CONST ROW_SAMPLE=0, CONST COL_SAMPLE=1]
[CONST VAR_NUMERICAL=0, CONST VAR_ORDERED=0, CONST VAR_CATEGORICAL=1]
CLASS cv.ml::.ANN_MLP : StatModel
[CONST IDENTITY=0, CONST SIGMOID_SYM=1, CONST GAUSSIAN=2, CONST RELU=3, CONST LEAKYRELU=4]
[CONST UPDATE_WEIGHTS=1, CONST NO_INPUT_SCALE=2, CONST NO_OUTPUT_SCALE=4]
[CONST BACKPROP=0, CONST RPROP=1, CONST ANNEAL=2]
FUNC <void cv.ml.ANN_MLP.setTrainMethod [ARG int method=, ARG double param1=0, ARG double param2=0]>
java: void setTrainMethod(int method, double param1, double param2)
java: void setTrainMethod(int method, double param1)
java: void setTrainMethod(int method)
FUNC <int cv.ml.ANN_MLP.getTrainMethod []>
java: int getTrainMethod()
FUNC <void cv.ml.ANN_MLP.setActivationFunction [ARG int type=, ARG double param1=0, ARG double param2=0]>
java: void setActivationFunction(int type, double param1, double param2)
java: void setActivationFunction(int type, double param1)
java: void setActivationFunction(int type)
FUNC <void cv.ml.ANN_MLP.setLayerSizes [ARG Mat _layer_sizes=]>
java: void setLayerSizes(Mat _layer_sizes)
FUNC <Mat cv.ml.ANN_MLP.getLayerSizes []>
java: Mat getLayerSizes()
FUNC <TermCriteria cv.ml.ANN_MLP.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.ANN_MLP.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <double cv.ml.ANN_MLP.getBackpropWeightScale []>
java: double getBackpropWeightScale()
FUNC <void cv.ml.ANN_MLP.setBackpropWeightScale [ARG double val=]>
java: void setBackpropWeightScale(double val)
FUNC <double cv.ml.ANN_MLP.getBackpropMomentumScale []>
java: double getBackpropMomentumScale()
FUNC <void cv.ml.ANN_MLP.setBackpropMomentumScale [ARG double val=]>
java: void setBackpropMomentumScale(double val)
FUNC <double cv.ml.ANN_MLP.getRpropDW0 []>
java: double getRpropDW0()
FUNC <void cv.ml.ANN_MLP.setRpropDW0 [ARG double val=]>
java: void setRpropDW0(double val)
FUNC <double cv.ml.ANN_MLP.getRpropDWPlus []>
java: double getRpropDWPlus()
FUNC <void cv.ml.ANN_MLP.setRpropDWPlus [ARG double val=]>
java: void setRpropDWPlus(double val)
FUNC <double cv.ml.ANN_MLP.getRpropDWMinus []>
java: double getRpropDWMinus()
FUNC <void cv.ml.ANN_MLP.setRpropDWMinus [ARG double val=]>
java: void setRpropDWMinus(double val)
FUNC <double cv.ml.ANN_MLP.getRpropDWMin []>
java: double getRpropDWMin()
FUNC <void cv.ml.ANN_MLP.setRpropDWMin [ARG double val=]>
java: void setRpropDWMin(double val)
FUNC <double cv.ml.ANN_MLP.getRpropDWMax []>
java: double getRpropDWMax()
FUNC <void cv.ml.ANN_MLP.setRpropDWMax [ARG double val=]>
java: void setRpropDWMax(double val)
FUNC <double cv.ml.ANN_MLP.getAnnealInitialT []>
java: double getAnnealInitialT()
FUNC <void cv.ml.ANN_MLP.setAnnealInitialT [ARG double val=]>
java: void setAnnealInitialT(double val)
FUNC <double cv.ml.ANN_MLP.getAnnealFinalT []>
java: double getAnnealFinalT()
FUNC <void cv.ml.ANN_MLP.setAnnealFinalT [ARG double val=]>
java: void setAnnealFinalT(double val)
FUNC <double cv.ml.ANN_MLP.getAnnealCoolingRatio []>
java: double getAnnealCoolingRatio()
FUNC <void cv.ml.ANN_MLP.setAnnealCoolingRatio [ARG double val=]>
java: void setAnnealCoolingRatio(double val)
FUNC <int cv.ml.ANN_MLP.getAnnealItePerStep []>
java: int getAnnealItePerStep()
FUNC <void cv.ml.ANN_MLP.setAnnealItePerStep [ARG int val=]>
java: void setAnnealItePerStep(int val)
FUNC <Mat cv.ml.ANN_MLP.getWeights [ARG int layerIdx=]>
java: Mat getWeights(int layerIdx)
FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.create []>
java: ANN_MLP create()
FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.load [ARG String filepath=]>
java: ANN_MLP load(String filepath)
CLASS cv.ml::.Boost : DTrees
[CONST DISCRETE=0, CONST REAL=1, CONST LOGIT=2, CONST GENTLE=3]
FUNC <int cv.ml.Boost.getBoostType []>
java: int getBoostType()
FUNC <void cv.ml.Boost.setBoostType [ARG int val=]>
java: void setBoostType(int val)
FUNC <int cv.ml.Boost.getWeakCount []>
java: int getWeakCount()
FUNC <void cv.ml.Boost.setWeakCount [ARG int val=]>
java: void setWeakCount(int val)
FUNC <double cv.ml.Boost.getWeightTrimRate []>
java: double getWeightTrimRate()
FUNC <void cv.ml.Boost.setWeightTrimRate [ARG double val=]>
java: void setWeightTrimRate(double val)
FUNC <Ptr_Boost cv.ml.Boost.create []>
java: Boost create()
FUNC <Ptr_Boost cv.ml.Boost.load [ARG String filepath=, ARG String nodeName=String()]>
java: Boost load(String filepath, String nodeName)
java: Boost load(String filepath)
CLASS cv.ml::.DTrees : StatModel
[CONST PREDICT_AUTO=0, CONST PREDICT_SUM=(1<<8), CONST PREDICT_MAX_VOTE=(2<<8), CONST PREDICT_MASK=(3<<8)]
FUNC <int cv.ml.DTrees.getMaxCategories []>
java: int getMaxCategories()
FUNC <void cv.ml.DTrees.setMaxCategories [ARG int val=]>
java: void setMaxCategories(int val)
FUNC <int cv.ml.DTrees.getMaxDepth []>
java: int getMaxDepth()
FUNC <void cv.ml.DTrees.setMaxDepth [ARG int val=]>
java: void setMaxDepth(int val)
FUNC <int cv.ml.DTrees.getMinSampleCount []>
java: int getMinSampleCount()
FUNC <void cv.ml.DTrees.setMinSampleCount [ARG int val=]>
java: void setMinSampleCount(int val)
FUNC <int cv.ml.DTrees.getCVFolds []>
java: int getCVFolds()
FUNC <void cv.ml.DTrees.setCVFolds [ARG int val=]>
java: void setCVFolds(int val)
FUNC <bool cv.ml.DTrees.getUseSurrogates []>
java: boolean getUseSurrogates()
FUNC <void cv.ml.DTrees.setUseSurrogates [ARG bool val=]>
java: void setUseSurrogates(boolean val)
FUNC <bool cv.ml.DTrees.getUse1SERule []>
java: boolean getUse1SERule()
FUNC <void cv.ml.DTrees.setUse1SERule [ARG bool val=]>
java: void setUse1SERule(boolean val)
FUNC <bool cv.ml.DTrees.getTruncatePrunedTree []>
java: boolean getTruncatePrunedTree()
FUNC <void cv.ml.DTrees.setTruncatePrunedTree [ARG bool val=]>
java: void setTruncatePrunedTree(boolean val)
FUNC <float cv.ml.DTrees.getRegressionAccuracy []>
java: float getRegressionAccuracy()
FUNC <void cv.ml.DTrees.setRegressionAccuracy [ARG float val=]>
java: void setRegressionAccuracy(float val)
FUNC <Mat cv.ml.DTrees.getPriors []>
java: Mat getPriors()
FUNC <void cv.ml.DTrees.setPriors [ARG Mat val=]>
java: void setPriors(Mat val)
FUNC <Ptr_DTrees cv.ml.DTrees.create []>
java: DTrees create()
FUNC <Ptr_DTrees cv.ml.DTrees.load [ARG String filepath=, ARG String nodeName=String()]>
java: DTrees load(String filepath, String nodeName)
java: DTrees load(String filepath)
CLASS cv.ml::.EM : StatModel
[CONST DEFAULT_NCLUSTERS=5, CONST DEFAULT_MAX_ITERS=100, CONST START_E_STEP=1, CONST START_M_STEP=2, CONST START_AUTO_STEP=0]
[CONST COV_MAT_SPHERICAL=0, CONST COV_MAT_DIAGONAL=1, CONST COV_MAT_GENERIC=2, CONST COV_MAT_DEFAULT=COV_MAT_DIAGONAL]
FUNC <int cv.ml.EM.getClustersNumber []>
java: int getClustersNumber()
FUNC <void cv.ml.EM.setClustersNumber [ARG int val=]>
java: void setClustersNumber(int val)
FUNC <int cv.ml.EM.getCovarianceMatrixType []>
java: int getCovarianceMatrixType()
FUNC <void cv.ml.EM.setCovarianceMatrixType [ARG int val=]>
java: void setCovarianceMatrixType(int val)
FUNC <TermCriteria cv.ml.EM.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.EM.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <Mat cv.ml.EM.getWeights []>
java: Mat getWeights()
FUNC <Mat cv.ml.EM.getMeans []>
java: Mat getMeans()
FUNC <void cv.ml.EM.getCovs [ARG vector_Mat covs=]>
java: void getCovs(List<Mat> covs)
FUNC <float cv.ml.EM.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
FUNC <Vec2d cv.ml.EM.predict2 [ARG Mat sample=, ARG Mat probs=]>
java: double[] predict2(Mat sample, Mat probs)
FUNC <bool cv.ml.EM.trainEM [ARG Mat samples=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainEM(Mat samples, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainEM(Mat samples, Mat logLikelihoods, Mat labels)
java: boolean trainEM(Mat samples, Mat logLikelihoods)
java: boolean trainEM(Mat samples)
FUNC <bool cv.ml.EM.trainE [ARG Mat samples=, ARG Mat means0=, ARG Mat covs0=Mat(), ARG Mat weights0=Mat(), ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods, Mat labels)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0)
java: boolean trainE(Mat samples, Mat means0, Mat covs0)
java: boolean trainE(Mat samples, Mat means0)
FUNC <bool cv.ml.EM.trainM [ARG Mat samples=, ARG Mat probs0=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods, Mat labels)
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods)
java: boolean trainM(Mat samples, Mat probs0)
FUNC <Ptr_EM cv.ml.EM.create []>
java: EM create()
FUNC <Ptr_EM cv.ml.EM.load [ARG String filepath=, ARG String nodeName=String()]>
java: EM load(String filepath, String nodeName)
java: EM load(String filepath)
CLASS cv.ml::.KNearest : StatModel
[CONST BRUTE_FORCE=1, CONST KDTREE=2]
FUNC <int cv.ml.KNearest.getDefaultK []>
java: int getDefaultK()
FUNC <void cv.ml.KNearest.setDefaultK [ARG int val=]>
java: void setDefaultK(int val)
FUNC <bool cv.ml.KNearest.getIsClassifier []>
java: boolean getIsClassifier()
FUNC <void cv.ml.KNearest.setIsClassifier [ARG bool val=]>
java: void setIsClassifier(boolean val)
FUNC <int cv.ml.KNearest.getEmax []>
java: int getEmax()
FUNC <void cv.ml.KNearest.setEmax [ARG int val=]>
java: void setEmax(int val)
FUNC <int cv.ml.KNearest.getAlgorithmType []>
java: int getAlgorithmType()
FUNC <void cv.ml.KNearest.setAlgorithmType [ARG int val=]>
java: void setAlgorithmType(int val)
FUNC <float cv.ml.KNearest.findNearest [ARG Mat samples=, ARG int k=, ARG Mat results=, ARG Mat neighborResponses=Mat(), ARG Mat dist=Mat()]>
java: float findNearest(Mat samples, int k, Mat results, Mat neighborResponses, Mat dist)
java: float findNearest(Mat samples, int k, Mat results, Mat neighborResponses)
java: float findNearest(Mat samples, int k, Mat results)
FUNC <Ptr_KNearest cv.ml.KNearest.create []>
java: KNearest create()
FUNC <Ptr_KNearest cv.ml.KNearest.load [ARG String filepath=]>
java: KNearest load(String filepath)
CLASS cv.ml::.LogisticRegression : StatModel
[CONST BATCH=0, CONST MINI_BATCH=1]
[CONST REG_DISABLE=-1, CONST REG_L1=0, CONST REG_L2=1]
FUNC <double cv.ml.LogisticRegression.getLearningRate []>
java: double getLearningRate()
FUNC <void cv.ml.LogisticRegression.setLearningRate [ARG double val=]>
java: void setLearningRate(double val)
FUNC <int cv.ml.LogisticRegression.getIterations []>
java: int getIterations()
FUNC <void cv.ml.LogisticRegression.setIterations [ARG int val=]>
java: void setIterations(int val)
FUNC <int cv.ml.LogisticRegression.getRegularization []>
java: int getRegularization()
FUNC <void cv.ml.LogisticRegression.setRegularization [ARG int val=]>
java: void setRegularization(int val)
FUNC <int cv.ml.LogisticRegression.getTrainMethod []>
java: int getTrainMethod()
FUNC <void cv.ml.LogisticRegression.setTrainMethod [ARG int val=]>
java: void setTrainMethod(int val)
FUNC <int cv.ml.LogisticRegression.getMiniBatchSize []>
java: int getMiniBatchSize()
FUNC <void cv.ml.LogisticRegression.setMiniBatchSize [ARG int val=]>
java: void setMiniBatchSize(int val)
FUNC <TermCriteria cv.ml.LogisticRegression.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.LogisticRegression.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <float cv.ml.LogisticRegression.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
FUNC <Mat cv.ml.LogisticRegression.get_learnt_thetas []>
java: Mat get_learnt_thetas()
FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.create []>
java: LogisticRegression create()
FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.load [ARG String filepath=, ARG String nodeName=String()]>
java: LogisticRegression load(String filepath, String nodeName)
java: LogisticRegression load(String filepath)
CLASS cv.ml::.NormalBayesClassifier : StatModel
FUNC <float cv.ml.NormalBayesClassifier.predictProb [ARG Mat inputs=, ARG Mat outputs=, ARG Mat outputProbs=, ARG int flags=0]>
java: float predictProb(Mat inputs, Mat outputs, Mat outputProbs, int flags)
java: float predictProb(Mat inputs, Mat outputs, Mat outputProbs)
FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.create []>
java: NormalBayesClassifier create()
FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.load [ARG String filepath=, ARG String nodeName=String()]>
java: NormalBayesClassifier load(String filepath, String nodeName)
java: NormalBayesClassifier load(String filepath)
CLASS cv.ml::.ParamGrid : 
FUNC <Ptr_ParamGrid cv.ml.ParamGrid.create [ARG double minVal=0., ARG double maxVal=0., ARG double logstep=1.]>
java: ParamGrid create(double minVal, double maxVal, double logstep)
java: ParamGrid create(double minVal, double maxVal)
java: ParamGrid create(double minVal)
java: ParamGrid create()
FUNC <double cv.ml.ParamGrid.get_minVal []>
java: double get_minVal()
FUNC <void cv.ml.ParamGrid.set_minVal [ARG double minVal=]>
java: void set_minVal(double minVal)
FUNC <double cv.ml.ParamGrid.get_maxVal []>
java: double get_maxVal()
FUNC <void cv.ml.ParamGrid.set_maxVal [ARG double maxVal=]>
java: void set_maxVal(double maxVal)
FUNC <double cv.ml.ParamGrid.get_logStep []>
java: double get_logStep()
FUNC <void cv.ml.ParamGrid.set_logStep [ARG double logStep=]>
java: void set_logStep(double logStep)
CLASS cv.ml::.RTrees : DTrees
FUNC <bool cv.ml.RTrees.getCalculateVarImportance []>
java: boolean getCalculateVarImportance()
FUNC <void cv.ml.RTrees.setCalculateVarImportance [ARG bool val=]>
java: void setCalculateVarImportance(boolean val)
FUNC <int cv.ml.RTrees.getActiveVarCount []>
java: int getActiveVarCount()
FUNC <void cv.ml.RTrees.setActiveVarCount [ARG int val=]>
java: void setActiveVarCount(int val)
FUNC <TermCriteria cv.ml.RTrees.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.RTrees.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <Mat cv.ml.RTrees.getVarImportance []>
java: Mat getVarImportance()
FUNC <void cv.ml.RTrees.getVotes [ARG Mat samples=, ARG Mat results=, ARG int flags=]>
java: void getVotes(Mat samples, Mat results, int flags)
FUNC <double cv.ml.RTrees.getOOBError []>
java: double getOOBError()
FUNC <Ptr_RTrees cv.ml.RTrees.create []>
java: RTrees create()
FUNC <Ptr_RTrees cv.ml.RTrees.load [ARG String filepath=, ARG String nodeName=String()]>
java: RTrees load(String filepath, String nodeName)
java: RTrees load(String filepath)
CLASS cv.ml::.SVM : StatModel
[CONST CUSTOM=-1, CONST LINEAR=0, CONST POLY=1, CONST RBF=2, CONST SIGMOID=3, CONST CHI2=4, CONST INTER=5]
[CONST C=0, CONST GAMMA=1, CONST P=2, CONST NU=3, CONST COEF=4, CONST DEGREE=5]
[CONST C_SVC=100, CONST NU_SVC=101, CONST ONE_CLASS=102, CONST EPS_SVR=103, CONST NU_SVR=104]
FUNC <int cv.ml.SVM.getType []>
java: int getType()
FUNC <void cv.ml.SVM.setType [ARG int val=]>
java: void setType(int val)
FUNC <double cv.ml.SVM.getGamma []>
java: double getGamma()
FUNC <void cv.ml.SVM.setGamma [ARG double val=]>
java: void setGamma(double val)
FUNC <double cv.ml.SVM.getCoef0 []>
java: double getCoef0()
FUNC <void cv.ml.SVM.setCoef0 [ARG double val=]>
java: void setCoef0(double val)
FUNC <double cv.ml.SVM.getDegree []>
java: double getDegree()
FUNC <void cv.ml.SVM.setDegree [ARG double val=]>
java: void setDegree(double val)
FUNC <double cv.ml.SVM.getC []>
java: double getC()
FUNC <void cv.ml.SVM.setC [ARG double val=]>
java: void setC(double val)
FUNC <double cv.ml.SVM.getNu []>
java: double getNu()
FUNC <void cv.ml.SVM.setNu [ARG double val=]>
java: void setNu(double val)
FUNC <double cv.ml.SVM.getP []>
java: double getP()
FUNC <void cv.ml.SVM.setP [ARG double val=]>
java: void setP(double val)
FUNC <Mat cv.ml.SVM.getClassWeights []>
java: Mat getClassWeights()
FUNC <void cv.ml.SVM.setClassWeights [ARG Mat val=]>
java: void setClassWeights(Mat val)
FUNC <TermCriteria cv.ml.SVM.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.SVM.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <int cv.ml.SVM.getKernelType []>
java: int getKernelType()
FUNC <void cv.ml.SVM.setKernel [ARG int kernelType=]>
java: void setKernel(int kernelType)
FUNC <bool cv.ml.SVM.trainAuto [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG int kFold=10, ARG Ptr_ParamGrid Cgrid=SVM::getDefaultGridPtr(SVM::C), ARG Ptr_ParamGrid gammaGrid=SVM::getDefaultGridPtr(SVM::GAMMA), ARG Ptr_ParamGrid pGrid=SVM::getDefaultGridPtr(SVM::P), ARG Ptr_ParamGrid nuGrid=SVM::getDefaultGridPtr(SVM::NU), ARG Ptr_ParamGrid coeffGrid=SVM::getDefaultGridPtr(SVM::COEF), ARG Ptr_ParamGrid degreeGrid=SVM::getDefaultGridPtr(SVM::DEGREE), ARG bool balanced=false]>
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid, ParamGrid degreeGrid, boolean balanced)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid, ParamGrid degreeGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold)
java: boolean trainAuto(Mat samples, int layout, Mat responses)
FUNC <Mat cv.ml.SVM.getSupportVectors []>
java: Mat getSupportVectors()
FUNC <Mat cv.ml.SVM.getUncompressedSupportVectors []>
java: Mat getUncompressedSupportVectors()
FUNC <double cv.ml.SVM.getDecisionFunction [ARG int i=, ARG Mat alpha=, ARG Mat svidx=]>
java: double getDecisionFunction(int i, Mat alpha, Mat svidx)
FUNC <Ptr_ParamGrid cv.ml.SVM.getDefaultGridPtr [ARG int param_id=]>
java: ParamGrid getDefaultGridPtr(int param_id)
FUNC <Ptr_SVM cv.ml.SVM.create []>
java: SVM create()
FUNC <Ptr_SVM cv.ml.SVM.load [ARG String filepath=]>
java: SVM load(String filepath)
CLASS cv.ml::.SVMSGD : StatModel
[CONST SOFT_MARGIN=0, CONST HARD_MARGIN=1]
[CONST SGD=0, CONST ASGD=1]
FUNC <Mat cv.ml.SVMSGD.getWeights []>
java: Mat getWeights()
FUNC <float cv.ml.SVMSGD.getShift []>
java: float getShift()
FUNC <Ptr_SVMSGD cv.ml.SVMSGD.create []>
java: SVMSGD create()
FUNC <Ptr_SVMSGD cv.ml.SVMSGD.load [ARG String filepath=, ARG String nodeName=String()]>
java: SVMSGD load(String filepath, String nodeName)
java: SVMSGD load(String filepath)
FUNC <void cv.ml.SVMSGD.setOptimalParameters [ARG int svmsgdType=SVMSGD::ASGD, ARG int marginType=SVMSGD::SOFT_MARGIN]>
java: void setOptimalParameters(int svmsgdType, int marginType)
java: void setOptimalParameters(int svmsgdType)
java: void setOptimalParameters()
FUNC <int cv.ml.SVMSGD.getSvmsgdType []>
java: int getSvmsgdType()
FUNC <void cv.ml.SVMSGD.setSvmsgdType [ARG int svmsgdType=]>
java: void setSvmsgdType(int svmsgdType)
FUNC <int cv.ml.SVMSGD.getMarginType []>
java: int getMarginType()
FUNC <void cv.ml.SVMSGD.setMarginType [ARG int marginType=]>
java: void setMarginType(int marginType)
FUNC <float cv.ml.SVMSGD.getMarginRegularization []>
java: float getMarginRegularization()
FUNC <void cv.ml.SVMSGD.setMarginRegularization [ARG float marginRegularization=]>
java: void setMarginRegularization(float marginRegularization)
FUNC <float cv.ml.SVMSGD.getInitialStepSize []>
java: float getInitialStepSize()
FUNC <void cv.ml.SVMSGD.setInitialStepSize [ARG float InitialStepSize=]>
java: void setInitialStepSize(float InitialStepSize)
FUNC <float cv.ml.SVMSGD.getStepDecreasingPower []>
java: float getStepDecreasingPower()
FUNC <void cv.ml.SVMSGD.setStepDecreasingPower [ARG float stepDecreasingPower=]>
java: void setStepDecreasingPower(float stepDecreasingPower)
FUNC <TermCriteria cv.ml.SVMSGD.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.ml.SVMSGD.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
CLASS cv.ml::.StatModel : Algorithm
[CONST UPDATE_MODEL=1, CONST RAW_OUTPUT=1, CONST COMPRESSED_INPUT=2, CONST PREPROCESSED_INPUT=4]
FUNC <int cv.ml.StatModel.getVarCount []>
java: int getVarCount()
FUNC <bool cv.ml.StatModel.empty []>
java: boolean empty()
FUNC <bool cv.ml.StatModel.isTrained []>
java: boolean isTrained()
FUNC <bool cv.ml.StatModel.isClassifier []>
java: boolean isClassifier()
FUNC <bool cv.ml.StatModel.train [ARG Ptr_TrainData trainData=, ARG int flags=0]>
java: boolean train(TrainData trainData, int flags)
java: boolean train(TrainData trainData)
FUNC <bool cv.ml.StatModel.train [ARG Mat samples=, ARG int layout=, ARG Mat responses=]>
java: boolean train(Mat samples, int layout, Mat responses)
FUNC <float cv.ml.StatModel.calcError [ARG Ptr_TrainData data=, ARG bool test=, ARG Mat resp=]>
java: float calcError(TrainData data, boolean test, Mat resp)
FUNC <float cv.ml.StatModel.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
CLASS cv.ml::.TrainData : 
FUNC <int cv.ml.TrainData.getLayout []>
java: int getLayout()
FUNC <int cv.ml.TrainData.getNTrainSamples []>
java: int getNTrainSamples()
FUNC <int cv.ml.TrainData.getNTestSamples []>
java: int getNTestSamples()
FUNC <int cv.ml.TrainData.getNSamples []>
java: int getNSamples()
FUNC <int cv.ml.TrainData.getNVars []>
java: int getNVars()
FUNC <int cv.ml.TrainData.getNAllVars []>
java: int getNAllVars()
FUNC <void cv.ml.TrainData.getSample [ARG Mat varIdx=, ARG int sidx=, ARG float * buf=]>
java: void getSample(Mat varIdx, int sidx, float buf)
FUNC <Mat cv.ml.TrainData.getSamples []>
java: Mat getSamples()
FUNC <Mat cv.ml.TrainData.getMissing []>
java: Mat getMissing()
FUNC <Mat cv.ml.TrainData.getTrainSamples [ARG int layout=ROW_SAMPLE, ARG bool compressSamples=true, ARG bool compressVars=true]>
java: Mat getTrainSamples(int layout, boolean compressSamples, boolean compressVars)
java: Mat getTrainSamples(int layout, boolean compressSamples)
java: Mat getTrainSamples(int layout)
java: Mat getTrainSamples()
FUNC <Mat cv.ml.TrainData.getTrainResponses []>
java: Mat getTrainResponses()
FUNC <Mat cv.ml.TrainData.getTrainNormCatResponses []>
java: Mat getTrainNormCatResponses()
FUNC <Mat cv.ml.TrainData.getTestResponses []>
java: Mat getTestResponses()
FUNC <Mat cv.ml.TrainData.getTestNormCatResponses []>
java: Mat getTestNormCatResponses()
FUNC <Mat cv.ml.TrainData.getResponses []>
java: Mat getResponses()
FUNC <Mat cv.ml.TrainData.getNormCatResponses []>
java: Mat getNormCatResponses()
FUNC <Mat cv.ml.TrainData.getSampleWeights []>
java: Mat getSampleWeights()
FUNC <Mat cv.ml.TrainData.getTrainSampleWeights []>
java: Mat getTrainSampleWeights()
FUNC <Mat cv.ml.TrainData.getTestSampleWeights []>
java: Mat getTestSampleWeights()
FUNC <Mat cv.ml.TrainData.getVarIdx []>
java: Mat getVarIdx()
FUNC <Mat cv.ml.TrainData.getVarType []>
java: Mat getVarType()
FUNC <Mat cv.ml.TrainData.getVarSymbolFlags []>
java: Mat getVarSymbolFlags()
FUNC <int cv.ml.TrainData.getResponseType []>
java: int getResponseType()
FUNC <Mat cv.ml.TrainData.getTrainSampleIdx []>
java: Mat getTrainSampleIdx()
FUNC <Mat cv.ml.TrainData.getTestSampleIdx []>
java: Mat getTestSampleIdx()
FUNC <void cv.ml.TrainData.getValues [ARG int vi=, ARG Mat sidx=, ARG float * values=]>
java: void getValues(int vi, Mat sidx, float values)
FUNC <Mat cv.ml.TrainData.getDefaultSubstValues []>
java: Mat getDefaultSubstValues()
FUNC <int cv.ml.TrainData.getCatCount [ARG int vi=]>
java: int getCatCount(int vi)
FUNC <Mat cv.ml.TrainData.getClassLabels []>
java: Mat getClassLabels()
FUNC <Mat cv.ml.TrainData.getCatOfs []>
java: Mat getCatOfs()
FUNC <Mat cv.ml.TrainData.getCatMap []>
java: Mat getCatMap()
FUNC <void cv.ml.TrainData.setTrainTestSplit [ARG int count=, ARG bool shuffle=true]>
java: void setTrainTestSplit(int count, boolean shuffle)
java: void setTrainTestSplit(int count)
FUNC <void cv.ml.TrainData.setTrainTestSplitRatio [ARG double ratio=, ARG bool shuffle=true]>
java: void setTrainTestSplitRatio(double ratio, boolean shuffle)
java: void setTrainTestSplitRatio(double ratio)
FUNC <void cv.ml.TrainData.shuffleTrainTest []>
java: void shuffleTrainTest()
FUNC <Mat cv.ml.TrainData.getTestSamples []>
java: Mat getTestSamples()
FUNC <void cv.ml.TrainData.getNames [ARG vector_String names=]>
java: void getNames(List<String> names)
FUNC <Mat cv.ml.TrainData.getSubVector [ARG Mat vec=, ARG Mat idx=]>
java: Mat getSubVector(Mat vec, Mat idx)
FUNC <Mat cv.ml.TrainData.getSubMatrix [ARG Mat matrix=, ARG Mat idx=, ARG int layout=]>
java: Mat getSubMatrix(Mat matrix, Mat idx, int layout)
FUNC <Ptr_TrainData cv.ml.TrainData.create [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG Mat varIdx=Mat(), ARG Mat sampleIdx=Mat(), ARG Mat sampleWeights=Mat(), ARG Mat varType=Mat()]>
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx, Mat sampleWeights, Mat varType)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx, Mat sampleWeights)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx)
java: TrainData create(Mat samples, int layout, Mat responses)

=== MODULE: photo (/home/adminlab/franka_ros2_ws/src/opencv/modules/photo) ===


Files (3):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo/cuda.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo/photo.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Photo : , name: Photo, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo.hpp =====
Namespaces: ['cv']

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.INPAINT_NS', '0', [], [], None, ''],
        ['const cv.INPAINT_TELEA', '1', [], [], None, '']],
    None]
ok: CONST INPAINT_NS=0
ok: CONST INPAINT_TELEA=1

--- Incoming ---
[   'cv.inpaint',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'inpaintMask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'inpaintRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..inpaint [ARG Mat src=, ARG Mat inpaintMask=, ARG Mat dst=, ARG double inpaintRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['vector_float', 'h', '', ['/C', '/Ref']],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingColored',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingColored [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['vector_float', 'h', '', ['/C', '/Ref']],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingColoredMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingColoredMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.denoise_TVL1',
    'void',
    [],
    [   ['vector_Mat', 'observations', '', ['/C', '/Ref']],
        ['Mat', 'result', '', ['/Ref']],
        ['double', 'lambda', '1.0', []],
        ['int', 'niters', '30', []]],
    'void']
ok: FUNC <void cv..denoise_TVL1 [ARG vector_Mat observations=, ARG Mat result=, ARG double lambda=1.0, ARG int niters=30]>

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [['const cv.LDR_SIZE', '256', [], [], None, '']],
    None]
ok: CONST LDR_SIZE=256

--- Incoming ---
['class cv.Tonemap', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.Tonemap : Algorithm, name: Tonemap, base: Algorithm

--- Incoming ---
[   'cv.Tonemap.process',
    'void',
    ['/V', '/PV'],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.Tonemap.process [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
['cv.Tonemap.getGamma', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.Tonemap.getGamma []>

--- Incoming ---
[   'cv.Tonemap.setGamma',
    'void',
    ['/V', '/PV'],
    [['float', 'gamma', '', []]],
    'void']
ok: FUNC <void cv.Tonemap.setGamma [ARG float gamma=]>

--- Incoming ---
[   'cv.createTonemap',
    'Ptr_Tonemap',
    [],
    [['float', 'gamma', '1.0f', []]],
    'Ptr<Tonemap>']
ok: FUNC <Ptr_Tonemap cv..createTonemap [ARG float gamma=1.0f]>

--- Incoming ---
['class cv.TonemapDrago', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapDrago : Tonemap, name: TonemapDrago, base: Tonemap

--- Incoming ---
['cv.TonemapDrago.getSaturation', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDrago.getSaturation []>

--- Incoming ---
[   'cv.TonemapDrago.setSaturation',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation', '', []]],
    'void']
ok: FUNC <void cv.TonemapDrago.setSaturation [ARG float saturation=]>

--- Incoming ---
['cv.TonemapDrago.getBias', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDrago.getBias []>

--- Incoming ---
[   'cv.TonemapDrago.setBias',
    'void',
    ['/V', '/PV'],
    [['float', 'bias', '', []]],
    'void']
ok: FUNC <void cv.TonemapDrago.setBias [ARG float bias=]>

--- Incoming ---
[   'cv.createTonemapDrago',
    'Ptr_TonemapDrago',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'saturation', '1.0f', []],
        ['float', 'bias', '0.85f', []]],
    'Ptr<TonemapDrago>']
ok: FUNC <Ptr_TonemapDrago cv..createTonemapDrago [ARG float gamma=1.0f, ARG float saturation=1.0f, ARG float bias=0.85f]>

--- Incoming ---
['class cv.TonemapReinhard', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapReinhard : Tonemap, name: TonemapReinhard, base: Tonemap

--- Incoming ---
['cv.TonemapReinhard.getIntensity', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapReinhard.getIntensity []>

--- Incoming ---
[   'cv.TonemapReinhard.setIntensity',
    'void',
    ['/V', '/PV'],
    [['float', 'intensity', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setIntensity [ARG float intensity=]>

--- Incoming ---
[   'cv.TonemapReinhard.getLightAdaptation',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.TonemapReinhard.getLightAdaptation []>

--- Incoming ---
[   'cv.TonemapReinhard.setLightAdaptation',
    'void',
    ['/V', '/PV'],
    [['float', 'light_adapt', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setLightAdaptation [ARG float light_adapt=]>

--- Incoming ---
[   'cv.TonemapReinhard.getColorAdaptation',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.TonemapReinhard.getColorAdaptation []>

--- Incoming ---
[   'cv.TonemapReinhard.setColorAdaptation',
    'void',
    ['/V', '/PV'],
    [['float', 'color_adapt', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setColorAdaptation [ARG float color_adapt=]>

--- Incoming ---
[   'cv.createTonemapReinhard',
    'Ptr_TonemapReinhard',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'intensity', '0.0f', []],
        ['float', 'light_adapt', '1.0f', []],
        ['float', 'color_adapt', '0.0f', []]],
    'Ptr<TonemapReinhard>']
ok: FUNC <Ptr_TonemapReinhard cv..createTonemapReinhard [ARG float gamma=1.0f, ARG float intensity=0.0f, ARG float light_adapt=1.0f, ARG float color_adapt=0.0f]>

--- Incoming ---
['class cv.TonemapMantiuk', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapMantiuk : Tonemap, name: TonemapMantiuk, base: Tonemap

--- Incoming ---
['cv.TonemapMantiuk.getScale', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapMantiuk.getScale []>

--- Incoming ---
[   'cv.TonemapMantiuk.setScale',
    'void',
    ['/V', '/PV'],
    [['float', 'scale', '', []]],
    'void']
ok: FUNC <void cv.TonemapMantiuk.setScale [ARG float scale=]>

--- Incoming ---
['cv.TonemapMantiuk.getSaturation', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapMantiuk.getSaturation []>

--- Incoming ---
[   'cv.TonemapMantiuk.setSaturation',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation', '', []]],
    'void']
ok: FUNC <void cv.TonemapMantiuk.setSaturation [ARG float saturation=]>

--- Incoming ---
[   'cv.createTonemapMantiuk',
    'Ptr_TonemapMantiuk',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'scale', '0.7f', []],
        ['float', 'saturation', '1.0f', []]],
    'Ptr<TonemapMantiuk>']
ok: FUNC <Ptr_TonemapMantiuk cv..createTonemapMantiuk [ARG float gamma=1.0f, ARG float scale=0.7f, ARG float saturation=1.0f]>

--- Incoming ---
['class cv.AlignExposures', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.AlignExposures : Algorithm, name: AlignExposures, base: Algorithm

--- Incoming ---
[   'cv.AlignExposures.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/Ref']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.AlignExposures.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
['class cv.AlignMTB', ': cv::AlignExposures', [], [], None]
ok: class CLASS cv::.AlignMTB : AlignExposures, name: AlignMTB, base: AlignExposures

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/Ref']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=]>

--- Incoming ---
[   'cv.AlignMTB.calculateShift',
    'Point',
    ['/V', '/PV'],
    [['Mat', 'img0', '', []], ['Mat', 'img1', '', []]],
    'Point']
ok: FUNC <Point cv.AlignMTB.calculateShift [ARG Mat img0=, ARG Mat img1=]>

--- Incoming ---
[   'cv.AlignMTB.shiftMat',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point', 'shift', '', ['/C']]],
    'void']
ok: FUNC <void cv.AlignMTB.shiftMat [ARG Mat src=, ARG Mat dst=, ARG Point shift=]>

--- Incoming ---
[   'cv.AlignMTB.computeBitmaps',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'tb', '', ['/O']],
        ['Mat', 'eb', '', ['/O']]],
    'void']
ok: FUNC <void cv.AlignMTB.computeBitmaps [ARG Mat img=, ARG Mat tb=, ARG Mat eb=]>

--- Incoming ---
['cv.AlignMTB.getMaxBits', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AlignMTB.getMaxBits []>

--- Incoming ---
[   'cv.AlignMTB.setMaxBits',
    'void',
    ['/V', '/PV'],
    [['int', 'max_bits', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setMaxBits [ARG int max_bits=]>

--- Incoming ---
['cv.AlignMTB.getExcludeRange', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AlignMTB.getExcludeRange []>

--- Incoming ---
[   'cv.AlignMTB.setExcludeRange',
    'void',
    ['/V', '/PV'],
    [['int', 'exclude_range', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setExcludeRange [ARG int exclude_range=]>

--- Incoming ---
['cv.AlignMTB.getCut', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.AlignMTB.getCut []>

--- Incoming ---
[   'cv.AlignMTB.setCut',
    'void',
    ['/V', '/PV'],
    [['bool', 'value', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setCut [ARG bool value=]>

--- Incoming ---
[   'cv.createAlignMTB',
    'Ptr_AlignMTB',
    [],
    [   ['int', 'max_bits', '6', []],
        ['int', 'exclude_range', '4', []],
        ['bool', 'cut', 'true', []]],
    'Ptr<AlignMTB>']
ok: FUNC <Ptr_AlignMTB cv..createAlignMTB [ARG int max_bits=6, ARG int exclude_range=4, ARG bool cut=true]>

--- Incoming ---
['class cv.CalibrateCRF', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.CalibrateCRF : Algorithm, name: CalibrateCRF, base: Algorithm

--- Incoming ---
[   'cv.CalibrateCRF.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.CalibrateCRF.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['class cv.CalibrateDebevec', ': cv::CalibrateCRF', [], [], None]
ok: class CLASS cv::.CalibrateDebevec : CalibrateCRF, name: CalibrateDebevec, base: CalibrateCRF

--- Incoming ---
['cv.CalibrateDebevec.getLambda', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.CalibrateDebevec.getLambda []>

--- Incoming ---
[   'cv.CalibrateDebevec.setLambda',
    'void',
    ['/V', '/PV'],
    [['float', 'lambda', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setLambda [ARG float lambda=]>

--- Incoming ---
['cv.CalibrateDebevec.getSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.CalibrateDebevec.getSamples []>

--- Incoming ---
[   'cv.CalibrateDebevec.setSamples',
    'void',
    ['/V', '/PV'],
    [['int', 'samples', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setSamples [ARG int samples=]>

--- Incoming ---
['cv.CalibrateDebevec.getRandom', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.CalibrateDebevec.getRandom []>

--- Incoming ---
[   'cv.CalibrateDebevec.setRandom',
    'void',
    ['/V', '/PV'],
    [['bool', 'random', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setRandom [ARG bool random=]>

--- Incoming ---
[   'cv.createCalibrateDebevec',
    'Ptr_CalibrateDebevec',
    [],
    [   ['int', 'samples', '70', []],
        ['float', 'lambda', '10.0f', []],
        ['bool', 'random', 'false', []]],
    'Ptr<CalibrateDebevec>']
ok: FUNC <Ptr_CalibrateDebevec cv..createCalibrateDebevec [ARG int samples=70, ARG float lambda=10.0f, ARG bool random=false]>

--- Incoming ---
['class cv.CalibrateRobertson', ': cv::CalibrateCRF', [], [], None]
ok: class CLASS cv::.CalibrateRobertson : CalibrateCRF, name: CalibrateRobertson, base: CalibrateCRF

--- Incoming ---
['cv.CalibrateRobertson.getMaxIter', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.CalibrateRobertson.getMaxIter []>

--- Incoming ---
[   'cv.CalibrateRobertson.setMaxIter',
    'void',
    ['/V', '/PV'],
    [['int', 'max_iter', '', []]],
    'void']
ok: FUNC <void cv.CalibrateRobertson.setMaxIter [ARG int max_iter=]>

--- Incoming ---
[   'cv.CalibrateRobertson.getThreshold',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.CalibrateRobertson.getThreshold []>

--- Incoming ---
[   'cv.CalibrateRobertson.setThreshold',
    'void',
    ['/V', '/PV'],
    [['float', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.CalibrateRobertson.setThreshold [ARG float threshold=]>

--- Incoming ---
['cv.CalibrateRobertson.getRadiance', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.CalibrateRobertson.getRadiance []>

--- Incoming ---
[   'cv.createCalibrateRobertson',
    'Ptr_CalibrateRobertson',
    [],
    [['int', 'max_iter', '30', []], ['float', 'threshold', '0.01f', []]],
    'Ptr<CalibrateRobertson>']
ok: FUNC <Ptr_CalibrateRobertson cv..createCalibrateRobertson [ARG int max_iter=30, ARG float threshold=0.01f]>

--- Incoming ---
['class cv.MergeExposures', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.MergeExposures : Algorithm, name: MergeExposures, base: Algorithm

--- Incoming ---
[   'cv.MergeExposures.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeExposures.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
['class cv.MergeDebevec', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeDebevec : MergeExposures, name: MergeDebevec, base: MergeExposures

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['cv.createMergeDebevec', 'Ptr_MergeDebevec', [], [], 'Ptr<MergeDebevec>']
ok: FUNC <Ptr_MergeDebevec cv..createMergeDebevec []>

--- Incoming ---
['class cv.MergeMertens', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeMertens : MergeExposures, name: MergeMertens, base: MergeExposures

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
['cv.MergeMertens.getContrastWeight', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.MergeMertens.getContrastWeight []>

--- Incoming ---
[   'cv.MergeMertens.setContrastWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'contrast_weiht', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setContrastWeight [ARG float contrast_weiht=]>

--- Incoming ---
[   'cv.MergeMertens.getSaturationWeight',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.MergeMertens.getSaturationWeight []>

--- Incoming ---
[   'cv.MergeMertens.setSaturationWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation_weight', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setSaturationWeight [ARG float saturation_weight=]>

--- Incoming ---
['cv.MergeMertens.getExposureWeight', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.MergeMertens.getExposureWeight []>

--- Incoming ---
[   'cv.MergeMertens.setExposureWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'exposure_weight', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setExposureWeight [ARG float exposure_weight=]>

--- Incoming ---
[   'cv.createMergeMertens',
    'Ptr_MergeMertens',
    [],
    [   ['float', 'contrast_weight', '1.0f', []],
        ['float', 'saturation_weight', '1.0f', []],
        ['float', 'exposure_weight', '0.0f', []]],
    'Ptr<MergeMertens>']
ok: FUNC <Ptr_MergeMertens cv..createMergeMertens [ARG float contrast_weight=1.0f, ARG float saturation_weight=1.0f, ARG float exposure_weight=0.0f]>

--- Incoming ---
['class cv.MergeRobertson', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeRobertson : MergeExposures, name: MergeRobertson, base: MergeExposures

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['cv.createMergeRobertson', 'Ptr_MergeRobertson', [], [], 'Ptr<MergeRobertson>']
ok: FUNC <Ptr_MergeRobertson cv..createMergeRobertson []>

--- Incoming ---
[   'cv.decolor',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'grayscale', '', ['/O']],
        ['Mat', 'color_boost', '', ['/O']]],
    'void']
ok: FUNC <void cv..decolor [ARG Mat src=, ARG Mat grayscale=, ARG Mat color_boost=]>

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.NORMAL_CLONE', '1', [], [], None, ''],
        ['const cv.MIXED_CLONE', '2', [], [], None, ''],
        ['const cv.MONOCHROME_TRANSFER', '3', [], [], None, '']],
    None]
ok: CONST NORMAL_CLONE=1
ok: CONST MIXED_CLONE=2
ok: CONST MONOCHROME_TRANSFER=3

--- Incoming ---
[   'cv.seamlessClone',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['Mat', 'mask', '', []],
        ['Point', 'p', '', []],
        ['Mat', 'blend', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..seamlessClone [ARG Mat src=, ARG Mat dst=, ARG Mat mask=, ARG Point p=, ARG Mat blend=, ARG int flags=]>

--- Incoming ---
[   'cv.colorChange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'red_mul', '1.0f', []],
        ['float', 'green_mul', '1.0f', []],
        ['float', 'blue_mul', '1.0f', []]],
    'void']
ok: FUNC <void cv..colorChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float red_mul=1.0f, ARG float green_mul=1.0f, ARG float blue_mul=1.0f]>

--- Incoming ---
[   'cv.illuminationChange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'alpha', '0.2f', []],
        ['float', 'beta', '0.4f', []]],
    'void']
ok: FUNC <void cv..illuminationChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float alpha=0.2f, ARG float beta=0.4f]>

--- Incoming ---
[   'cv.textureFlattening',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'low_threshold', '30', []],
        ['float', 'high_threshold', '45', []],
        ['int', 'kernel_size', '3', []]],
    'void']
ok: FUNC <void cv..textureFlattening [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float low_threshold=30, ARG float high_threshold=45, ARG int kernel_size=3]>

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.RECURS_FILTER', '1', [], [], None, ''],
        ['const cv.NORMCONV_FILTER', '2', [], [], None, '']],
    None]
ok: CONST RECURS_FILTER=1
ok: CONST NORMCONV_FILTER=2

--- Incoming ---
[   'cv.edgePreservingFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '1', []],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.4f', []]],
    'void']
ok: FUNC <void cv..edgePreservingFilter [ARG Mat src=, ARG Mat dst=, ARG int flags=1, ARG float sigma_s=60, ARG float sigma_r=0.4f]>

--- Incoming ---
[   'cv.detailEnhance',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'sigma_s', '10', []],
        ['float', 'sigma_r', '0.15f', []]],
    'void']
ok: FUNC <void cv..detailEnhance [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=10, ARG float sigma_r=0.15f]>

--- Incoming ---
[   'cv.pencilSketch',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst1', '', ['/O']],
        ['Mat', 'dst2', '', ['/O']],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.07f', []],
        ['float', 'shade_factor', '0.02f', []]],
    'void']
ok: FUNC <void cv..pencilSketch [ARG Mat src=, ARG Mat dst1=, ARG Mat dst2=, ARG float sigma_s=60, ARG float sigma_r=0.07f, ARG float shade_factor=0.02f]>

--- Incoming ---
[   'cv.stylization',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.45f', []]],
    'void']
ok: FUNC <void cv..stylization [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=60, ARG float sigma_r=0.45f]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo/cuda.hpp =====
Namespaces: ['cv', 'cv.cuda']

--- Incoming ---
[   'cv.cuda.nonLocalMeans',
    'void',
    [],
    [   ['GpuMat', 'src', '', ['/C', '/Ref']],
        ['GpuMat', 'dst', '', ['/O', '/Ref']],
        ['float', 'h', '', []],
        ['int', 'search_window', '21', []],
        ['int', 'block_size', '7', []],
        ['int', 'borderMode', 'BORDER_DEFAULT', []],
        ['Stream', 'stream', 'Stream::Null()', ['/Ref']]],
    'void']
ok: FUNC <void cv.cuda..nonLocalMeans [ARG GpuMat src=, ARG GpuMat dst=, ARG float h=, ARG int search_window=21, ARG int block_size=7, ARG int borderMode=BORDER_DEFAULT, ARG Stream stream=Stream::Null()]>

--- Incoming ---
[   'cv.cuda.fastNlMeansDenoising',
    'void',
    [],
    [   ['GpuMat', 'src', '', ['/C', '/Ref']],
        ['GpuMat', 'dst', '', ['/O', '/Ref']],
        ['float', 'h', '', []],
        ['int', 'search_window', '21', []],
        ['int', 'block_size', '7', []],
        ['Stream', 'stream', 'Stream::Null()', ['/Ref']]],
    'void']
ok: FUNC <void cv.cuda..fastNlMeansDenoising [ARG GpuMat src=, ARG GpuMat dst=, ARG float h=, ARG int search_window=21, ARG int block_size=7, ARG Stream stream=Stream::Null()]>

--- Incoming ---
[   'cv.cuda.fastNlMeansDenoisingColored',
    'void',
    [],
    [   ['GpuMat', 'src', '', ['/C', '/Ref']],
        ['GpuMat', 'dst', '', ['/O', '/Ref']],
        ['float', 'h_luminance', '', []],
        ['float', 'photo_render', '', []],
        ['int', 'search_window', '21', []],
        ['int', 'block_size', '7', []],
        ['Stream', 'stream', 'Stream::Null()', ['/Ref']]],
    'void']
ok: FUNC <void cv.cuda..fastNlMeansDenoisingColored [ARG GpuMat src=, ARG GpuMat dst=, ARG float h_luminance=, ARG float photo_render=, ARG int search_window=21, ARG int block_size=7, ARG Stream stream=Stream::Null()]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo/photo.hpp =====
Namespaces: ['cv', 'cv.cuda']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/photo/include/opencv2/photo/photo.hpp


===== Generating... =====
CLASS cv::.AlignExposures : Algorithm
FUNC <void cv.AlignExposures.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, List<Mat> dst, Mat times, Mat response)
CLASS cv::.AlignMTB : AlignExposures
FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, List<Mat> dst, Mat times, Mat response)
FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=]>
java: void process(List<Mat> src, List<Mat> dst)
FUNC <Point cv.AlignMTB.calculateShift [ARG Mat img0=, ARG Mat img1=]>
java: Point calculateShift(Mat img0, Mat img1)
FUNC <void cv.AlignMTB.shiftMat [ARG Mat src=, ARG Mat dst=, ARG Point shift=]>
java: void shiftMat(Mat src, Mat dst, Point shift)
FUNC <void cv.AlignMTB.computeBitmaps [ARG Mat img=, ARG Mat tb=, ARG Mat eb=]>
java: void computeBitmaps(Mat img, Mat tb, Mat eb)
FUNC <int cv.AlignMTB.getMaxBits []>
java: int getMaxBits()
FUNC <void cv.AlignMTB.setMaxBits [ARG int max_bits=]>
java: void setMaxBits(int max_bits)
FUNC <int cv.AlignMTB.getExcludeRange []>
java: int getExcludeRange()
FUNC <void cv.AlignMTB.setExcludeRange [ARG int exclude_range=]>
java: void setExcludeRange(int exclude_range)
FUNC <bool cv.AlignMTB.getCut []>
java: boolean getCut()
FUNC <void cv.AlignMTB.setCut [ARG bool value=]>
java: void setCut(boolean value)
CLASS cv::.CalibrateCRF : Algorithm
FUNC <void cv.CalibrateCRF.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)
CLASS cv::.CalibrateDebevec : CalibrateCRF
FUNC <float cv.CalibrateDebevec.getLambda []>
java: float getLambda()
FUNC <void cv.CalibrateDebevec.setLambda [ARG float lambda=]>
java: void setLambda(float lambda)
FUNC <int cv.CalibrateDebevec.getSamples []>
java: int getSamples()
FUNC <void cv.CalibrateDebevec.setSamples [ARG int samples=]>
java: void setSamples(int samples)
FUNC <bool cv.CalibrateDebevec.getRandom []>
java: boolean getRandom()
FUNC <void cv.CalibrateDebevec.setRandom [ARG bool random=]>
java: void setRandom(boolean random)
CLASS cv::.CalibrateRobertson : CalibrateCRF
FUNC <int cv.CalibrateRobertson.getMaxIter []>
java: int getMaxIter()
FUNC <void cv.CalibrateRobertson.setMaxIter [ARG int max_iter=]>
java: void setMaxIter(int max_iter)
FUNC <float cv.CalibrateRobertson.getThreshold []>
java: float getThreshold()
FUNC <void cv.CalibrateRobertson.setThreshold [ARG float threshold=]>
java: void setThreshold(float threshold)
FUNC <Mat cv.CalibrateRobertson.getRadiance []>
java: Mat getRadiance()
CLASS cv::.MergeDebevec : MergeExposures
FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)
CLASS cv::.MergeExposures : Algorithm
FUNC <void cv.MergeExposures.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
CLASS cv::.MergeMertens : MergeExposures
FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=]>
java: void process(List<Mat> src, Mat dst)
FUNC <float cv.MergeMertens.getContrastWeight []>
java: float getContrastWeight()
FUNC <void cv.MergeMertens.setContrastWeight [ARG float contrast_weiht=]>
java: void setContrastWeight(float contrast_weiht)
FUNC <float cv.MergeMertens.getSaturationWeight []>
java: float getSaturationWeight()
FUNC <void cv.MergeMertens.setSaturationWeight [ARG float saturation_weight=]>
java: void setSaturationWeight(float saturation_weight)
FUNC <float cv.MergeMertens.getExposureWeight []>
java: float getExposureWeight()
FUNC <void cv.MergeMertens.setExposureWeight [ARG float exposure_weight=]>
java: void setExposureWeight(float exposure_weight)
CLASS cv::.MergeRobertson : MergeExposures
FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)
CLASS cv::.Photo : 
[CONST INPAINT_NS=0, CONST INPAINT_TELEA=1, CONST LDR_SIZE=256, CONST NORMAL_CLONE=1, CONST MIXED_CLONE=2, CONST MONOCHROME_TRANSFER=3, CONST RECURS_FILTER=1, CONST NORMCONV_FILTER=2]
FUNC <void cv..inpaint [ARG Mat src=, ARG Mat inpaintMask=, ARG Mat dst=, ARG double inpaintRadius=, ARG int flags=]>
java: void inpaint(Mat src, Mat inpaintMask, Mat dst, double inpaintRadius, int flags)
FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoising(Mat src, Mat dst, float h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, float h, int templateWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, float h)
java: void fastNlMeansDenoising(Mat src, Mat dst)
FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize, int searchWindowSize, int normType)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h)
FUNC <void cv..fastNlMeansDenoisingColored [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor, int templateWindowSize)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst)
FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize)
FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize, int searchWindowSize, int normType)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h)
FUNC <void cv..fastNlMeansDenoisingColoredMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize)
FUNC <void cv..denoise_TVL1 [ARG vector_Mat observations=, ARG Mat result=, ARG double lambda=1.0, ARG int niters=30]>
java: void denoise_TVL1(List<Mat> observations, Mat result, double lambda, int niters)
java: void denoise_TVL1(List<Mat> observations, Mat result, double lambda)
java: void denoise_TVL1(List<Mat> observations, Mat result)
FUNC <Ptr_Tonemap cv..createTonemap [ARG float gamma=1.0f]>
java: Tonemap createTonemap(float gamma)
java: Tonemap createTonemap()
FUNC <Ptr_TonemapDrago cv..createTonemapDrago [ARG float gamma=1.0f, ARG float saturation=1.0f, ARG float bias=0.85f]>
java: TonemapDrago createTonemapDrago(float gamma, float saturation, float bias)
java: TonemapDrago createTonemapDrago(float gamma, float saturation)
java: TonemapDrago createTonemapDrago(float gamma)
java: TonemapDrago createTonemapDrago()
FUNC <Ptr_TonemapReinhard cv..createTonemapReinhard [ARG float gamma=1.0f, ARG float intensity=0.0f, ARG float light_adapt=1.0f, ARG float color_adapt=0.0f]>
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity, float light_adapt, float color_adapt)
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity, float light_adapt)
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity)
java: TonemapReinhard createTonemapReinhard(float gamma)
java: TonemapReinhard createTonemapReinhard()
FUNC <Ptr_TonemapMantiuk cv..createTonemapMantiuk [ARG float gamma=1.0f, ARG float scale=0.7f, ARG float saturation=1.0f]>
java: TonemapMantiuk createTonemapMantiuk(float gamma, float scale, float saturation)
java: TonemapMantiuk createTonemapMantiuk(float gamma, float scale)
java: TonemapMantiuk createTonemapMantiuk(float gamma)
java: TonemapMantiuk createTonemapMantiuk()
FUNC <Ptr_AlignMTB cv..createAlignMTB [ARG int max_bits=6, ARG int exclude_range=4, ARG bool cut=true]>
java: AlignMTB createAlignMTB(int max_bits, int exclude_range, boolean cut)
java: AlignMTB createAlignMTB(int max_bits, int exclude_range)
java: AlignMTB createAlignMTB(int max_bits)
java: AlignMTB createAlignMTB()
FUNC <Ptr_CalibrateDebevec cv..createCalibrateDebevec [ARG int samples=70, ARG float lambda=10.0f, ARG bool random=false]>
java: CalibrateDebevec createCalibrateDebevec(int samples, float lambda, boolean random)
java: CalibrateDebevec createCalibrateDebevec(int samples, float lambda)
java: CalibrateDebevec createCalibrateDebevec(int samples)
java: CalibrateDebevec createCalibrateDebevec()
FUNC <Ptr_CalibrateRobertson cv..createCalibrateRobertson [ARG int max_iter=30, ARG float threshold=0.01f]>
java: CalibrateRobertson createCalibrateRobertson(int max_iter, float threshold)
java: CalibrateRobertson createCalibrateRobertson(int max_iter)
java: CalibrateRobertson createCalibrateRobertson()
FUNC <Ptr_MergeDebevec cv..createMergeDebevec []>
java: MergeDebevec createMergeDebevec()
FUNC <Ptr_MergeMertens cv..createMergeMertens [ARG float contrast_weight=1.0f, ARG float saturation_weight=1.0f, ARG float exposure_weight=0.0f]>
java: MergeMertens createMergeMertens(float contrast_weight, float saturation_weight, float exposure_weight)
java: MergeMertens createMergeMertens(float contrast_weight, float saturation_weight)
java: MergeMertens createMergeMertens(float contrast_weight)
java: MergeMertens createMergeMertens()
FUNC <Ptr_MergeRobertson cv..createMergeRobertson []>
java: MergeRobertson createMergeRobertson()
FUNC <void cv..decolor [ARG Mat src=, ARG Mat grayscale=, ARG Mat color_boost=]>
java: void decolor(Mat src, Mat grayscale, Mat color_boost)
FUNC <void cv..seamlessClone [ARG Mat src=, ARG Mat dst=, ARG Mat mask=, ARG Point p=, ARG Mat blend=, ARG int flags=]>
java: void seamlessClone(Mat src, Mat dst, Mat mask, Point p, Mat blend, int flags)
FUNC <void cv..colorChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float red_mul=1.0f, ARG float green_mul=1.0f, ARG float blue_mul=1.0f]>
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul, float green_mul, float blue_mul)
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul, float green_mul)
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul)
java: void colorChange(Mat src, Mat mask, Mat dst)
FUNC <void cv..illuminationChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float alpha=0.2f, ARG float beta=0.4f]>
java: void illuminationChange(Mat src, Mat mask, Mat dst, float alpha, float beta)
java: void illuminationChange(Mat src, Mat mask, Mat dst, float alpha)
java: void illuminationChange(Mat src, Mat mask, Mat dst)
FUNC <void cv..textureFlattening [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float low_threshold=30, ARG float high_threshold=45, ARG int kernel_size=3]>
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold, float high_threshold, int kernel_size)
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold, float high_threshold)
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold)
java: void textureFlattening(Mat src, Mat mask, Mat dst)
FUNC <void cv..edgePreservingFilter [ARG Mat src=, ARG Mat dst=, ARG int flags=1, ARG float sigma_s=60, ARG float sigma_r=0.4f]>
java: void edgePreservingFilter(Mat src, Mat dst, int flags, float sigma_s, float sigma_r)
java: void edgePreservingFilter(Mat src, Mat dst, int flags, float sigma_s)
java: void edgePreservingFilter(Mat src, Mat dst, int flags)
java: void edgePreservingFilter(Mat src, Mat dst)
FUNC <void cv..detailEnhance [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=10, ARG float sigma_r=0.15f]>
java: void detailEnhance(Mat src, Mat dst, float sigma_s, float sigma_r)
java: void detailEnhance(Mat src, Mat dst, float sigma_s)
java: void detailEnhance(Mat src, Mat dst)
FUNC <void cv..pencilSketch [ARG Mat src=, ARG Mat dst1=, ARG Mat dst2=, ARG float sigma_s=60, ARG float sigma_r=0.07f, ARG float shade_factor=0.02f]>
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s, float sigma_r, float shade_factor)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s, float sigma_r)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2)
FUNC <void cv..stylization [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=60, ARG float sigma_r=0.45f]>
java: void stylization(Mat src, Mat dst, float sigma_s, float sigma_r)
java: void stylization(Mat src, Mat dst, float sigma_s)
java: void stylization(Mat src, Mat dst)
FUNC <void cv.cuda..nonLocalMeans [ARG GpuMat src=, ARG GpuMat dst=, ARG float h=, ARG int search_window=21, ARG int block_size=7, ARG int borderMode=BORDER_DEFAULT, ARG Stream stream=Stream::Null()]>
SKIP:void cv::cuda::nonLocalMeans(GpuMat src, GpuMat& dst, float h, int search_window = 21, int block_size = 7, int borderMode = BORDER_DEFAULT, Stream stream = Stream::Null())	 due to ARG type GpuMat/I
FUNC <void cv.cuda..fastNlMeansDenoising [ARG GpuMat src=, ARG GpuMat dst=, ARG float h=, ARG int search_window=21, ARG int block_size=7, ARG Stream stream=Stream::Null()]>
SKIP:void cv::cuda::fastNlMeansDenoising(GpuMat src, GpuMat& dst, float h, int search_window = 21, int block_size = 7, Stream stream = Stream::Null())	 due to ARG type GpuMat/I
FUNC <void cv.cuda..fastNlMeansDenoisingColored [ARG GpuMat src=, ARG GpuMat dst=, ARG float h_luminance=, ARG float photo_render=, ARG int search_window=21, ARG int block_size=7, ARG Stream stream=Stream::Null()]>
SKIP:void cv::cuda::fastNlMeansDenoisingColored(GpuMat src, GpuMat& dst, float h_luminance, float photo_render, int search_window = 21, int block_size = 7, Stream stream = Stream::Null())	 due to ARG type GpuMat/I
CLASS cv::.Tonemap : Algorithm
FUNC <void cv.Tonemap.process [ARG Mat src=, ARG Mat dst=]>
java: void process(Mat src, Mat dst)
FUNC <float cv.Tonemap.getGamma []>
java: float getGamma()
FUNC <void cv.Tonemap.setGamma [ARG float gamma=]>
java: void setGamma(float gamma)
CLASS cv::.TonemapDrago : Tonemap
FUNC <float cv.TonemapDrago.getSaturation []>
java: float getSaturation()
FUNC <void cv.TonemapDrago.setSaturation [ARG float saturation=]>
java: void setSaturation(float saturation)
FUNC <float cv.TonemapDrago.getBias []>
java: float getBias()
FUNC <void cv.TonemapDrago.setBias [ARG float bias=]>
java: void setBias(float bias)
CLASS cv::.TonemapMantiuk : Tonemap
FUNC <float cv.TonemapMantiuk.getScale []>
java: float getScale()
FUNC <void cv.TonemapMantiuk.setScale [ARG float scale=]>
java: void setScale(float scale)
FUNC <float cv.TonemapMantiuk.getSaturation []>
java: float getSaturation()
FUNC <void cv.TonemapMantiuk.setSaturation [ARG float saturation=]>
java: void setSaturation(float saturation)
CLASS cv::.TonemapReinhard : Tonemap
FUNC <float cv.TonemapReinhard.getIntensity []>
java: float getIntensity()
FUNC <void cv.TonemapReinhard.setIntensity [ARG float intensity=]>
java: void setIntensity(float intensity)
FUNC <float cv.TonemapReinhard.getLightAdaptation []>
java: float getLightAdaptation()
FUNC <void cv.TonemapReinhard.setLightAdaptation [ARG float light_adapt=]>
java: void setLightAdaptation(float light_adapt)
FUNC <float cv.TonemapReinhard.getColorAdaptation []>
java: float getColorAdaptation()
FUNC <void cv.TonemapReinhard.setColorAdaptation [ARG float color_adapt=]>
java: void setColorAdaptation(float color_adapt)

=== MODULE: dnn (/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn) ===


Files (9):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/dnn.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/all_layers.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/dict.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/layer.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/version.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/utils/debug_utils.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/utils/inference_engine.hpp']

Common headers (1):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/misc/java/src/cpp/dnn_converters.hpp']
ok: class CLASS cv::.Dnn : , name: Dnn, base: 

===== Common header : /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/misc/java/src/cpp/dnn_converters.hpp =====


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn.hpp =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/dnn.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.accessor']

--- Incoming ---
[   'enum cv.dnn.Backend',
    '',
    [],
    [   ['const cv.dnn.DNN_BACKEND_DEFAULT', '0', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_HALIDE', '0+1', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_INFERENCE_ENGINE', '0+2', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_OPENCV', '0+3', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_VKCOM', '0+4', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_CUDA', '0+5', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_WEBNN', '0+6', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_TIMVX', '0+7', [], [], None, ''],
        ['const cv.dnn.DNN_BACKEND_CANN', '0+8', [], [], None, '']],
    None]
ok: CONST DNN_BACKEND_DEFAULT=0
ok: CONST DNN_BACKEND_HALIDE=0+1
ok: CONST DNN_BACKEND_INFERENCE_ENGINE=0+2
ok: CONST DNN_BACKEND_OPENCV=0+3
ok: CONST DNN_BACKEND_VKCOM=0+4
ok: CONST DNN_BACKEND_CUDA=0+5
ok: CONST DNN_BACKEND_WEBNN=0+6
ok: CONST DNN_BACKEND_TIMVX=0+7
ok: CONST DNN_BACKEND_CANN=0+8

--- Incoming ---
[   'enum cv.dnn.Target',
    '',
    [],
    [   ['const cv.dnn.DNN_TARGET_CPU', '0', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_OPENCL', '0+1', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_OPENCL_FP16', '0+2', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_MYRIAD', '0+3', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_VULKAN', '0+4', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_FPGA', '0+5', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_CUDA', '0+6', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_CUDA_FP16', '0+7', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_HDDL', '0+8', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_NPU', '0+9', [], [], None, ''],
        ['const cv.dnn.DNN_TARGET_CPU_FP16', '0+10', [], [], None, '']],
    None]
ok: CONST DNN_TARGET_CPU=0
ok: CONST DNN_TARGET_OPENCL=0+1
ok: CONST DNN_TARGET_OPENCL_FP16=0+2
ok: CONST DNN_TARGET_MYRIAD=0+3
ok: CONST DNN_TARGET_VULKAN=0+4
ok: CONST DNN_TARGET_FPGA=0+5
ok: CONST DNN_TARGET_CUDA=0+6
ok: CONST DNN_TARGET_CUDA_FP16=0+7
ok: CONST DNN_TARGET_HDDL=0+8
ok: CONST DNN_TARGET_NPU=0+9
ok: CONST DNN_TARGET_CPU_FP16=0+10

--- Incoming ---
[   'enum cv.dnn.DataLayout',
    '',
    [],
    [   ['const cv.dnn.DNN_LAYOUT_UNKNOWN', '0', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_ND', '1', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_NCHW', '2', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_NCDHW', '3', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_NHWC', '4', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_NDHWC', '5', [], [], None, ''],
        ['const cv.dnn.DNN_LAYOUT_PLANAR', '6', [], [], None, '']],
    None]
ok: CONST DNN_LAYOUT_UNKNOWN=0
ok: CONST DNN_LAYOUT_ND=1
ok: CONST DNN_LAYOUT_NCHW=2
ok: CONST DNN_LAYOUT_NCDHW=3
ok: CONST DNN_LAYOUT_NHWC=4
ok: CONST DNN_LAYOUT_NDHWC=5
ok: CONST DNN_LAYOUT_PLANAR=6

--- Incoming ---
[   'cv.dnn.getAvailableTargets',
    'vector_Target',
    [],
    [['dnn_Backend', 'be', '', []]],
    'std::vector<Target>']
ok: FUNC <vector_Target cv.dnn..getAvailableTargets [ARG dnn_Backend be=]>

--- Incoming ---
[   'class cv.dnn.Layer',
    ': cv::Algorithm',
    [],
    [   ['vector_Mat', 'blobs', '', ['/RW']],
        ['String', 'name', '', []],
        ['String', 'type', '', []],
        ['int', 'preferableTarget', '', []]],
    None]
ok: class CLASS cv.dnn::.Layer : Algorithm, name: Layer, base: Algorithm

--- Incoming ---
[   'cv.dnn.Layer.finalize',
    'void',
    ['/V'],
    [['vector_Mat', 'inputs', '', []], ['vector_Mat', 'outputs', '', ['/O']]],
    'void']
ok: FUNC <void cv.dnn.Layer.finalize [ARG vector_Mat inputs=, ARG vector_Mat outputs=]>

--- Incoming ---
[   'cv.dnn.Layer.run',
    'void',
    [],
    [   ['vector_Mat', 'inputs', '', ['/C', '/Ref']],
        ['vector_Mat', 'outputs', '', ['/O', '/Ref']],
        ['vector_Mat', 'internals', '', ['/IO', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Layer.run [ARG vector_Mat inputs=, ARG vector_Mat outputs=, ARG vector_Mat internals=]>

--- Incoming ---
[   'cv.dnn.Layer.outputNameToIndex',
    'int',
    ['/V'],
    [['String', 'outputName', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Layer.outputNameToIndex [ARG String outputName=]>

--- Incoming ---
['class cv.dnn.Net', '', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.Net : , name: Net, base: 

--- Incoming ---
['cv.dnn.Net.Net', '', [], [], None]
ok: FUNC < cv.dnn.Net.Net []>

--- Incoming ---
[   'cv.dnn.Net.readFromModelOptimizer',
    'Net',
    ['/S'],
    [   ['String', 'xml', '', ['/PATH', '/C', '/Ref']],
        ['String', 'bin', '', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG String xml=, ARG String bin=]>

--- Incoming ---
[   'cv.dnn.Net.readFromModelOptimizer',
    'Net',
    ['/S'],
    [   ['vector_uchar', 'bufferModelConfig', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferWeights', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG vector_uchar bufferModelConfig=, ARG vector_uchar bufferWeights=]>

--- Incoming ---
['cv.dnn.Net.empty', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.Net.empty []>

--- Incoming ---
['cv.dnn.Net.dump', 'String', [], [], 'String']
ok: FUNC <String cv.dnn.Net.dump []>

--- Incoming ---
[   'cv.dnn.Net.dumpToFile',
    'void',
    [],
    [['String', 'path', '', ['/PATH', '/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.dumpToFile [ARG String path=]>

--- Incoming ---
[   'cv.dnn.Net.dumpToPbtxt',
    'void',
    [],
    [['String', 'path', '', ['/PATH', '/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.dumpToPbtxt [ARG String path=]>

--- Incoming ---
[   'cv.dnn.Net.getLayerId',
    'int',
    ['/C'],
    [['String', 'layer', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Net.getLayerId [ARG String layer=]>

--- Incoming ---
['cv.dnn.Net.getLayerNames', 'vector_String', ['/C'], [], 'std::vector<String>']
ok: FUNC <vector_String cv.dnn.Net.getLayerNames []>

--- Incoming ---
[   'cv.dnn.Net.getLayer',
    'Ptr_Layer',
    ['/C'],
    [['int', 'layerId', '', []]],
    'Ptr<Layer>']
ok: FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG int layerId=]>

--- Incoming ---
[   'cv.dnn.Net.getLayer',
    'Ptr_Layer',
    ['/C'],
    [['String', 'layerName', '', ['/C', '/Ref']]],
    'Ptr<Layer>']
ok: FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG String layerName=]>

--- Incoming ---
[   'cv.dnn.Net.getLayer',
    'Ptr_Layer',
    ['/C'],
    [['LayerId', 'layerId', '', ['/C', '/Ref']]],
    'Ptr<Layer>']
ok: FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG LayerId layerId=]>

--- Incoming ---
[   'cv.dnn.Net.connect',
    'void',
    [],
    [['String', 'outPin', '', []], ['String', 'inpPin', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.connect [ARG String outPin=, ARG String inpPin=]>

--- Incoming ---
[   'cv.dnn.Net.setInputsNames',
    'void',
    [],
    [['vector_String', 'inputBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setInputsNames [ARG vector_String inputBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.setInputShape',
    'void',
    [],
    [   ['String', 'inputName', '', ['/C', '/Ref']],
        ['MatShape', 'shape', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setInputShape [ARG String inputName=, ARG MatShape shape=]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'Mat',
    [],
    [['String', 'outputName', 'String()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.dnn.Net.forward [ARG String outputName=String()]>

--- Incoming ---
[   'cv.dnn.Net.forwardAsync',
    'AsyncArray',
    [],
    [['String', 'outputName', 'String()', ['/C', '/Ref']]],
    'AsyncArray']
ok: FUNC <AsyncArray cv.dnn.Net.forwardAsync [ARG String outputName=String()]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    [],
    [   ['vector_Mat', 'outputBlobs', '', ['/O']],
        ['String', 'outputName', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG String outputName=String()]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    [],
    [   ['vector_Mat', 'outputBlobs', '', ['/O']],
        ['vector_String', 'outBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    ['=forwardAndRetrieve'],
    [   ['vector_vector_Mat', 'outputBlobs', '', ['/O', '/Ref']],
        ['vector_String', 'outBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.quantize',
    'Net',
    [],
    [   ['vector_Mat', 'calibData', '', []],
        ['int', 'inputsDtype', '', []],
        ['int', 'outputsDtype', '', []],
        ['bool', 'perChannel', 'true', []]],
    'Net']
ok: FUNC <Net cv.dnn.Net.quantize [ARG vector_Mat calibData=, ARG int inputsDtype=, ARG int outputsDtype=, ARG bool perChannel=true]>

--- Incoming ---
[   'cv.dnn.Net.getInputDetails',
    'void',
    ['/C'],
    [   ['vector_float', 'scales', '', ['/O', '/Ref']],
        ['vector_int', 'zeropoints', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getInputDetails [ARG vector_float scales=, ARG vector_int zeropoints=]>

--- Incoming ---
[   'cv.dnn.Net.getOutputDetails',
    'void',
    ['/C'],
    [   ['vector_float', 'scales', '', ['/O', '/Ref']],
        ['vector_int', 'zeropoints', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getOutputDetails [ARG vector_float scales=, ARG vector_int zeropoints=]>

--- Incoming ---
[   'cv.dnn.Net.setHalideScheduler',
    'void',
    [],
    [['String', 'scheduler', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setHalideScheduler [ARG String scheduler=]>

--- Incoming ---
[   'cv.dnn.Net.setPreferableBackend',
    'void',
    [],
    [['int', 'backendId', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.setPreferableBackend [ARG int backendId=]>

--- Incoming ---
[   'cv.dnn.Net.setPreferableTarget',
    'void',
    [],
    [['int', 'targetId', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.setPreferableTarget [ARG int targetId=]>

--- Incoming ---
[   'cv.dnn.Net.setInput',
    'void',
    [],
    [   ['Mat', 'blob', '', []],
        ['String', 'name', '""', ['/C', '/Ref']],
        ['double', 'scalefactor', '1.0', []],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setInput [ARG Mat blob=, ARG String name="", ARG double scalefactor=1.0, ARG Scalar mean=Scalar()]>

--- Incoming ---
[   'cv.dnn.Net.setParam',
    'void',
    [],
    [   ['int', 'layer', '', []],
        ['int', 'numParam', '', []],
        ['Mat', 'blob', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setParam [ARG int layer=, ARG int numParam=, ARG Mat blob=]>

--- Incoming ---
[   'cv.dnn.Net.setParam',
    'void',
    [],
    [   ['String', 'layerName', '', ['/C', '/Ref']],
        ['int', 'numParam', '', []],
        ['Mat', 'blob', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setParam [ARG String layerName=, ARG int numParam=, ARG Mat blob=]>

--- Incoming ---
[   'cv.dnn.Net.getParam',
    'Mat',
    ['/C'],
    [['int', 'layer', '', []], ['int', 'numParam', '0', []]],
    'Mat']
ok: FUNC <Mat cv.dnn.Net.getParam [ARG int layer=, ARG int numParam=0]>

--- Incoming ---
[   'cv.dnn.Net.getParam',
    'Mat',
    ['/C'],
    [['String', 'layerName', '', ['/C', '/Ref']], ['int', 'numParam', '0', []]],
    'Mat']
ok: FUNC <Mat cv.dnn.Net.getParam [ARG String layerName=, ARG int numParam=0]>

--- Incoming ---
[   'cv.dnn.Net.getUnconnectedOutLayers',
    'vector_int',
    ['/C'],
    [],
    'std::vector<int>']
ok: FUNC <vector_int cv.dnn.Net.getUnconnectedOutLayers []>

--- Incoming ---
[   'cv.dnn.Net.getUnconnectedOutLayersNames',
    'vector_String',
    ['/C'],
    [],
    'std::vector<String>']
ok: FUNC <vector_String cv.dnn.Net.getUnconnectedOutLayersNames []>

--- Incoming ---
[   'cv.dnn.Net.getLayersShapes',
    'void',
    ['/C'],
    [   ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']],
        ['vector_int', 'layersIds', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'inLayersShapes', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'outLayersShapes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayersShapes [ARG vector_MatShape netInputShapes=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getLayersShapes',
    'void',
    ['/C'],
    [   ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['vector_int', 'layersIds', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'inLayersShapes', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'outLayersShapes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayersShapes [ARG MatShape netInputShape=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG vector_MatShape netInputShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [['MatShape', 'netInputShape', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG MatShape netInputShape=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG vector_MatShape netInputShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['MatShape', 'netInputShape', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG MatShape netInputShape=]>

--- Incoming ---
[   'cv.dnn.Net.getLayerTypes',
    'void',
    ['/C'],
    [['vector_String', 'layersTypes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayerTypes [ARG vector_String layersTypes=]>

--- Incoming ---
[   'cv.dnn.Net.getLayersCount',
    'int',
    ['/C'],
    [['String', 'layerType', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Net.getLayersCount [ARG String layerType=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG vector_MatShape netInputShapes=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
['cv.dnn.Net.enableFusion', 'void', [], [['bool', 'fusion', '', []]], 'void']
ok: FUNC <void cv.dnn.Net.enableFusion [ARG bool fusion=]>

--- Incoming ---
[   'cv.dnn.Net.enableWinograd',
    'void',
    [],
    [['bool', 'useWinograd', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.enableWinograd [ARG bool useWinograd=]>

--- Incoming ---
[   'cv.dnn.Net.getPerfProfile',
    'int64',
    [],
    [['vector_double', 'timings', '', ['/O', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getPerfProfile [ARG vector_double timings=]>

--- Incoming ---
[   'cv.dnn.readNetFromDarknet',
    'Net',
    [],
    [   ['String', 'cfgFile', '', ['/PATH', '/C', '/Ref']],
        ['String', 'darknetModel', 'String()', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromDarknet [ARG String cfgFile=, ARG String darknetModel=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromDarknet',
    'Net',
    [],
    [   ['vector_uchar', 'bufferCfg', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferModel',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromDarknet [ARG vector_uchar bufferCfg=, ARG vector_uchar bufferModel=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromCaffe',
    'Net',
    [],
    [   ['String', 'prototxt', '', ['/PATH', '/C', '/Ref']],
        ['String', 'caffeModel', 'String()', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromCaffe [ARG String prototxt=, ARG String caffeModel=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromCaffe',
    'Net',
    [],
    [   ['vector_uchar', 'bufferProto', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferModel',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromCaffe [ARG vector_uchar bufferProto=, ARG vector_uchar bufferModel=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromTensorflow',
    'Net',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', 'String()', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTensorflow [ARG String model=, ARG String config=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromTensorflow',
    'Net',
    [],
    [   ['vector_uchar', 'bufferModel', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferConfig',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTensorflow [ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromTFLite',
    'Net',
    [],
    [['String', 'model', '', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTFLite [ARG String model=]>

--- Incoming ---
[   'cv.dnn.readNetFromTFLite',
    'Net',
    [],
    [['vector_uchar', 'bufferModel', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTFLite [ARG vector_uchar bufferModel=]>

--- Incoming ---
[   'cv.dnn.readNetFromTorch',
    'Net',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['bool', 'isBinary', 'true', []],
        ['bool', 'evaluate', 'true', []]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTorch [ARG String model=, ARG bool isBinary=true, ARG bool evaluate=true]>

--- Incoming ---
[   'cv.dnn.readNet',
    'Net',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']],
        ['String', 'framework', '""', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNet [ARG String model=, ARG String config="", ARG String framework=""]>

--- Incoming ---
[   'cv.dnn.readNet',
    'Net',
    [],
    [   ['String', 'framework', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferModel', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferConfig',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNet [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readTorchBlob',
    'Mat',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['bool', 'isBinary', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..readTorchBlob [ARG String filename=, ARG bool isBinary=true]>

--- Incoming ---
[   'cv.dnn.readNetFromModelOptimizer',
    'Net',
    [],
    [   ['String', 'xml', '', ['/PATH', '/C', '/Ref']],
        ['String', 'bin', '""', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG String xml=, ARG String bin=""]>

--- Incoming ---
[   'cv.dnn.readNetFromModelOptimizer',
    'Net',
    [],
    [   ['vector_uchar', 'bufferModelConfig', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferWeights', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG vector_uchar bufferModelConfig=, ARG vector_uchar bufferWeights=]>

--- Incoming ---
[   'cv.dnn.readNetFromONNX',
    'Net',
    [],
    [['String', 'onnxFile', '', ['/PATH', '/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromONNX [ARG String onnxFile=]>

--- Incoming ---
[   'cv.dnn.readNetFromONNX',
    'Net',
    [],
    [['vector_uchar', 'buffer', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromONNX [ARG vector_uchar buffer=]>

--- Incoming ---
[   'cv.dnn.readTensorFromONNX',
    'Mat',
    [],
    [['String', 'path', '', ['/PATH', '/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.dnn..readTensorFromONNX [ARG String path=]>

--- Incoming ---
[   'cv.dnn.blobFromImage',
    'Mat',
    [],
    [   ['Mat', 'image', '', []],
        ['double', 'scalefactor', '1.0', []],
        ['Size', 'size', 'Size()', ['/C', '/Ref']],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'false', []],
        ['bool', 'crop', 'false', []],
        ['int', 'ddepth', 'CV_32F', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImage [ARG Mat image=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false, ARG int ddepth=CV_32F]>

--- Incoming ---
[   'cv.dnn.blobFromImages',
    'Mat',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['double', 'scalefactor', '1.0', []],
        ['Size', 'size', 'Size()', []],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'false', []],
        ['bool', 'crop', 'false', []],
        ['int', 'ddepth', 'CV_32F', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImages [ARG vector_Mat images=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false, ARG int ddepth=CV_32F]>

--- Incoming ---
[   'enum cv.dnn.ImagePaddingMode',
    '',
    [],
    [   ['const cv.dnn.DNN_PMODE_NULL', '0', [], [], None, ''],
        ['const cv.dnn.DNN_PMODE_CROP_CENTER', '1', [], [], None, ''],
        ['const cv.dnn.DNN_PMODE_LETTERBOX', '2', [], [], None, '']],
    None]
ok: CONST DNN_PMODE_NULL=0
ok: CONST DNN_PMODE_CROP_CENTER=1
ok: CONST DNN_PMODE_LETTERBOX=2

--- Incoming ---
[   'struct cv.dnn.Image2BlobParams',
    '',
    ['/Simple'],
    [   ['Scalar', 'scalefactor', '', ['/RW']],
        ['Size', 'size', '', ['/RW']],
        ['Scalar', 'mean', '', ['/RW']],
        ['bool', 'swapRB', '', ['/RW']],
        ['int', 'ddepth', '', ['/RW']],
        ['DataLayout', 'datalayout', '', ['/RW']],
        ['ImagePaddingMode', 'paddingmode', '', ['/RW']],
        ['Scalar', 'borderValue', '', ['/RW']]],
    None]
ok: class CLASS cv.dnn::.Image2BlobParams : , name: Image2BlobParams, base: 

--- Incoming ---
['cv.dnn.Image2BlobParams.Image2BlobParams', '', [], [], None]
ok: FUNC < cv.dnn.Image2BlobParams.Image2BlobParams []>

--- Incoming ---
[   'cv.dnn.Image2BlobParams.Image2BlobParams',
    '',
    [],
    [   ['Scalar', 'scalefactor', '', ['/C', '/Ref']],
        ['Size', 'size', 'Size()', ['/C', '/Ref']],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'false', []],
        ['int', 'ddepth', 'CV_32F', []],
        ['DataLayout', 'datalayout', 'DNN_LAYOUT_NCHW', []],
        ['ImagePaddingMode', 'mode', 'DNN_PMODE_NULL', []],
        ['Scalar', 'borderValue', '0.0', []]],
    None]
ok: FUNC < cv.dnn.Image2BlobParams.Image2BlobParams [ARG Scalar scalefactor=, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG int ddepth=CV_32F, ARG DataLayout datalayout=DNN_LAYOUT_NCHW, ARG ImagePaddingMode mode=DNN_PMODE_NULL, ARG Scalar borderValue=0.0]>

--- Incoming ---
[   'cv.dnn.Image2BlobParams.blobRectToImageRect',
    'Rect',
    [],
    [   ['Rect', 'rBlob', '', ['/C', '/Ref']],
        ['Size', 'size', '', ['/C', '/Ref']]],
    'Rect']
ok: FUNC <Rect cv.dnn.Image2BlobParams.blobRectToImageRect [ARG Rect rBlob=, ARG Size size=]>

--- Incoming ---
[   'cv.dnn.Image2BlobParams.blobRectsToImageRects',
    'void',
    [],
    [   ['vector_Rect', 'rBlob', '', ['/C', '/Ref']],
        ['vector_Rect', 'rImg', '', ['/O', '/Ref']],
        ['Size', 'size', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Image2BlobParams.blobRectsToImageRects [ARG vector_Rect rBlob=, ARG vector_Rect rImg=, ARG Size size=]>

--- Incoming ---
[   'cv.dnn.blobFromImageWithParams',
    'Mat',
    [],
    [   ['Mat', 'image', '', []],
        ['Image2BlobParams', 'param', 'Image2BlobParams()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImageWithParams [ARG Mat image=, ARG Image2BlobParams param=Image2BlobParams()]>

--- Incoming ---
[   'cv.dnn.blobFromImageWithParams',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'blob', '', ['/O']],
        ['Image2BlobParams', 'param', 'Image2BlobParams()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn..blobFromImageWithParams [ARG Mat image=, ARG Mat blob=, ARG Image2BlobParams param=Image2BlobParams()]>

--- Incoming ---
[   'cv.dnn.blobFromImagesWithParams',
    'Mat',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['Image2BlobParams', 'param', 'Image2BlobParams()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImagesWithParams [ARG vector_Mat images=, ARG Image2BlobParams param=Image2BlobParams()]>

--- Incoming ---
[   'cv.dnn.blobFromImagesWithParams',
    'void',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['Mat', 'blob', '', ['/O']],
        ['Image2BlobParams', 'param', 'Image2BlobParams()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn..blobFromImagesWithParams [ARG vector_Mat images=, ARG Mat blob=, ARG Image2BlobParams param=Image2BlobParams()]>

--- Incoming ---
[   'cv.dnn.imagesFromBlob',
    'void',
    [],
    [   ['Mat', 'blob_', '', ['/C', '/Ref']],
        ['vector_Mat', 'images_', '', ['/O']]],
    'void']
ok: FUNC <void cv.dnn..imagesFromBlob [ARG Mat blob_=, ARG vector_Mat images_=]>

--- Incoming ---
[   'cv.dnn.shrinkCaffeModel',
    'void',
    [],
    [   ['String', 'src', '', ['/PATH', '/C', '/Ref']],
        ['String', 'dst', '', ['/PATH', '/C', '/Ref']],
        [   'vector_String',
            'layersTypes',
            'std::vector<String>()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn..shrinkCaffeModel [ARG String src=, ARG String dst=, ARG vector_String layersTypes=std::vector<String>()]>

--- Incoming ---
[   'cv.dnn.writeTextGraph',
    'void',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'output', '', ['/PATH', '/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn..writeTextGraph [ARG String model=, ARG String output=]>

--- Incoming ---
[   'cv.dnn.NMSBoxes',
    'void',
    [],
    [   ['vector_Rect2d', 'bboxes', '', ['/C', '/Ref']],
        ['vector_float', 'scores', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '', ['/C']],
        ['float', 'nms_threshold', '', ['/C']],
        ['vector_int', 'indices', '', ['/O', '/Ref']],
        ['float', 'eta', '1.f', ['/C']],
        ['int', 'top_k', '0', ['/C']]],
    'void']
ok: FUNC <void cv.dnn..NMSBoxes [ARG vector_Rect2d bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>

--- Incoming ---
[   'cv.dnn.NMSBoxes',
    'void',
    ['=NMSBoxesRotated'],
    [   ['vector_RotatedRect', 'bboxes', '', ['/C', '/Ref']],
        ['vector_float', 'scores', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '', ['/C']],
        ['float', 'nms_threshold', '', ['/C']],
        ['vector_int', 'indices', '', ['/O', '/Ref']],
        ['float', 'eta', '1.f', ['/C']],
        ['int', 'top_k', '0', ['/C']]],
    'void']
ok: FUNC <void cv.dnn..NMSBoxes [ARG vector_RotatedRect bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>

--- Incoming ---
[   'cv.dnn.NMSBoxesBatched',
    'void',
    [],
    [   ['vector_Rect2d', 'bboxes', '', ['/C', '/Ref']],
        ['vector_float', 'scores', '', ['/C', '/Ref']],
        ['vector_int', 'class_ids', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '', ['/C']],
        ['float', 'nms_threshold', '', ['/C']],
        ['vector_int', 'indices', '', ['/O', '/Ref']],
        ['float', 'eta', '1.f', ['/C']],
        ['int', 'top_k', '0', ['/C']]],
    'void']
ok: FUNC <void cv.dnn..NMSBoxesBatched [ARG vector_Rect2d bboxes=, ARG vector_float scores=, ARG vector_int class_ids=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>

--- Incoming ---
[   'enum class cv.dnn.SoftNMSMethod',
    '',
    [],
    [   ['const cv.dnn.SoftNMSMethod.SOFTNMS_LINEAR', '1', [], [], None, ''],
        ['const cv.dnn.SoftNMSMethod.SOFTNMS_GAUSSIAN', '2', [], [], None, '']],
    None]
class not found: CONST SOFTNMS_LINEAR=1
ok: CONST SoftNMSMethod_SOFTNMS_LINEAR=1
class not found: CONST SOFTNMS_GAUSSIAN=2
ok: CONST SoftNMSMethod_SOFTNMS_GAUSSIAN=2

--- Incoming ---
[   'cv.dnn.softNMSBoxes',
    'void',
    [],
    [   ['vector_Rect', 'bboxes', '', ['/C', '/Ref']],
        ['vector_float', 'scores', '', ['/C', '/Ref']],
        ['vector_float', 'updated_scores', '', ['/O', '/Ref']],
        ['float', 'score_threshold', '', ['/C']],
        ['float', 'nms_threshold', '', ['/C']],
        ['vector_int', 'indices', '', ['/O', '/Ref']],
        ['size_t', 'top_k', '0', []],
        ['float', 'sigma', '0.5', ['/C']],
        ['SoftNMSMethod', 'method', 'SoftNMSMethod::SOFTNMS_GAUSSIAN', []]],
    'void']
ok: FUNC <void cv.dnn..softNMSBoxes [ARG vector_Rect bboxes=, ARG vector_float scores=, ARG vector_float updated_scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG size_t top_k=0, ARG float sigma=0.5, ARG SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN]>

--- Incoming ---
['class cv.dnn.Model', '', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.Model : , name: Model, base: 

--- Incoming ---
[   'cv.dnn.Model.Model',
    '',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.Model.Model [ARG String model=, ARG String config=""]>

--- Incoming ---
['cv.dnn.Model.Model', '', [], [['Net', 'network', '', ['/C', '/Ref']]], None]
ok: FUNC < cv.dnn.Model.Model [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.Model.setInputSize',
    'Model',
    [],
    [['Size', 'size', '', ['/C', '/Ref']]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setInputSize [ARG Size size=]>

--- Incoming ---
[   'cv.dnn.Model.setInputSize',
    'Model',
    [],
    [['int', 'width', '', []], ['int', 'height', '', []]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setInputSize [ARG int width=, ARG int height=]>

--- Incoming ---
[   'cv.dnn.Model.setInputMean',
    'Model',
    [],
    [['Scalar', 'mean', '', ['/C', '/Ref']]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setInputMean [ARG Scalar mean=]>

--- Incoming ---
[   'cv.dnn.Model.setInputScale',
    'Model',
    [],
    [['Scalar', 'scale', '', ['/C', '/Ref']]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setInputScale [ARG Scalar scale=]>

--- Incoming ---
['cv.dnn.Model.setInputCrop', 'Model', [], [['bool', 'crop', '', []]], 'Model']
ok: FUNC <Model cv.dnn.Model.setInputCrop [ARG bool crop=]>

--- Incoming ---
[   'cv.dnn.Model.setInputSwapRB',
    'Model',
    [],
    [['bool', 'swapRB', '', []]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setInputSwapRB [ARG bool swapRB=]>

--- Incoming ---
[   'cv.dnn.Model.setOutputNames',
    'Model',
    [],
    [['vector_String', 'outNames', '', ['/C', '/Ref']]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setOutputNames [ARG vector_String outNames=]>

--- Incoming ---
[   'cv.dnn.Model.setInputParams',
    'void',
    [],
    [   ['double', 'scale', '1.0', []],
        ['Size', 'size', 'Size()', ['/C', '/Ref']],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'false', []],
        ['bool', 'crop', 'false', []]],
    'void']
ok: FUNC <void cv.dnn.Model.setInputParams [ARG double scale=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false]>

--- Incoming ---
[   'cv.dnn.Model.predict',
    'void',
    ['/C'],
    [['Mat', 'frame', '', []], ['vector_Mat', 'outs', '', ['/O']]],
    'void']
ok: FUNC <void cv.dnn.Model.predict [ARG Mat frame=, ARG vector_Mat outs=]>

--- Incoming ---
[   'cv.dnn.Model.setPreferableBackend',
    'Model',
    [],
    [['dnn_Backend', 'backendId', '', []]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setPreferableBackend [ARG dnn_Backend backendId=]>

--- Incoming ---
[   'cv.dnn.Model.setPreferableTarget',
    'Model',
    [],
    [['dnn_Target', 'targetId', '', []]],
    'Model']
ok: FUNC <Model cv.dnn.Model.setPreferableTarget [ARG dnn_Target targetId=]>

--- Incoming ---
[   'cv.dnn.Model.enableWinograd',
    'Model',
    [],
    [['bool', 'useWinograd', '', []]],
    'Model']
ok: FUNC <Model cv.dnn.Model.enableWinograd [ARG bool useWinograd=]>

--- Incoming ---
['class cv.dnn.ClassificationModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.ClassificationModel : Model, name: ClassificationModel, base: Model

--- Incoming ---
[   'cv.dnn.ClassificationModel.ClassificationModel',
    '',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.ClassificationModel.ClassificationModel [ARG String model=, ARG String config=""]>

--- Incoming ---
[   'cv.dnn.ClassificationModel.ClassificationModel',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.ClassificationModel.ClassificationModel [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.ClassificationModel.setEnableSoftmaxPostProcessing',
    'ClassificationModel',
    [],
    [['bool', 'enable', '', []]],
    'ClassificationModel']
ok: FUNC <ClassificationModel cv.dnn.ClassificationModel.setEnableSoftmaxPostProcessing [ARG bool enable=]>

--- Incoming ---
[   'cv.dnn.ClassificationModel.getEnableSoftmaxPostProcessing',
    'bool',
    ['/C'],
    [],
    'bool']
ok: FUNC <bool cv.dnn.ClassificationModel.getEnableSoftmaxPostProcessing []>

--- Incoming ---
[   'cv.dnn.ClassificationModel.classify',
    'void',
    [],
    [   ['Mat', 'frame', '', []],
        ['int', 'classId', '', ['/O', '/Ref']],
        ['float', 'conf', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.ClassificationModel.classify [ARG Mat frame=, ARG int classId=, ARG float conf=]>

--- Incoming ---
['class cv.dnn.KeypointsModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.KeypointsModel : Model, name: KeypointsModel, base: Model

--- Incoming ---
[   'cv.dnn.KeypointsModel.KeypointsModel',
    '',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.KeypointsModel.KeypointsModel [ARG String model=, ARG String config=""]>

--- Incoming ---
[   'cv.dnn.KeypointsModel.KeypointsModel',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.KeypointsModel.KeypointsModel [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.KeypointsModel.estimate',
    'vector_Point2f',
    [],
    [['Mat', 'frame', '', []], ['float', 'thresh', '0.5', []]],
    'std::vector<Point2f>']
ok: FUNC <vector_Point2f cv.dnn.KeypointsModel.estimate [ARG Mat frame=, ARG float thresh=0.5]>

--- Incoming ---
['class cv.dnn.SegmentationModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.SegmentationModel : Model, name: SegmentationModel, base: Model

--- Incoming ---
[   'cv.dnn.SegmentationModel.SegmentationModel',
    '',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.SegmentationModel.SegmentationModel [ARG String model=, ARG String config=""]>

--- Incoming ---
[   'cv.dnn.SegmentationModel.SegmentationModel',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.SegmentationModel.SegmentationModel [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.SegmentationModel.segment',
    'void',
    [],
    [['Mat', 'frame', '', []], ['Mat', 'mask', '', ['/O']]],
    'void']
ok: FUNC <void cv.dnn.SegmentationModel.segment [ARG Mat frame=, ARG Mat mask=]>

--- Incoming ---
['class cv.dnn.DetectionModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.DetectionModel : Model, name: DetectionModel, base: Model

--- Incoming ---
[   'cv.dnn.DetectionModel.DetectionModel',
    '',
    [],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.DetectionModel.DetectionModel [ARG String model=, ARG String config=""]>

--- Incoming ---
[   'cv.dnn.DetectionModel.DetectionModel',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.DetectionModel.DetectionModel [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.DetectionModel.setNmsAcrossClasses',
    'DetectionModel',
    [],
    [['bool', 'value', '', []]],
    'DetectionModel']
ok: FUNC <DetectionModel cv.dnn.DetectionModel.setNmsAcrossClasses [ARG bool value=]>

--- Incoming ---
['cv.dnn.DetectionModel.getNmsAcrossClasses', 'bool', [], [], 'bool']
ok: FUNC <bool cv.dnn.DetectionModel.getNmsAcrossClasses []>

--- Incoming ---
[   'cv.dnn.DetectionModel.detect',
    'void',
    [],
    [   ['Mat', 'frame', '', []],
        ['vector_int', 'classIds', '', ['/O', '/Ref']],
        ['vector_float', 'confidences', '', ['/O', '/Ref']],
        ['vector_Rect', 'boxes', '', ['/O', '/Ref']],
        ['float', 'confThreshold', '0.5f', []],
        ['float', 'nmsThreshold', '0.0f', []]],
    'void']
ok: FUNC <void cv.dnn.DetectionModel.detect [ARG Mat frame=, ARG vector_int classIds=, ARG vector_float confidences=, ARG vector_Rect boxes=, ARG float confThreshold=0.5f, ARG float nmsThreshold=0.0f]>

--- Incoming ---
['class cv.dnn.TextRecognitionModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.TextRecognitionModel : Model, name: TextRecognitionModel, base: Model

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.TextRecognitionModel',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextRecognitionModel.TextRecognitionModel [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.TextRecognitionModel',
    '',
    [],
    [   ['string', 'model', '', ['/PATH', '/C', '/Ref']],
        ['string', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextRecognitionModel.TextRecognitionModel [ARG string model=, ARG string config=""]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.setDecodeType',
    'TextRecognitionModel',
    [],
    [['string', 'decodeType', '', ['/C', '/Ref']]],
    'TextRecognitionModel']
ok: FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setDecodeType [ARG string decodeType=]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.getDecodeType',
    'string',
    ['/C'],
    [],
    'std::string']
ok: FUNC <string cv.dnn.TextRecognitionModel.getDecodeType []>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.setDecodeOptsCTCPrefixBeamSearch',
    'TextRecognitionModel',
    [],
    [['int', 'beamSize', '', []], ['int', 'vocPruneSize', '0', []]],
    'TextRecognitionModel']
ok: FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setDecodeOptsCTCPrefixBeamSearch [ARG int beamSize=, ARG int vocPruneSize=0]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.setVocabulary',
    'TextRecognitionModel',
    [],
    [['vector_string', 'vocabulary', '', ['/C', '/Ref']]],
    'TextRecognitionModel']
ok: FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setVocabulary [ARG vector_string vocabulary=]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.getVocabulary',
    'vector_string',
    ['/C'],
    [],
    'std::vector<std::string>']
ok: FUNC <vector_string cv.dnn.TextRecognitionModel.getVocabulary []>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.recognize',
    'string',
    ['/C'],
    [['Mat', 'frame', '', []]],
    'std::string']
ok: FUNC <string cv.dnn.TextRecognitionModel.recognize [ARG Mat frame=]>

--- Incoming ---
[   'cv.dnn.TextRecognitionModel.recognize',
    'void',
    ['/C'],
    [   ['Mat', 'frame', '', []],
        ['vector_Mat', 'roiRects', '', []],
        ['vector_string', 'results', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.TextRecognitionModel.recognize [ARG Mat frame=, ARG vector_Mat roiRects=, ARG vector_string results=]>

--- Incoming ---
['class cv.dnn.TextDetectionModel', ': cv::dnn::Model', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.TextDetectionModel : Model, name: TextDetectionModel, base: Model

--- Incoming ---
[   'cv.dnn.TextDetectionModel.detect',
    'void',
    ['/C'],
    [   ['Mat', 'frame', '', []],
        ['vector_vector_Point', 'detections', '', ['/O', '/Ref']],
        ['vector_float', 'confidences', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.TextDetectionModel.detect [ARG Mat frame=, ARG vector_vector_Point detections=, ARG vector_float confidences=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel.detect',
    'void',
    ['/C'],
    [   ['Mat', 'frame', '', []],
        ['vector_vector_Point', 'detections', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.TextDetectionModel.detect [ARG Mat frame=, ARG vector_vector_Point detections=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel.detectTextRectangles',
    'void',
    ['/C'],
    [   ['Mat', 'frame', '', []],
        ['vector_RotatedRect', 'detections', '', ['/O', '/Ref']],
        ['vector_float', 'confidences', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.TextDetectionModel.detectTextRectangles [ARG Mat frame=, ARG vector_RotatedRect detections=, ARG vector_float confidences=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel.detectTextRectangles',
    'void',
    ['/C'],
    [   ['Mat', 'frame', '', []],
        ['vector_RotatedRect', 'detections', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.TextDetectionModel.detectTextRectangles [ARG Mat frame=, ARG vector_RotatedRect detections=]>

--- Incoming ---
[   'class cv.dnn.TextDetectionModel_EAST',
    ': cv::dnn::TextDetectionModel',
    ['/Simple'],
    [],
    None]
ok: class CLASS cv.dnn::.TextDetectionModel_EAST : TextDetectionModel, name: TextDetectionModel_EAST, base: TextDetectionModel

--- Incoming ---
[   'cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST',
    '',
    [],
    [   ['string', 'model', '', ['/PATH', '/C', '/Ref']],
        ['string', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST [ARG string model=, ARG string config=""]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_EAST.setConfidenceThreshold',
    'TextDetectionModel_EAST',
    [],
    [['float', 'confThreshold', '', []]],
    'TextDetectionModel_EAST']
ok: FUNC <TextDetectionModel_EAST cv.dnn.TextDetectionModel_EAST.setConfidenceThreshold [ARG float confThreshold=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_EAST.getConfidenceThreshold',
    'float',
    ['/C'],
    [],
    'float']
ok: FUNC <float cv.dnn.TextDetectionModel_EAST.getConfidenceThreshold []>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_EAST.setNMSThreshold',
    'TextDetectionModel_EAST',
    [],
    [['float', 'nmsThreshold', '', []]],
    'TextDetectionModel_EAST']
ok: FUNC <TextDetectionModel_EAST cv.dnn.TextDetectionModel_EAST.setNMSThreshold [ARG float nmsThreshold=]>

--- Incoming ---
['cv.dnn.TextDetectionModel_EAST.getNMSThreshold', 'float', ['/C'], [], 'float']
ok: FUNC <float cv.dnn.TextDetectionModel_EAST.getNMSThreshold []>

--- Incoming ---
[   'class cv.dnn.TextDetectionModel_DB',
    ': cv::dnn::TextDetectionModel',
    ['/Simple'],
    [],
    None]
ok: class CLASS cv.dnn::.TextDetectionModel_DB : TextDetectionModel, name: TextDetectionModel_DB, base: TextDetectionModel

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB',
    '',
    [],
    [['Net', 'network', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB [ARG Net network=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB',
    '',
    [],
    [   ['string', 'model', '', ['/PATH', '/C', '/Ref']],
        ['string', 'config', '""', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB [ARG string model=, ARG string config=""]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.setBinaryThreshold',
    'TextDetectionModel_DB',
    [],
    [['float', 'binaryThreshold', '', []]],
    'TextDetectionModel_DB']
ok: FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setBinaryThreshold [ARG float binaryThreshold=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.getBinaryThreshold',
    'float',
    ['/C'],
    [],
    'float']
ok: FUNC <float cv.dnn.TextDetectionModel_DB.getBinaryThreshold []>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.setPolygonThreshold',
    'TextDetectionModel_DB',
    [],
    [['float', 'polygonThreshold', '', []]],
    'TextDetectionModel_DB']
ok: FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setPolygonThreshold [ARG float polygonThreshold=]>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.getPolygonThreshold',
    'float',
    ['/C'],
    [],
    'float']
ok: FUNC <float cv.dnn.TextDetectionModel_DB.getPolygonThreshold []>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.setUnclipRatio',
    'TextDetectionModel_DB',
    [],
    [['double', 'unclipRatio', '', []]],
    'TextDetectionModel_DB']
ok: FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setUnclipRatio [ARG double unclipRatio=]>

--- Incoming ---
['cv.dnn.TextDetectionModel_DB.getUnclipRatio', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.dnn.TextDetectionModel_DB.getUnclipRatio []>

--- Incoming ---
[   'cv.dnn.TextDetectionModel_DB.setMaxCandidates',
    'TextDetectionModel_DB',
    [],
    [['int', 'maxCandidates', '', []]],
    'TextDetectionModel_DB']
ok: FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setMaxCandidates [ARG int maxCandidates=]>

--- Incoming ---
['cv.dnn.TextDetectionModel_DB.getMaxCandidates', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.dnn.TextDetectionModel_DB.getMaxCandidates []>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/all_layers.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.accessor']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/all_layers.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/dict.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.accessor']

--- Incoming ---
['struct cv.dnn.DictValue', '', [], [], None]
ok: class CLASS cv.dnn::.DictValue : , name: DictValue, base: 

--- Incoming ---
['cv.dnn.DictValue.DictValue', '', [], [['int', 'i', '', []]], None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG int i=]>

--- Incoming ---
['cv.dnn.DictValue.DictValue', '', [], [['double', 'p', '', []]], None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG double p=]>

--- Incoming ---
[   'cv.dnn.DictValue.DictValue',
    '',
    [],
    [['String', 's', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG String s=]>

--- Incoming ---
['cv.dnn.DictValue.isInt', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isInt []>

--- Incoming ---
['cv.dnn.DictValue.isString', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isString []>

--- Incoming ---
['cv.dnn.DictValue.isReal', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isReal []>

--- Incoming ---
[   'cv.dnn.DictValue.getIntValue',
    'int',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'int']
ok: FUNC <int cv.dnn.DictValue.getIntValue [ARG int idx=-1]>

--- Incoming ---
[   'cv.dnn.DictValue.getRealValue',
    'double',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'double']
ok: FUNC <double cv.dnn.DictValue.getRealValue [ARG int idx=-1]>

--- Incoming ---
[   'cv.dnn.DictValue.getStringValue',
    'String',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'String']
ok: FUNC <String cv.dnn.DictValue.getStringValue [ARG int idx=-1]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv.dnn.accessor']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/shape_utils.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/layer.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv.dnn.accessor']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/layer.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/version.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv.dnn.CV__DNN_INLINE_NS', 'cv.dnn.accessor']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/version.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/utils/debug_utils.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv.dnn.CV__DNN_INLINE_NS', 'cv.dnn.accessor']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/utils/debug_utils.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/dnn/include/opencv2/dnn/utils/inference_engine.hpp =====
Namespaces: ['cv', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv.dnn.CV__DNN_INLINE_NS', 'cv.dnn.accessor']

--- Incoming ---
['cv.dnn.getInferenceEngineBackendType', 'String', [], [], 'cv::String']
ok: FUNC <String cv.dnn..getInferenceEngineBackendType []>

--- Incoming ---
[   'cv.dnn.setInferenceEngineBackendType',
    'String',
    [],
    [['String', 'newBackendType', '', ['/C', '/Ref']]],
    'cv::String']
ok: FUNC <String cv.dnn..setInferenceEngineBackendType [ARG String newBackendType=]>

--- Incoming ---
['cv.dnn.resetMyriadDevice', 'void', [], [], 'void']
ok: FUNC <void cv.dnn..resetMyriadDevice []>

--- Incoming ---
['cv.dnn.getInferenceEngineVPUType', 'String', [], [], 'cv::String']
ok: FUNC <String cv.dnn..getInferenceEngineVPUType []>

--- Incoming ---
['cv.dnn.getInferenceEngineCPUType', 'String', [], [], 'cv::String']
ok: FUNC <String cv.dnn..getInferenceEngineCPUType []>

--- Incoming ---
['cv.dnn.releaseHDDLPlugin', 'void', [], [], 'void']
ok: FUNC <void cv.dnn..releaseHDDLPlugin []>


===== Generating... =====
CLASS cv::.Dnn : 
[CONST DNN_BACKEND_DEFAULT=0, CONST DNN_BACKEND_HALIDE=0+1, CONST DNN_BACKEND_INFERENCE_ENGINE=0+2, CONST DNN_BACKEND_OPENCV=0+3, CONST DNN_BACKEND_VKCOM=0+4, CONST DNN_BACKEND_CUDA=0+5, CONST DNN_BACKEND_WEBNN=0+6, CONST DNN_BACKEND_TIMVX=0+7, CONST DNN_BACKEND_CANN=0+8]
[CONST DNN_LAYOUT_UNKNOWN=0, CONST DNN_LAYOUT_ND=1, CONST DNN_LAYOUT_NCHW=2, CONST DNN_LAYOUT_NCDHW=3, CONST DNN_LAYOUT_NHWC=4, CONST DNN_LAYOUT_NDHWC=5, CONST DNN_LAYOUT_PLANAR=6]
[CONST DNN_PMODE_NULL=0, CONST DNN_PMODE_CROP_CENTER=1, CONST DNN_PMODE_LETTERBOX=2]
[CONST SoftNMSMethod_SOFTNMS_LINEAR=1, CONST SoftNMSMethod_SOFTNMS_GAUSSIAN=2]
[CONST DNN_TARGET_CPU=0, CONST DNN_TARGET_OPENCL=0+1, CONST DNN_TARGET_OPENCL_FP16=0+2, CONST DNN_TARGET_MYRIAD=0+3, CONST DNN_TARGET_VULKAN=0+4, CONST DNN_TARGET_FPGA=0+5, CONST DNN_TARGET_CUDA=0+6, CONST DNN_TARGET_CUDA_FP16=0+7, CONST DNN_TARGET_HDDL=0+8, CONST DNN_TARGET_NPU=0+9, CONST DNN_TARGET_CPU_FP16=0+10]
FUNC <vector_Target cv.dnn..getAvailableTargets [ARG dnn_Backend be=]>
java: List<Integer> getAvailableTargets(int be)
FUNC <Net cv.dnn..readNetFromDarknet [ARG String cfgFile=, ARG String darknetModel=String()]>
java: Net readNetFromDarknet(String cfgFile, String darknetModel)
java: Net readNetFromDarknet(String cfgFile)
FUNC <Net cv.dnn..readNetFromDarknet [ARG vector_uchar bufferCfg=, ARG vector_uchar bufferModel=std::vector<uchar>()]>
java: Net readNetFromDarknet(MatOfByte bufferCfg, MatOfByte bufferModel)
java: Net readNetFromDarknet(MatOfByte bufferCfg)
FUNC <Net cv.dnn..readNetFromCaffe [ARG String prototxt=, ARG String caffeModel=String()]>
java: Net readNetFromCaffe(String prototxt, String caffeModel)
java: Net readNetFromCaffe(String prototxt)
FUNC <Net cv.dnn..readNetFromCaffe [ARG vector_uchar bufferProto=, ARG vector_uchar bufferModel=std::vector<uchar>()]>
java: Net readNetFromCaffe(MatOfByte bufferProto, MatOfByte bufferModel)
java: Net readNetFromCaffe(MatOfByte bufferProto)
FUNC <Net cv.dnn..readNetFromTensorflow [ARG String model=, ARG String config=String()]>
java: Net readNetFromTensorflow(String model, String config)
java: Net readNetFromTensorflow(String model)
FUNC <Net cv.dnn..readNetFromTensorflow [ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>
java: Net readNetFromTensorflow(MatOfByte bufferModel, MatOfByte bufferConfig)
java: Net readNetFromTensorflow(MatOfByte bufferModel)
FUNC <Net cv.dnn..readNetFromTFLite [ARG String model=]>
java: Net readNetFromTFLite(String model)
FUNC <Net cv.dnn..readNetFromTFLite [ARG vector_uchar bufferModel=]>
java: Net readNetFromTFLite(MatOfByte bufferModel)
FUNC <Net cv.dnn..readNetFromTorch [ARG String model=, ARG bool isBinary=true, ARG bool evaluate=true]>
java: Net readNetFromTorch(String model, boolean isBinary, boolean evaluate)
java: Net readNetFromTorch(String model, boolean isBinary)
java: Net readNetFromTorch(String model)
FUNC <Net cv.dnn..readNet [ARG String model=, ARG String config="", ARG String framework=""]>
java: Net readNet(String model, String config, String framework)
java: Net readNet(String model, String config)
java: Net readNet(String model)
FUNC <Net cv.dnn..readNet [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>
java: Net readNet(String framework, MatOfByte bufferModel, MatOfByte bufferConfig)
java: Net readNet(String framework, MatOfByte bufferModel)
FUNC <Mat cv.dnn..readTorchBlob [ARG String filename=, ARG bool isBinary=true]>
java: Mat readTorchBlob(String filename, boolean isBinary)
java: Mat readTorchBlob(String filename)
FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG String xml=, ARG String bin=""]>
java: Net readNetFromModelOptimizer(String xml, String bin)
java: Net readNetFromModelOptimizer(String xml)
FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG vector_uchar bufferModelConfig=, ARG vector_uchar bufferWeights=]>
java: Net readNetFromModelOptimizer(MatOfByte bufferModelConfig, MatOfByte bufferWeights)
FUNC <Net cv.dnn..readNetFromONNX [ARG String onnxFile=]>
java: Net readNetFromONNX(String onnxFile)
FUNC <Net cv.dnn..readNetFromONNX [ARG vector_uchar buffer=]>
java: Net readNetFromONNX(MatOfByte buffer)
FUNC <Mat cv.dnn..readTensorFromONNX [ARG String path=]>
java: Mat readTensorFromONNX(String path)
FUNC <Mat cv.dnn..blobFromImage [ARG Mat image=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false, ARG int ddepth=CV_32F]>
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop, int ddepth)
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop)
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean, boolean swapRB)
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean)
java: Mat blobFromImage(Mat image, double scalefactor, Size size)
java: Mat blobFromImage(Mat image, double scalefactor)
java: Mat blobFromImage(Mat image)
FUNC <Mat cv.dnn..blobFromImages [ARG vector_Mat images=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false, ARG int ddepth=CV_32F]>
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop, int ddepth)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean, boolean swapRB)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size)
java: Mat blobFromImages(List<Mat> images, double scalefactor)
java: Mat blobFromImages(List<Mat> images)
FUNC <Mat cv.dnn..blobFromImageWithParams [ARG Mat image=, ARG Image2BlobParams param=Image2BlobParams()]>
java: Mat blobFromImageWithParams(Mat image, Image2BlobParams param)
java: Mat blobFromImageWithParams(Mat image)
FUNC <void cv.dnn..blobFromImageWithParams [ARG Mat image=, ARG Mat blob=, ARG Image2BlobParams param=Image2BlobParams()]>
java: void blobFromImageWithParams(Mat image, Mat blob, Image2BlobParams param)
java: void blobFromImageWithParams(Mat image, Mat blob)
FUNC <Mat cv.dnn..blobFromImagesWithParams [ARG vector_Mat images=, ARG Image2BlobParams param=Image2BlobParams()]>
java: Mat blobFromImagesWithParams(List<Mat> images, Image2BlobParams param)
java: Mat blobFromImagesWithParams(List<Mat> images)
FUNC <void cv.dnn..blobFromImagesWithParams [ARG vector_Mat images=, ARG Mat blob=, ARG Image2BlobParams param=Image2BlobParams()]>
java: void blobFromImagesWithParams(List<Mat> images, Mat blob, Image2BlobParams param)
java: void blobFromImagesWithParams(List<Mat> images, Mat blob)
FUNC <void cv.dnn..imagesFromBlob [ARG Mat blob_=, ARG vector_Mat images_=]>
java: void imagesFromBlob(Mat blob_, List<Mat> images_)
FUNC <void cv.dnn..shrinkCaffeModel [ARG String src=, ARG String dst=, ARG vector_String layersTypes=std::vector<String>()]>
java: void shrinkCaffeModel(String src, String dst, List<String> layersTypes)
java: void shrinkCaffeModel(String src, String dst)
FUNC <void cv.dnn..writeTextGraph [ARG String model=, ARG String output=]>
java: void writeTextGraph(String model, String output)
FUNC <void cv.dnn..NMSBoxes [ARG vector_Rect2d bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>
java: void NMSBoxes(MatOfRect2d bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta, int top_k)
java: void NMSBoxes(MatOfRect2d bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta)
java: void NMSBoxes(MatOfRect2d bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices)
FUNC <void cv.dnn..NMSBoxes [ARG vector_RotatedRect bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>
java: void NMSBoxesRotated(MatOfRotatedRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta, int top_k)
java: void NMSBoxesRotated(MatOfRotatedRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta)
java: void NMSBoxesRotated(MatOfRotatedRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices)
FUNC <void cv.dnn..NMSBoxesBatched [ARG vector_Rect2d bboxes=, ARG vector_float scores=, ARG vector_int class_ids=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>
java: void NMSBoxesBatched(MatOfRect2d bboxes, MatOfFloat scores, MatOfInt class_ids, float score_threshold, float nms_threshold, MatOfInt indices, float eta, int top_k)
java: void NMSBoxesBatched(MatOfRect2d bboxes, MatOfFloat scores, MatOfInt class_ids, float score_threshold, float nms_threshold, MatOfInt indices, float eta)
java: void NMSBoxesBatched(MatOfRect2d bboxes, MatOfFloat scores, MatOfInt class_ids, float score_threshold, float nms_threshold, MatOfInt indices)
FUNC <void cv.dnn..softNMSBoxes [ARG vector_Rect bboxes=, ARG vector_float scores=, ARG vector_float updated_scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG size_t top_k=0, ARG float sigma=0.5, ARG SoftNMSMethod method=SoftNMSMethod::SOFTNMS_GAUSSIAN]>
java: void softNMSBoxes(MatOfRect bboxes, MatOfFloat scores, MatOfFloat updated_scores, float score_threshold, float nms_threshold, MatOfInt indices, long top_k, float sigma)
java: void softNMSBoxes(MatOfRect bboxes, MatOfFloat scores, MatOfFloat updated_scores, float score_threshold, float nms_threshold, MatOfInt indices, long top_k, float sigma)
java: void softNMSBoxes(MatOfRect bboxes, MatOfFloat scores, MatOfFloat updated_scores, float score_threshold, float nms_threshold, MatOfInt indices, long top_k)
java: void softNMSBoxes(MatOfRect bboxes, MatOfFloat scores, MatOfFloat updated_scores, float score_threshold, float nms_threshold, MatOfInt indices)
FUNC <String cv.dnn..getInferenceEngineBackendType []>
java: String getInferenceEngineBackendType()
FUNC <String cv.dnn..setInferenceEngineBackendType [ARG String newBackendType=]>
java: String setInferenceEngineBackendType(String newBackendType)
FUNC <void cv.dnn..resetMyriadDevice []>
java: void resetMyriadDevice()
FUNC <String cv.dnn..getInferenceEngineVPUType []>
java: String getInferenceEngineVPUType()
FUNC <String cv.dnn..getInferenceEngineCPUType []>
java: String getInferenceEngineCPUType()
FUNC <void cv.dnn..releaseHDDLPlugin []>
java: void releaseHDDLPlugin()
CLASS cv.dnn::.ClassificationModel : Model
FUNC < cv.dnn.ClassificationModel.ClassificationModel [ARG String model=, ARG String config=""]>
java:  ClassificationModel(String model, String config)
java:  ClassificationModel(String model)
FUNC < cv.dnn.ClassificationModel.ClassificationModel [ARG Net network=]>
java:  ClassificationModel(Net network)
FUNC <ClassificationModel cv.dnn.ClassificationModel.setEnableSoftmaxPostProcessing [ARG bool enable=]>
java: ClassificationModel setEnableSoftmaxPostProcessing(boolean enable)
FUNC <bool cv.dnn.ClassificationModel.getEnableSoftmaxPostProcessing []>
java: boolean getEnableSoftmaxPostProcessing()
FUNC <void cv.dnn.ClassificationModel.classify [ARG Mat frame=, ARG int classId=, ARG float conf=]>
java: void classify(Mat frame, int[] classId, float[] conf)
CLASS cv.dnn::.DetectionModel : Model
FUNC < cv.dnn.DetectionModel.DetectionModel [ARG String model=, ARG String config=""]>
java:  DetectionModel(String model, String config)
java:  DetectionModel(String model)
FUNC < cv.dnn.DetectionModel.DetectionModel [ARG Net network=]>
java:  DetectionModel(Net network)
FUNC <DetectionModel cv.dnn.DetectionModel.setNmsAcrossClasses [ARG bool value=]>
java: DetectionModel setNmsAcrossClasses(boolean value)
FUNC <bool cv.dnn.DetectionModel.getNmsAcrossClasses []>
java: boolean getNmsAcrossClasses()
FUNC <void cv.dnn.DetectionModel.detect [ARG Mat frame=, ARG vector_int classIds=, ARG vector_float confidences=, ARG vector_Rect boxes=, ARG float confThreshold=0.5f, ARG float nmsThreshold=0.0f]>
java: void detect(Mat frame, MatOfInt classIds, MatOfFloat confidences, MatOfRect boxes, float confThreshold, float nmsThreshold)
java: void detect(Mat frame, MatOfInt classIds, MatOfFloat confidences, MatOfRect boxes, float confThreshold)
java: void detect(Mat frame, MatOfInt classIds, MatOfFloat confidences, MatOfRect boxes)
CLASS cv.dnn::.DictValue : 
FUNC < cv.dnn.DictValue.DictValue [ARG int i=]>
java:  DictValue(int i)
FUNC < cv.dnn.DictValue.DictValue [ARG double p=]>
java:  DictValue(double p)
FUNC < cv.dnn.DictValue.DictValue [ARG String s=]>
java:  DictValue(String s)
FUNC <bool cv.dnn.DictValue.isInt []>
java: boolean isInt()
FUNC <bool cv.dnn.DictValue.isString []>
java: boolean isString()
FUNC <bool cv.dnn.DictValue.isReal []>
java: boolean isReal()
FUNC <int cv.dnn.DictValue.getIntValue [ARG int idx=-1]>
java: int getIntValue(int idx)
java: int getIntValue()
FUNC <double cv.dnn.DictValue.getRealValue [ARG int idx=-1]>
java: double getRealValue(int idx)
java: double getRealValue()
FUNC <String cv.dnn.DictValue.getStringValue [ARG int idx=-1]>
java: String getStringValue(int idx)
java: String getStringValue()
CLASS cv.dnn::.Image2BlobParams : 
FUNC < cv.dnn.Image2BlobParams.Image2BlobParams []>
java:  Image2BlobParams()
FUNC < cv.dnn.Image2BlobParams.Image2BlobParams [ARG Scalar scalefactor=, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG int ddepth=CV_32F, ARG DataLayout datalayout=DNN_LAYOUT_NCHW, ARG ImagePaddingMode mode=DNN_PMODE_NULL, ARG Scalar borderValue=0.0]>
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean, boolean swapRB, int ddepth, Scalar borderValue)
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean, boolean swapRB, int ddepth)
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean, boolean swapRB, int ddepth)
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean, boolean swapRB, int ddepth)
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean, boolean swapRB)
java:  Image2BlobParams(Scalar scalefactor, Size size, Scalar mean)
java:  Image2BlobParams(Scalar scalefactor, Size size)
java:  Image2BlobParams(Scalar scalefactor)
FUNC <Rect cv.dnn.Image2BlobParams.blobRectToImageRect [ARG Rect rBlob=, ARG Size size=]>
java: Rect blobRectToImageRect(Rect rBlob, Size size)
FUNC <void cv.dnn.Image2BlobParams.blobRectsToImageRects [ARG vector_Rect rBlob=, ARG vector_Rect rImg=, ARG Size size=]>
java: void blobRectsToImageRects(MatOfRect rBlob, MatOfRect rImg, Size size)
FUNC <Scalar cv.dnn.Image2BlobParams.get_scalefactor []>
java: Scalar get_scalefactor()
FUNC <void cv.dnn.Image2BlobParams.set_scalefactor [ARG Scalar scalefactor=]>
java: void set_scalefactor(Scalar scalefactor)
FUNC <Size cv.dnn.Image2BlobParams.get_size []>
java: Size get_size()
FUNC <void cv.dnn.Image2BlobParams.set_size [ARG Size size=]>
java: void set_size(Size size)
FUNC <Scalar cv.dnn.Image2BlobParams.get_mean []>
java: Scalar get_mean()
FUNC <void cv.dnn.Image2BlobParams.set_mean [ARG Scalar mean=]>
java: void set_mean(Scalar mean)
FUNC <bool cv.dnn.Image2BlobParams.get_swapRB []>
java: boolean get_swapRB()
FUNC <void cv.dnn.Image2BlobParams.set_swapRB [ARG bool swapRB=]>
java: void set_swapRB(boolean swapRB)
FUNC <int cv.dnn.Image2BlobParams.get_ddepth []>
java: int get_ddepth()
FUNC <void cv.dnn.Image2BlobParams.set_ddepth [ARG int ddepth=]>
java: void set_ddepth(int ddepth)
FUNC <DataLayout cv.dnn.Image2BlobParams.get_datalayout []>
SKIP:DataLayout Image2BlobParams::datalayout	 due to RET type DataLayout
FUNC <void cv.dnn.Image2BlobParams.set_datalayout [ARG DataLayout datalayout=]>
SKIP:void Image2BlobParams::datalayout	 due to ARG type DataLayout/I
FUNC <ImagePaddingMode cv.dnn.Image2BlobParams.get_paddingmode []>
SKIP:ImagePaddingMode Image2BlobParams::paddingmode	 due to RET type ImagePaddingMode
FUNC <void cv.dnn.Image2BlobParams.set_paddingmode [ARG ImagePaddingMode paddingmode=]>
SKIP:void Image2BlobParams::paddingmode	 due to ARG type ImagePaddingMode/I
FUNC <Scalar cv.dnn.Image2BlobParams.get_borderValue []>
java: Scalar get_borderValue()
FUNC <void cv.dnn.Image2BlobParams.set_borderValue [ARG Scalar borderValue=]>
java: void set_borderValue(Scalar borderValue)
CLASS cv.dnn::.KeypointsModel : Model
FUNC < cv.dnn.KeypointsModel.KeypointsModel [ARG String model=, ARG String config=""]>
java:  KeypointsModel(String model, String config)
java:  KeypointsModel(String model)
FUNC < cv.dnn.KeypointsModel.KeypointsModel [ARG Net network=]>
java:  KeypointsModel(Net network)
FUNC <vector_Point2f cv.dnn.KeypointsModel.estimate [ARG Mat frame=, ARG float thresh=0.5]>
java: MatOfPoint2f estimate(Mat frame, float thresh)
java: MatOfPoint2f estimate(Mat frame)
CLASS cv.dnn::.Layer : Algorithm
FUNC <void cv.dnn.Layer.finalize [ARG vector_Mat inputs=, ARG vector_Mat outputs=]>
java: void finalize(List<Mat> inputs, List<Mat> outputs)
FUNC <void cv.dnn.Layer.run [ARG vector_Mat inputs=, ARG vector_Mat outputs=, ARG vector_Mat internals=]>
java: void run(List<Mat> inputs, List<Mat> outputs, List<Mat> internals)
FUNC <int cv.dnn.Layer.outputNameToIndex [ARG String outputName=]>
java: int outputNameToIndex(String outputName)
FUNC <vector_Mat cv.dnn.Layer.get_blobs []>
java: List<Mat> get_blobs()
FUNC <void cv.dnn.Layer.set_blobs [ARG vector_Mat blobs=]>
java: void set_blobs(List<Mat> blobs)
FUNC <String cv.dnn.Layer.get_name []>
java: String get_name()
FUNC <String cv.dnn.Layer.get_type []>
java: String get_type()
FUNC <int cv.dnn.Layer.get_preferableTarget []>
java: int get_preferableTarget()
CLASS cv.dnn::.Model : 
FUNC < cv.dnn.Model.Model [ARG String model=, ARG String config=""]>
java:  Model(String model, String config)
java:  Model(String model)
FUNC < cv.dnn.Model.Model [ARG Net network=]>
java:  Model(Net network)
FUNC <Model cv.dnn.Model.setInputSize [ARG Size size=]>
java: Model setInputSize(Size size)
FUNC <Model cv.dnn.Model.setInputSize [ARG int width=, ARG int height=]>
java: Model setInputSize(int width, int height)
FUNC <Model cv.dnn.Model.setInputMean [ARG Scalar mean=]>
java: Model setInputMean(Scalar mean)
FUNC <Model cv.dnn.Model.setInputScale [ARG Scalar scale=]>
java: Model setInputScale(Scalar scale)
FUNC <Model cv.dnn.Model.setInputCrop [ARG bool crop=]>
java: Model setInputCrop(boolean crop)
FUNC <Model cv.dnn.Model.setInputSwapRB [ARG bool swapRB=]>
java: Model setInputSwapRB(boolean swapRB)
FUNC <Model cv.dnn.Model.setOutputNames [ARG vector_String outNames=]>
java: Model setOutputNames(List<String> outNames)
FUNC <void cv.dnn.Model.setInputParams [ARG double scale=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=false, ARG bool crop=false]>
java: void setInputParams(double scale, Size size, Scalar mean, boolean swapRB, boolean crop)
java: void setInputParams(double scale, Size size, Scalar mean, boolean swapRB)
java: void setInputParams(double scale, Size size, Scalar mean)
java: void setInputParams(double scale, Size size)
java: void setInputParams(double scale)
java: void setInputParams()
FUNC <void cv.dnn.Model.predict [ARG Mat frame=, ARG vector_Mat outs=]>
java: void predict(Mat frame, List<Mat> outs)
FUNC <Model cv.dnn.Model.setPreferableBackend [ARG dnn_Backend backendId=]>
java: Model setPreferableBackend(int backendId)
FUNC <Model cv.dnn.Model.setPreferableTarget [ARG dnn_Target targetId=]>
java: Model setPreferableTarget(int targetId)
FUNC <Model cv.dnn.Model.enableWinograd [ARG bool useWinograd=]>
java: Model enableWinograd(boolean useWinograd)
CLASS cv.dnn::.Net : 
FUNC < cv.dnn.Net.Net []>
java:  Net()
FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG String xml=, ARG String bin=]>
java: Net readFromModelOptimizer(String xml, String bin)
FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG vector_uchar bufferModelConfig=, ARG vector_uchar bufferWeights=]>
java: Net readFromModelOptimizer(MatOfByte bufferModelConfig, MatOfByte bufferWeights)
FUNC <bool cv.dnn.Net.empty []>
java: boolean empty()
FUNC <String cv.dnn.Net.dump []>
java: String dump()
FUNC <void cv.dnn.Net.dumpToFile [ARG String path=]>
java: void dumpToFile(String path)
FUNC <void cv.dnn.Net.dumpToPbtxt [ARG String path=]>
java: void dumpToPbtxt(String path)
FUNC <int cv.dnn.Net.getLayerId [ARG String layer=]>
java: int getLayerId(String layer)
FUNC <vector_String cv.dnn.Net.getLayerNames []>
java: List<String> getLayerNames()
FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG int layerId=]>
java: Layer getLayer(int layerId)
FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG String layerName=]>
java: Layer getLayer(String layerName)
FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG LayerId layerId=]>
java: Layer getLayer(DictValue layerId)
FUNC <void cv.dnn.Net.connect [ARG String outPin=, ARG String inpPin=]>
java: void connect(String outPin, String inpPin)
FUNC <void cv.dnn.Net.setInputsNames [ARG vector_String inputBlobNames=]>
java: void setInputsNames(List<String> inputBlobNames)
FUNC <void cv.dnn.Net.setInputShape [ARG String inputName=, ARG MatShape shape=]>
java: void setInputShape(String inputName, MatOfInt shape)
FUNC <Mat cv.dnn.Net.forward [ARG String outputName=String()]>
java: Mat forward(String outputName)
java: Mat forward()
FUNC <AsyncArray cv.dnn.Net.forwardAsync [ARG String outputName=String()]>
SKIP:AsyncArray cv::dnn::Net::forwardAsync(String outputName = String())	 due to RET type AsyncArray
FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG String outputName=String()]>
java: void forward(List<Mat> outputBlobs, String outputName)
java: void forward(List<Mat> outputBlobs)
FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>
java: void forward(List<Mat> outputBlobs, List<String> outBlobNames)
FUNC <void cv.dnn.Net.forward [ARG vector_vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>
SKIP:void cv::dnn::Net::forward(vector_vector_Mat& outputBlobs, vector_String outBlobNames)	 due to ARG type vector_vector_Mat/O
FUNC <Net cv.dnn.Net.quantize [ARG vector_Mat calibData=, ARG int inputsDtype=, ARG int outputsDtype=, ARG bool perChannel=true]>
java: Net quantize(List<Mat> calibData, int inputsDtype, int outputsDtype, boolean perChannel)
java: Net quantize(List<Mat> calibData, int inputsDtype, int outputsDtype)
FUNC <void cv.dnn.Net.getInputDetails [ARG vector_float scales=, ARG vector_int zeropoints=]>
java: void getInputDetails(MatOfFloat scales, MatOfInt zeropoints)
FUNC <void cv.dnn.Net.getOutputDetails [ARG vector_float scales=, ARG vector_int zeropoints=]>
java: void getOutputDetails(MatOfFloat scales, MatOfInt zeropoints)
FUNC <void cv.dnn.Net.setHalideScheduler [ARG String scheduler=]>
java: void setHalideScheduler(String scheduler)
FUNC <void cv.dnn.Net.setPreferableBackend [ARG int backendId=]>
java: void setPreferableBackend(int backendId)
FUNC <void cv.dnn.Net.setPreferableTarget [ARG int targetId=]>
java: void setPreferableTarget(int targetId)
FUNC <void cv.dnn.Net.setInput [ARG Mat blob=, ARG String name="", ARG double scalefactor=1.0, ARG Scalar mean=Scalar()]>
java: void setInput(Mat blob, String name, double scalefactor, Scalar mean)
java: void setInput(Mat blob, String name, double scalefactor)
java: void setInput(Mat blob, String name)
java: void setInput(Mat blob)
FUNC <void cv.dnn.Net.setParam [ARG int layer=, ARG int numParam=, ARG Mat blob=]>
java: void setParam(int layer, int numParam, Mat blob)
FUNC <void cv.dnn.Net.setParam [ARG String layerName=, ARG int numParam=, ARG Mat blob=]>
java: void setParam(String layerName, int numParam, Mat blob)
FUNC <Mat cv.dnn.Net.getParam [ARG int layer=, ARG int numParam=0]>
java: Mat getParam(int layer, int numParam)
java: Mat getParam(int layer)
FUNC <Mat cv.dnn.Net.getParam [ARG String layerName=, ARG int numParam=0]>
java: Mat getParam(String layerName, int numParam)
java: Mat getParam(String layerName)
FUNC <vector_int cv.dnn.Net.getUnconnectedOutLayers []>
java: MatOfInt getUnconnectedOutLayers()
FUNC <vector_String cv.dnn.Net.getUnconnectedOutLayersNames []>
java: List<String> getUnconnectedOutLayersNames()
FUNC <void cv.dnn.Net.getLayersShapes [ARG vector_MatShape netInputShapes=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>
SKIP:void cv::dnn::Net::getLayersShapes(vector_MatShape netInputShapes, vector_int& layersIds, vector_vector_MatShape& inLayersShapes, vector_vector_MatShape& outLayersShapes)	 due to ARG type vector_vector_MatShape/O
FUNC <void cv.dnn.Net.getLayersShapes [ARG MatShape netInputShape=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>
SKIP:void cv::dnn::Net::getLayersShapes(MatShape netInputShape, vector_int& layersIds, vector_vector_MatShape& inLayersShapes, vector_vector_MatShape& outLayersShapes)	 due to ARG type vector_vector_MatShape/O
FUNC <int64 cv.dnn.Net.getFLOPS [ARG vector_MatShape netInputShapes=]>
java: long getFLOPS(List<MatOfInt> netInputShapes)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG MatShape netInputShape=]>
java: long getFLOPS(MatOfInt netInputShape)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG vector_MatShape netInputShapes=]>
java: long getFLOPS(int layerId, List<MatOfInt> netInputShapes)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG MatShape netInputShape=]>
java: long getFLOPS(int layerId, MatOfInt netInputShape)
FUNC <void cv.dnn.Net.getLayerTypes [ARG vector_String layersTypes=]>
java: void getLayerTypes(List<String> layersTypes)
FUNC <int cv.dnn.Net.getLayersCount [ARG String layerType=]>
java: int getLayersCount(String layerType)
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(MatOfInt netInputShape, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG vector_MatShape netInputShapes=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(int layerId, List<MatOfInt> netInputShapes, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(int layerId, MatOfInt netInputShape, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.enableFusion [ARG bool fusion=]>
java: void enableFusion(boolean fusion)
FUNC <void cv.dnn.Net.enableWinograd [ARG bool useWinograd=]>
java: void enableWinograd(boolean useWinograd)
FUNC <int64 cv.dnn.Net.getPerfProfile [ARG vector_double timings=]>
java: long getPerfProfile(MatOfDouble timings)
CLASS cv.dnn::.SegmentationModel : Model
FUNC < cv.dnn.SegmentationModel.SegmentationModel [ARG String model=, ARG String config=""]>
java:  SegmentationModel(String model, String config)
java:  SegmentationModel(String model)
FUNC < cv.dnn.SegmentationModel.SegmentationModel [ARG Net network=]>
java:  SegmentationModel(Net network)
FUNC <void cv.dnn.SegmentationModel.segment [ARG Mat frame=, ARG Mat mask=]>
java: void segment(Mat frame, Mat mask)
CLASS cv.dnn::.TextDetectionModel : Model
FUNC <void cv.dnn.TextDetectionModel.detect [ARG Mat frame=, ARG vector_vector_Point detections=, ARG vector_float confidences=]>
java: void detect(Mat frame, List<MatOfPoint> detections, MatOfFloat confidences)
FUNC <void cv.dnn.TextDetectionModel.detect [ARG Mat frame=, ARG vector_vector_Point detections=]>
java: void detect(Mat frame, List<MatOfPoint> detections)
FUNC <void cv.dnn.TextDetectionModel.detectTextRectangles [ARG Mat frame=, ARG vector_RotatedRect detections=, ARG vector_float confidences=]>
java: void detectTextRectangles(Mat frame, MatOfRotatedRect detections, MatOfFloat confidences)
FUNC <void cv.dnn.TextDetectionModel.detectTextRectangles [ARG Mat frame=, ARG vector_RotatedRect detections=]>
java: void detectTextRectangles(Mat frame, MatOfRotatedRect detections)
CLASS cv.dnn::.TextDetectionModel_DB : TextDetectionModel
FUNC < cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB [ARG Net network=]>
java:  TextDetectionModel_DB(Net network)
FUNC < cv.dnn.TextDetectionModel_DB.TextDetectionModel_DB [ARG string model=, ARG string config=""]>
java:  TextDetectionModel_DB(String model, String config)
java:  TextDetectionModel_DB(String model)
FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setBinaryThreshold [ARG float binaryThreshold=]>
java: TextDetectionModel_DB setBinaryThreshold(float binaryThreshold)
FUNC <float cv.dnn.TextDetectionModel_DB.getBinaryThreshold []>
java: float getBinaryThreshold()
FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setPolygonThreshold [ARG float polygonThreshold=]>
java: TextDetectionModel_DB setPolygonThreshold(float polygonThreshold)
FUNC <float cv.dnn.TextDetectionModel_DB.getPolygonThreshold []>
java: float getPolygonThreshold()
FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setUnclipRatio [ARG double unclipRatio=]>
java: TextDetectionModel_DB setUnclipRatio(double unclipRatio)
FUNC <double cv.dnn.TextDetectionModel_DB.getUnclipRatio []>
java: double getUnclipRatio()
FUNC <TextDetectionModel_DB cv.dnn.TextDetectionModel_DB.setMaxCandidates [ARG int maxCandidates=]>
java: TextDetectionModel_DB setMaxCandidates(int maxCandidates)
FUNC <int cv.dnn.TextDetectionModel_DB.getMaxCandidates []>
java: int getMaxCandidates()
CLASS cv.dnn::.TextDetectionModel_EAST : TextDetectionModel
FUNC < cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST [ARG Net network=]>
java:  TextDetectionModel_EAST(Net network)
FUNC < cv.dnn.TextDetectionModel_EAST.TextDetectionModel_EAST [ARG string model=, ARG string config=""]>
java:  TextDetectionModel_EAST(String model, String config)
java:  TextDetectionModel_EAST(String model)
FUNC <TextDetectionModel_EAST cv.dnn.TextDetectionModel_EAST.setConfidenceThreshold [ARG float confThreshold=]>
java: TextDetectionModel_EAST setConfidenceThreshold(float confThreshold)
FUNC <float cv.dnn.TextDetectionModel_EAST.getConfidenceThreshold []>
java: float getConfidenceThreshold()
FUNC <TextDetectionModel_EAST cv.dnn.TextDetectionModel_EAST.setNMSThreshold [ARG float nmsThreshold=]>
java: TextDetectionModel_EAST setNMSThreshold(float nmsThreshold)
FUNC <float cv.dnn.TextDetectionModel_EAST.getNMSThreshold []>
java: float getNMSThreshold()
CLASS cv.dnn::.TextRecognitionModel : Model
FUNC < cv.dnn.TextRecognitionModel.TextRecognitionModel [ARG Net network=]>
java:  TextRecognitionModel(Net network)
FUNC < cv.dnn.TextRecognitionModel.TextRecognitionModel [ARG string model=, ARG string config=""]>
java:  TextRecognitionModel(String model, String config)
java:  TextRecognitionModel(String model)
FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setDecodeType [ARG string decodeType=]>
java: TextRecognitionModel setDecodeType(String decodeType)
FUNC <string cv.dnn.TextRecognitionModel.getDecodeType []>
java: String getDecodeType()
FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setDecodeOptsCTCPrefixBeamSearch [ARG int beamSize=, ARG int vocPruneSize=0]>
java: TextRecognitionModel setDecodeOptsCTCPrefixBeamSearch(int beamSize, int vocPruneSize)
java: TextRecognitionModel setDecodeOptsCTCPrefixBeamSearch(int beamSize)
FUNC <TextRecognitionModel cv.dnn.TextRecognitionModel.setVocabulary [ARG vector_string vocabulary=]>
java: TextRecognitionModel setVocabulary(List<String> vocabulary)
FUNC <vector_string cv.dnn.TextRecognitionModel.getVocabulary []>
java: List<String> getVocabulary()
FUNC <string cv.dnn.TextRecognitionModel.recognize [ARG Mat frame=]>
java: String recognize(Mat frame)
FUNC <void cv.dnn.TextRecognitionModel.recognize [ARG Mat frame=, ARG vector_Mat roiRects=, ARG vector_string results=]>
java: void recognize(Mat frame, List<Mat> roiRects, List<String> results)

=== MODULE: features2d (/home/adminlab/franka_ros2_ws/src/opencv/modules/features2d) ===


Files (1):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/features2d/include/opencv2/features2d.hpp']

Common headers (1):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/features2d/misc/java/src/cpp/features2d_converters.hpp']
ok: class CLASS cv::.Features2d : , name: Features2d, base: 

===== Common header : /home/adminlab/franka_ros2_ws/src/opencv/modules/features2d/misc/java/src/cpp/features2d_converters.hpp =====


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/features2d/include/opencv2/features2d.hpp =====
Namespaces: ['cv']

--- Incoming ---
[   'class cv.Feature2D',
    ': cv::Algorithm, cv::class, cv::Feature2D, cv::Algorithm',
    [],
    [],
    None]
ok: class CLASS cv::.Feature2D : Algorithm, name: Feature2D, base: Algorithm

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    ['/V'],
    [   ['vector_Mat', 'images', '', []],
        ['vector_vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['vector_Mat', 'masks', 'vector_Mat()', []]],
    'void']
ok: FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/IO', '/Ref']],
        ['Mat', 'descriptors', '', ['/O']]],
    'void']
ok: FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    ['/V'],
    [   ['vector_Mat', 'images', '', []],
        ['vector_vector_KeyPoint', 'keypoints', '', ['/IO', '/Ref']],
        ['vector_Mat', 'descriptors', '', ['/O']]],
    'void']
ok: FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>

--- Incoming ---
[   'cv.Feature2D.detectAndCompute',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'mask', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['Mat', 'descriptors', '', ['/O']],
        ['bool', 'useProvidedKeypoints', 'false', []]],
    'void']
ok: FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>

--- Incoming ---
['cv.Feature2D.descriptorSize', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.descriptorSize []>

--- Incoming ---
['cv.Feature2D.descriptorType', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.descriptorType []>

--- Incoming ---
['cv.Feature2D.defaultNorm', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.defaultNorm []>

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [['String', 'fileName', '', ['/C', '/Ref', '/PATH']]],
    'void']
ok: FUNC <void cv.Feature2D.write [ARG String fileName=]>

--- Incoming ---
[   'cv.Feature2D.read',
    'void',
    [],
    [['String', 'fileName', '', ['/C', '/Ref', '/PATH']]],
    'void']
ok: FUNC <void cv.Feature2D.read [ARG String fileName=]>

--- Incoming ---
[   'cv.Feature2D.read',
    'void',
    ['/V'],
    [['FileNode', 'arg1', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.read [ARG FileNode arg1=]>

--- Incoming ---
['cv.Feature2D.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.Feature2D.empty []>

--- Incoming ---
['cv.Feature2D.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.Feature2D.getDefaultName []>

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.write [ARG FileStorage fs=, ARG String name=]>

--- Incoming ---
['class cv.AffineFeature', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.AffineFeature : Feature2D, name: AffineFeature, base: Feature2D

--- Incoming ---
[   'cv.AffineFeature.create',
    'Ptr_AffineFeature',
    ['/S'],
    [   ['Ptr_Feature2D', 'backend', '', ['/C', '/Ref']],
        ['int', 'maxTilt', '5', []],
        ['int', 'minTilt', '0', []],
        ['float', 'tiltStep', '1.4142135623730951f', []],
        ['float', 'rotateStepBase', '72', []]],
    'Ptr<AffineFeature>']
ok: FUNC <Ptr_AffineFeature cv.AffineFeature.create [ARG Ptr_Feature2D backend=, ARG int maxTilt=5, ARG int minTilt=0, ARG float tiltStep=1.4142135623730951f, ARG float rotateStepBase=72]>

--- Incoming ---
[   'cv.AffineFeature.setViewParams',
    'void',
    ['/V', '/PV'],
    [   ['vector_float', 'tilts', '', ['/C', '/Ref']],
        ['vector_float', 'rolls', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.AffineFeature.setViewParams [ARG vector_float tilts=, ARG vector_float rolls=]>

--- Incoming ---
[   'cv.AffineFeature.getViewParams',
    'void',
    ['/C', '/V', '/PV'],
    [   ['vector_float', 'tilts', '', ['/Ref']],
        ['vector_float', 'rolls', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.AffineFeature.getViewParams [ARG vector_float tilts=, ARG vector_float rolls=]>

--- Incoming ---
['cv.AffineFeature.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.AffineFeature.getDefaultName []>

--- Incoming ---
['class cv.SIFT', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.SIFT : Feature2D, name: SIFT, base: Feature2D

--- Incoming ---
[   'cv.SIFT.create',
    'Ptr_SIFT',
    ['/S'],
    [   ['int', 'nfeatures', '0', []],
        ['int', 'nOctaveLayers', '3', []],
        ['double', 'contrastThreshold', '0.04', []],
        ['double', 'edgeThreshold', '10', []],
        ['double', 'sigma', '1.6', []],
        ['bool', 'enable_precise_upscale', 'false', []]],
    'Ptr<SIFT>']
ok: FUNC <Ptr_SIFT cv.SIFT.create [ARG int nfeatures=0, ARG int nOctaveLayers=3, ARG double contrastThreshold=0.04, ARG double edgeThreshold=10, ARG double sigma=1.6, ARG bool enable_precise_upscale=false]>

--- Incoming ---
[   'cv.SIFT.create',
    'Ptr_SIFT',
    ['/S'],
    [   ['int', 'nfeatures', '', []],
        ['int', 'nOctaveLayers', '', []],
        ['double', 'contrastThreshold', '', []],
        ['double', 'edgeThreshold', '', []],
        ['double', 'sigma', '', []],
        ['int', 'descriptorType', '', []],
        ['bool', 'enable_precise_upscale', 'false', []]],
    'Ptr<SIFT>']
ok: FUNC <Ptr_SIFT cv.SIFT.create [ARG int nfeatures=, ARG int nOctaveLayers=, ARG double contrastThreshold=, ARG double edgeThreshold=, ARG double sigma=, ARG int descriptorType=, ARG bool enable_precise_upscale=false]>

--- Incoming ---
['cv.SIFT.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.SIFT.getDefaultName []>

--- Incoming ---
[   'cv.SIFT.setNFeatures',
    'void',
    ['/V', '/PV'],
    [['int', 'maxFeatures', '', []]],
    'void']
ok: FUNC <void cv.SIFT.setNFeatures [ARG int maxFeatures=]>

--- Incoming ---
['cv.SIFT.getNFeatures', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SIFT.getNFeatures []>

--- Incoming ---
[   'cv.SIFT.setNOctaveLayers',
    'void',
    ['/V', '/PV'],
    [['int', 'nOctaveLayers', '', []]],
    'void']
ok: FUNC <void cv.SIFT.setNOctaveLayers [ARG int nOctaveLayers=]>

--- Incoming ---
['cv.SIFT.getNOctaveLayers', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SIFT.getNOctaveLayers []>

--- Incoming ---
[   'cv.SIFT.setContrastThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'contrastThreshold', '', []]],
    'void']
ok: FUNC <void cv.SIFT.setContrastThreshold [ARG double contrastThreshold=]>

--- Incoming ---
['cv.SIFT.getContrastThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.SIFT.getContrastThreshold []>

--- Incoming ---
[   'cv.SIFT.setEdgeThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'edgeThreshold', '', []]],
    'void']
ok: FUNC <void cv.SIFT.setEdgeThreshold [ARG double edgeThreshold=]>

--- Incoming ---
['cv.SIFT.getEdgeThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.SIFT.getEdgeThreshold []>

--- Incoming ---
[   'cv.SIFT.setSigma',
    'void',
    ['/V', '/PV'],
    [['double', 'sigma', '', []]],
    'void']
ok: FUNC <void cv.SIFT.setSigma [ARG double sigma=]>

--- Incoming ---
['cv.SIFT.getSigma', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.SIFT.getSigma []>

--- Incoming ---
['class cv.BRISK', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.BRISK : Feature2D, name: BRISK, base: Feature2D

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['int', 'thresh', '30', []],
        ['int', 'octaves', '3', []],
        ['float', 'patternScale', '1.0f', []]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['vector_float', 'radiusList', '', ['/C', '/Ref']],
        ['vector_int', 'numberList', '', ['/C', '/Ref']],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['vector_int', 'indexChange', 'std::vector<int>()', ['/C', '/Ref']]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['int', 'thresh', '', []],
        ['int', 'octaves', '', []],
        ['vector_float', 'radiusList', '', ['/C', '/Ref']],
        ['vector_int', 'numberList', '', ['/C', '/Ref']],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['vector_int', 'indexChange', 'std::vector<int>()', ['/C', '/Ref']]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=, ARG int octaves=, ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>

--- Incoming ---
['cv.BRISK.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.BRISK.getDefaultName []>

--- Incoming ---
[   'cv.BRISK.setThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.BRISK.setThreshold [ARG int threshold=]>

--- Incoming ---
['cv.BRISK.getThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.BRISK.getThreshold []>

--- Incoming ---
[   'cv.BRISK.setOctaves',
    'void',
    ['/V', '/PV'],
    [['int', 'octaves', '', []]],
    'void']
ok: FUNC <void cv.BRISK.setOctaves [ARG int octaves=]>

--- Incoming ---
['cv.BRISK.getOctaves', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.BRISK.getOctaves []>

--- Incoming ---
[   'cv.BRISK.setPatternScale',
    'void',
    ['/V', '/PV'],
    [['float', 'patternScale', '', []]],
    'void']
ok: FUNC <void cv.BRISK.setPatternScale [ARG float patternScale=]>

--- Incoming ---
['cv.BRISK.getPatternScale', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.BRISK.getPatternScale []>

--- Incoming ---
['class cv.ORB', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.ORB : Feature2D, name: ORB, base: Feature2D

--- Incoming ---
[   'enum cv.ORB.ScoreType',
    '',
    [],
    [   ['const cv.ORB.HARRIS_SCORE', '0', [], [], None, ''],
        ['const cv.ORB.FAST_SCORE', '1', [], [], None, '']],
    None]
ok: CONST HARRIS_SCORE=0
ok: CONST FAST_SCORE=1

--- Incoming ---
[   'cv.ORB.create',
    'Ptr_ORB',
    ['/S'],
    [   ['int', 'nfeatures', '500', []],
        ['float', 'scaleFactor', '1.2f', []],
        ['int', 'nlevels', '8', []],
        ['int', 'edgeThreshold', '31', []],
        ['int', 'firstLevel', '0', []],
        ['int', 'WTA_K', '2', []],
        ['ORB_ScoreType', 'scoreType', 'ORB::HARRIS_SCORE', []],
        ['int', 'patchSize', '31', []],
        ['int', 'fastThreshold', '20', []]],
    'Ptr<ORB>']
ok: FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG ORB_ScoreType scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>

--- Incoming ---
[   'cv.ORB.setMaxFeatures',
    'void',
    ['/V', '/PV'],
    [['int', 'maxFeatures', '', []]],
    'void']
ok: FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
['cv.ORB.getMaxFeatures', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getMaxFeatures []>

--- Incoming ---
[   'cv.ORB.setScaleFactor',
    'void',
    ['/V', '/PV'],
    [['double', 'scaleFactor', '', []]],
    'void']
ok: FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>

--- Incoming ---
['cv.ORB.getScaleFactor', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ORB.getScaleFactor []>

--- Incoming ---
[   'cv.ORB.setNLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'nlevels', '', []]],
    'void']
ok: FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>

--- Incoming ---
['cv.ORB.getNLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getNLevels []>

--- Incoming ---
[   'cv.ORB.setEdgeThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'edgeThreshold', '', []]],
    'void']
ok: FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>

--- Incoming ---
['cv.ORB.getEdgeThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getEdgeThreshold []>

--- Incoming ---
[   'cv.ORB.setFirstLevel',
    'void',
    ['/V', '/PV'],
    [['int', 'firstLevel', '', []]],
    'void']
ok: FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>

--- Incoming ---
['cv.ORB.getFirstLevel', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getFirstLevel []>

--- Incoming ---
['cv.ORB.setWTA_K', 'void', ['/V', '/PV'], [['int', 'wta_k', '', []]], 'void']
ok: FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>

--- Incoming ---
['cv.ORB.getWTA_K', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getWTA_K []>

--- Incoming ---
[   'cv.ORB.setScoreType',
    'void',
    ['/V', '/PV'],
    [['ORB_ScoreType', 'scoreType', '', []]],
    'void']
ok: FUNC <void cv.ORB.setScoreType [ARG ORB_ScoreType scoreType=]>

--- Incoming ---
[   'cv.ORB.getScoreType',
    'ORB_ScoreType',
    ['/C', '/V', '/PV'],
    [],
    'ORB::ScoreType']
ok: FUNC <ORB_ScoreType cv.ORB.getScoreType []>

--- Incoming ---
[   'cv.ORB.setPatchSize',
    'void',
    ['/V', '/PV'],
    [['int', 'patchSize', '', []]],
    'void']
ok: FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>

--- Incoming ---
['cv.ORB.getPatchSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getPatchSize []>

--- Incoming ---
[   'cv.ORB.setFastThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'fastThreshold', '', []]],
    'void']
ok: FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>

--- Incoming ---
['cv.ORB.getFastThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getFastThreshold []>

--- Incoming ---
['cv.ORB.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.ORB.getDefaultName []>

--- Incoming ---
['class cv.MSER', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.MSER : Feature2D, name: MSER, base: Feature2D

--- Incoming ---
[   'cv.MSER.create',
    'Ptr_MSER',
    ['/S'],
    [   ['int', 'delta', '5', []],
        ['int', 'min_area', '60', []],
        ['int', 'max_area', '14400', []],
        ['double', 'max_variation', '0.25', []],
        ['double', 'min_diversity', '.2', []],
        ['int', 'max_evolution', '200', []],
        ['double', 'area_threshold', '1.01', []],
        ['double', 'min_margin', '0.003', []],
        ['int', 'edge_blur_size', '5', []]],
    'Ptr<MSER>']
ok: FUNC <Ptr_MSER cv.MSER.create [ARG int delta=5, ARG int min_area=60, ARG int max_area=14400, ARG double max_variation=0.25, ARG double min_diversity=.2, ARG int max_evolution=200, ARG double area_threshold=1.01, ARG double min_margin=0.003, ARG int edge_blur_size=5]>

--- Incoming ---
[   'cv.MSER.detectRegions',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['vector_vector_Point', 'msers', '', ['/O', '/Ref']],
        ['vector_Rect', 'bboxes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>

--- Incoming ---
['cv.MSER.setDelta', 'void', ['/V', '/PV'], [['int', 'delta', '', []]], 'void']
ok: FUNC <void cv.MSER.setDelta [ARG int delta=]>

--- Incoming ---
['cv.MSER.getDelta', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getDelta []>

--- Incoming ---
[   'cv.MSER.setMinArea',
    'void',
    ['/V', '/PV'],
    [['int', 'minArea', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMinArea [ARG int minArea=]>

--- Incoming ---
['cv.MSER.getMinArea', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getMinArea []>

--- Incoming ---
[   'cv.MSER.setMaxArea',
    'void',
    ['/V', '/PV'],
    [['int', 'maxArea', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>

--- Incoming ---
['cv.MSER.getMaxArea', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getMaxArea []>

--- Incoming ---
[   'cv.MSER.setMaxVariation',
    'void',
    ['/V', '/PV'],
    [['double', 'maxVariation', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMaxVariation [ARG double maxVariation=]>

--- Incoming ---
['cv.MSER.getMaxVariation', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.MSER.getMaxVariation []>

--- Incoming ---
[   'cv.MSER.setMinDiversity',
    'void',
    ['/V', '/PV'],
    [['double', 'minDiversity', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMinDiversity [ARG double minDiversity=]>

--- Incoming ---
['cv.MSER.getMinDiversity', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.MSER.getMinDiversity []>

--- Incoming ---
[   'cv.MSER.setMaxEvolution',
    'void',
    ['/V', '/PV'],
    [['int', 'maxEvolution', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMaxEvolution [ARG int maxEvolution=]>

--- Incoming ---
['cv.MSER.getMaxEvolution', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getMaxEvolution []>

--- Incoming ---
[   'cv.MSER.setAreaThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'areaThreshold', '', []]],
    'void']
ok: FUNC <void cv.MSER.setAreaThreshold [ARG double areaThreshold=]>

--- Incoming ---
['cv.MSER.getAreaThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.MSER.getAreaThreshold []>

--- Incoming ---
[   'cv.MSER.setMinMargin',
    'void',
    ['/V', '/PV'],
    [['double', 'min_margin', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMinMargin [ARG double min_margin=]>

--- Incoming ---
['cv.MSER.getMinMargin', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.MSER.getMinMargin []>

--- Incoming ---
[   'cv.MSER.setEdgeBlurSize',
    'void',
    ['/V', '/PV'],
    [['int', 'edge_blur_size', '', []]],
    'void']
ok: FUNC <void cv.MSER.setEdgeBlurSize [ARG int edge_blur_size=]>

--- Incoming ---
['cv.MSER.getEdgeBlurSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getEdgeBlurSize []>

--- Incoming ---
['cv.MSER.setPass2Only', 'void', ['/V', '/PV'], [['bool', 'f', '', []]], 'void']
ok: FUNC <void cv.MSER.setPass2Only [ARG bool f=]>

--- Incoming ---
['cv.MSER.getPass2Only', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.MSER.getPass2Only []>

--- Incoming ---
['cv.MSER.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.MSER.getDefaultName []>

--- Incoming ---
['class cv.FastFeatureDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.FastFeatureDetector : Feature2D, name: FastFeatureDetector, base: Feature2D

--- Incoming ---
[   'enum cv.FastFeatureDetector.DetectorType',
    '',
    [],
    [   ['const cv.FastFeatureDetector.TYPE_5_8', '0', [], [], None, ''],
        ['const cv.FastFeatureDetector.TYPE_7_12', '1', [], [], None, ''],
        ['const cv.FastFeatureDetector.TYPE_9_16', '2', [], [], None, '']],
    None]
ok: CONST TYPE_5_8=0
ok: CONST TYPE_7_12=1
ok: CONST TYPE_9_16=2

--- Incoming ---
[   'enum cv.FastFeatureDetector.<unnamed>',
    '',
    [],
    [   ['const cv.FastFeatureDetector.THRESHOLD', '10000', [], [], None, ''],
        [   'const cv.FastFeatureDetector.NONMAX_SUPPRESSION',
            '10001',
            [],
            [],
            None,
            ''],
        ['const cv.FastFeatureDetector.FAST_N', '10002', [], [], None, '']],
    None]
ok: CONST THRESHOLD=10000
ok: CONST NONMAX_SUPPRESSION=10001
ok: CONST FAST_N=10002

--- Incoming ---
[   'cv.FastFeatureDetector.create',
    'Ptr_FastFeatureDetector',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        [   'FastFeatureDetector_DetectorType',
            'type',
            'FastFeatureDetector::TYPE_9_16',
            []]],
    'Ptr<FastFeatureDetector>']
ok: FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG FastFeatureDetector_DetectorType type=FastFeatureDetector::TYPE_9_16]>

--- Incoming ---
[   'cv.FastFeatureDetector.setThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
['cv.FastFeatureDetector.getThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FastFeatureDetector.getThreshold []>

--- Incoming ---
[   'cv.FastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/V', '/PV'],
    [['bool', 'f', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[   'cv.FastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   'cv.FastFeatureDetector.setType',
    'void',
    ['/V', '/PV'],
    [['FastFeatureDetector_DetectorType', 'type', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setType [ARG FastFeatureDetector_DetectorType type=]>

--- Incoming ---
[   'cv.FastFeatureDetector.getType',
    'FastFeatureDetector_DetectorType',
    ['/C', '/V', '/PV'],
    [],
    'FastFeatureDetector::DetectorType']
ok: FUNC <FastFeatureDetector_DetectorType cv.FastFeatureDetector.getType []>

--- Incoming ---
['cv.FastFeatureDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.FastFeatureDetector.getDefaultName []>

--- Incoming ---
['class cv.AgastFeatureDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.AgastFeatureDetector : Feature2D, name: AgastFeatureDetector, base: Feature2D

--- Incoming ---
[   'enum cv.AgastFeatureDetector.DetectorType',
    '',
    [],
    [   ['const cv.AgastFeatureDetector.AGAST_5_8', '0', [], [], None, ''],
        ['const cv.AgastFeatureDetector.AGAST_7_12d', '1', [], [], None, ''],
        ['const cv.AgastFeatureDetector.AGAST_7_12s', '2', [], [], None, ''],
        ['const cv.AgastFeatureDetector.OAST_9_16', '3', [], [], None, '']],
    None]
ok: CONST AGAST_5_8=0
ok: CONST AGAST_7_12d=1
ok: CONST AGAST_7_12s=2
ok: CONST OAST_9_16=3

--- Incoming ---
[   'enum cv.AgastFeatureDetector.<unnamed>',
    '',
    [],
    [   ['const cv.AgastFeatureDetector.THRESHOLD', '10000', [], [], None, ''],
        [   'const cv.AgastFeatureDetector.NONMAX_SUPPRESSION',
            '10001',
            [],
            [],
            None,
            '']],
    None]
ok: CONST THRESHOLD=10000
ok: CONST NONMAX_SUPPRESSION=10001

--- Incoming ---
[   'cv.AgastFeatureDetector.create',
    'Ptr_AgastFeatureDetector',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        [   'AgastFeatureDetector_DetectorType',
            'type',
            'AgastFeatureDetector::OAST_9_16',
            []]],
    'Ptr<AgastFeatureDetector>']
ok: FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG AgastFeatureDetector_DetectorType type=AgastFeatureDetector::OAST_9_16]>

--- Incoming ---
[   'cv.AgastFeatureDetector.setThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
['cv.AgastFeatureDetector.getThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AgastFeatureDetector.getThreshold []>

--- Incoming ---
[   'cv.AgastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/V', '/PV'],
    [['bool', 'f', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[   'cv.AgastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   'cv.AgastFeatureDetector.setType',
    'void',
    ['/V', '/PV'],
    [['AgastFeatureDetector_DetectorType', 'type', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setType [ARG AgastFeatureDetector_DetectorType type=]>

--- Incoming ---
[   'cv.AgastFeatureDetector.getType',
    'AgastFeatureDetector_DetectorType',
    ['/C', '/V', '/PV'],
    [],
    'AgastFeatureDetector::DetectorType']
ok: FUNC <AgastFeatureDetector_DetectorType cv.AgastFeatureDetector.getType []>

--- Incoming ---
['cv.AgastFeatureDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.AgastFeatureDetector.getDefaultName []>

--- Incoming ---
['class cv.GFTTDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.GFTTDetector : Feature2D, name: GFTTDetector, base: Feature2D

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr_GFTTDetector',
    ['/S'],
    [   ['int', 'maxCorners', '1000', []],
        ['double', 'qualityLevel', '0.01', []],
        ['double', 'minDistance', '1', []],
        ['int', 'blockSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'Ptr<GFTTDetector>']
ok: FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr_GFTTDetector',
    ['/S'],
    [   ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['int', 'blockSize', '', []],
        ['int', 'gradiantSize', '', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'Ptr<GFTTDetector>']
ok: FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG int blockSize=, ARG int gradiantSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.GFTTDetector.setMaxFeatures',
    'void',
    ['/V', '/PV'],
    [['int', 'maxFeatures', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
['cv.GFTTDetector.getMaxFeatures', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GFTTDetector.getMaxFeatures []>

--- Incoming ---
[   'cv.GFTTDetector.setQualityLevel',
    'void',
    ['/V', '/PV'],
    [['double', 'qlevel', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>

--- Incoming ---
['cv.GFTTDetector.getQualityLevel', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getQualityLevel []>

--- Incoming ---
[   'cv.GFTTDetector.setMinDistance',
    'void',
    ['/V', '/PV'],
    [['double', 'minDistance', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>

--- Incoming ---
['cv.GFTTDetector.getMinDistance', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getMinDistance []>

--- Incoming ---
[   'cv.GFTTDetector.setBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.GFTTDetector.getBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GFTTDetector.getBlockSize []>

--- Incoming ---
[   'cv.GFTTDetector.setGradientSize',
    'void',
    ['/V', '/PV'],
    [['int', 'gradientSize_', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setGradientSize [ARG int gradientSize_=]>

--- Incoming ---
['cv.GFTTDetector.getGradientSize', 'int', ['/V', '/PV'], [], 'int']
ok: FUNC <int cv.GFTTDetector.getGradientSize []>

--- Incoming ---
[   'cv.GFTTDetector.setHarrisDetector',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>

--- Incoming ---
['cv.GFTTDetector.getHarrisDetector', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.GFTTDetector.getHarrisDetector []>

--- Incoming ---
[   'cv.GFTTDetector.setK',
    'void',
    ['/V', '/PV'],
    [['double', 'k', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setK [ARG double k=]>

--- Incoming ---
['cv.GFTTDetector.getK', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getK []>

--- Incoming ---
['cv.GFTTDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.GFTTDetector.getDefaultName []>

--- Incoming ---
['class cv.SimpleBlobDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.SimpleBlobDetector : Feature2D, name: SimpleBlobDetector, base: Feature2D

--- Incoming ---
[   'struct cv.SimpleBlobDetector.Params',
    '',
    ['/Simple'],
    [   ['float', 'thresholdStep', '', ['/RW']],
        ['float', 'minThreshold', '', ['/RW']],
        ['float', 'maxThreshold', '', ['/RW']],
        ['size_t', 'minRepeatability', '', ['/RW']],
        ['float', 'minDistBetweenBlobs', '', ['/RW']],
        ['bool', 'filterByColor', '', ['/RW']],
        ['uchar', 'blobColor', '', ['/RW']],
        ['bool', 'filterByArea', '', ['/RW']],
        ['float', 'minArea', '', ['/RW']],
        ['float', 'maxArea', '', ['/RW']],
        ['bool', 'filterByCircularity', '', ['/RW']],
        ['float', 'minCircularity', '', ['/RW']],
        ['float', 'maxCircularity', '', ['/RW']],
        ['bool', 'filterByInertia', '', ['/RW']],
        ['float', 'minInertiaRatio', '', ['/RW']],
        ['float', 'maxInertiaRatio', '', ['/RW']],
        ['bool', 'filterByConvexity', '', ['/RW']],
        ['float', 'minConvexity', '', ['/RW']],
        ['float', 'maxConvexity', '', ['/RW']],
        ['bool', 'collectContours', '', ['/RW']]],
    None]
ok: class CLASS cv::SimpleBlobDetector.SimpleBlobDetector_Params : , name: SimpleBlobDetector_Params, base: 

--- Incoming ---
['cv.SimpleBlobDetector.Params.Params', '', [], [], None]
ok: FUNC < cv.SimpleBlobDetector.Params.SimpleBlobDetector_Params []>

--- Incoming ---
[   'cv.SimpleBlobDetector.create',
    'Ptr_SimpleBlobDetector',
    ['/S'],
    [   [   'SimpleBlobDetector_Params',
            'parameters',
            'SimpleBlobDetector::Params()',
            ['/C', '/Ref']]],
    'Ptr<SimpleBlobDetector>']
ok: FUNC <Ptr_SimpleBlobDetector cv.SimpleBlobDetector.create [ARG SimpleBlobDetector_Params parameters=SimpleBlobDetector::Params()]>

--- Incoming ---
[   'cv.SimpleBlobDetector.setParams',
    'void',
    ['/V', '/PV'],
    [['SimpleBlobDetector_Params', 'params', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.SimpleBlobDetector.setParams [ARG SimpleBlobDetector_Params params=]>

--- Incoming ---
[   'cv.SimpleBlobDetector.getParams',
    'SimpleBlobDetector_Params',
    ['/C', '/V', '/PV'],
    [],
    'SimpleBlobDetector::Params']
ok: FUNC <SimpleBlobDetector_Params cv.SimpleBlobDetector.getParams []>

--- Incoming ---
['cv.SimpleBlobDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.SimpleBlobDetector.getDefaultName []>

--- Incoming ---
[   'cv.SimpleBlobDetector.getBlobContours',
    'vector_vector_Point',
    ['/C', '/V'],
    [],
    'std::vector<std::vector<cv::Point> >']
ok: FUNC <vector_vector_Point cv.SimpleBlobDetector.getBlobContours []>

--- Incoming ---
['class cv.KAZE', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.KAZE : Feature2D, name: KAZE, base: Feature2D

--- Incoming ---
[   'enum cv.KAZE.DiffusivityType',
    '',
    [],
    [   ['const cv.KAZE.DIFF_PM_G1', '0', [], [], None, ''],
        ['const cv.KAZE.DIFF_PM_G2', '1', [], [], None, ''],
        ['const cv.KAZE.DIFF_WEICKERT', '2', [], [], None, ''],
        ['const cv.KAZE.DIFF_CHARBONNIER', '3', [], [], None, '']],
    None]
ok: CONST DIFF_PM_G1=0
ok: CONST DIFF_PM_G2=1
ok: CONST DIFF_WEICKERT=2
ok: CONST DIFF_CHARBONNIER=3

--- Incoming ---
[   'cv.KAZE.create',
    'Ptr_KAZE',
    ['/S'],
    [   ['bool', 'extended', 'false', []],
        ['bool', 'upright', 'false', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['KAZE_DiffusivityType', 'diffusivity', 'KAZE::DIFF_PM_G2', []]],
    'Ptr<KAZE>']
ok: FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2]>

--- Incoming ---
[   'cv.KAZE.setExtended',
    'void',
    ['/V', '/PV'],
    [['bool', 'extended', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setExtended [ARG bool extended=]>

--- Incoming ---
['cv.KAZE.getExtended', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.KAZE.getExtended []>

--- Incoming ---
[   'cv.KAZE.setUpright',
    'void',
    ['/V', '/PV'],
    [['bool', 'upright', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setUpright [ARG bool upright=]>

--- Incoming ---
['cv.KAZE.getUpright', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.KAZE.getUpright []>

--- Incoming ---
[   'cv.KAZE.setThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
['cv.KAZE.getThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.KAZE.getThreshold []>

--- Incoming ---
[   'cv.KAZE.setNOctaves',
    'void',
    ['/V', '/PV'],
    [['int', 'octaves', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
['cv.KAZE.getNOctaves', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.KAZE.getNOctaves []>

--- Incoming ---
[   'cv.KAZE.setNOctaveLayers',
    'void',
    ['/V', '/PV'],
    [['int', 'octaveLayers', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
['cv.KAZE.getNOctaveLayers', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.KAZE.getNOctaveLayers []>

--- Incoming ---
[   'cv.KAZE.setDiffusivity',
    'void',
    ['/V', '/PV'],
    [['KAZE_DiffusivityType', 'diff', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setDiffusivity [ARG KAZE_DiffusivityType diff=]>

--- Incoming ---
[   'cv.KAZE.getDiffusivity',
    'KAZE_DiffusivityType',
    ['/C', '/V', '/PV'],
    [],
    'KAZE::DiffusivityType']
ok: FUNC <KAZE_DiffusivityType cv.KAZE.getDiffusivity []>

--- Incoming ---
['cv.KAZE.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.KAZE.getDefaultName []>

--- Incoming ---
['class cv.AKAZE', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.AKAZE : Feature2D, name: AKAZE, base: Feature2D

--- Incoming ---
[   'enum cv.AKAZE.DescriptorType',
    '',
    [],
    [   ['const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT', '2', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_KAZE', '3', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT', '4', [], [], None, ''],
        ['const cv.AKAZE.DESCRIPTOR_MLDB', '5', [], [], None, '']],
    None]
ok: CONST DESCRIPTOR_KAZE_UPRIGHT=2
ok: CONST DESCRIPTOR_KAZE=3
ok: CONST DESCRIPTOR_MLDB_UPRIGHT=4
ok: CONST DESCRIPTOR_MLDB=5

--- Incoming ---
[   'cv.AKAZE.create',
    'Ptr_AKAZE',
    ['/S'],
    [   [   'AKAZE_DescriptorType',
            'descriptor_type',
            'AKAZE::DESCRIPTOR_MLDB',
            []],
        ['int', 'descriptor_size', '0', []],
        ['int', 'descriptor_channels', '3', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['KAZE_DiffusivityType', 'diffusivity', 'KAZE::DIFF_PM_G2', []],
        ['int', 'max_points', '-1', []]],
    'Ptr<AKAZE>']
ok: FUNC <Ptr_AKAZE cv.AKAZE.create [ARG AKAZE_DescriptorType descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2, ARG int max_points=-1]>

--- Incoming ---
[   'cv.AKAZE.setDescriptorType',
    'void',
    ['/V', '/PV'],
    [['AKAZE_DescriptorType', 'dtype', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorType [ARG AKAZE_DescriptorType dtype=]>

--- Incoming ---
[   'cv.AKAZE.getDescriptorType',
    'AKAZE_DescriptorType',
    ['/C', '/V', '/PV'],
    [],
    'AKAZE::DescriptorType']
ok: FUNC <AKAZE_DescriptorType cv.AKAZE.getDescriptorType []>

--- Incoming ---
[   'cv.AKAZE.setDescriptorSize',
    'void',
    ['/V', '/PV'],
    [['int', 'dsize', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>

--- Incoming ---
['cv.AKAZE.getDescriptorSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDescriptorSize []>

--- Incoming ---
[   'cv.AKAZE.setDescriptorChannels',
    'void',
    ['/V', '/PV'],
    [['int', 'dch', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>

--- Incoming ---
['cv.AKAZE.getDescriptorChannels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDescriptorChannels []>

--- Incoming ---
[   'cv.AKAZE.setThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
['cv.AKAZE.getThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.AKAZE.getThreshold []>

--- Incoming ---
[   'cv.AKAZE.setNOctaves',
    'void',
    ['/V', '/PV'],
    [['int', 'octaves', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
['cv.AKAZE.getNOctaves', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getNOctaves []>

--- Incoming ---
[   'cv.AKAZE.setNOctaveLayers',
    'void',
    ['/V', '/PV'],
    [['int', 'octaveLayers', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
['cv.AKAZE.getNOctaveLayers', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getNOctaveLayers []>

--- Incoming ---
[   'cv.AKAZE.setDiffusivity',
    'void',
    ['/V', '/PV'],
    [['KAZE_DiffusivityType', 'diff', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDiffusivity [ARG KAZE_DiffusivityType diff=]>

--- Incoming ---
[   'cv.AKAZE.getDiffusivity',
    'KAZE_DiffusivityType',
    ['/C', '/V', '/PV'],
    [],
    'KAZE::DiffusivityType']
ok: FUNC <KAZE_DiffusivityType cv.AKAZE.getDiffusivity []>

--- Incoming ---
['cv.AKAZE.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.AKAZE.getDefaultName []>

--- Incoming ---
[   'cv.AKAZE.setMaxPoints',
    'void',
    ['/V', '/PV'],
    [['int', 'max_points', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setMaxPoints [ARG int max_points=]>

--- Incoming ---
['cv.AKAZE.getMaxPoints', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getMaxPoints []>

--- Incoming ---
['class cv.DescriptorMatcher', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.DescriptorMatcher : Algorithm, name: DescriptorMatcher, base: Algorithm

--- Incoming ---
[   'enum cv.DescriptorMatcher.MatcherType',
    '',
    [],
    [   ['const cv.DescriptorMatcher.FLANNBASED', '1', [], [], None, ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE', '2', [], [], None, ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE_L1', '3', [], [], None, ''],
        [   'const cv.DescriptorMatcher.BRUTEFORCE_HAMMING',
            '4',
            [],
            [],
            None,
            ''],
        [   'const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT',
            '5',
            [],
            [],
            None,
            ''],
        ['const cv.DescriptorMatcher.BRUTEFORCE_SL2', '6', [], [], None, '']],
    None]
ok: CONST FLANNBASED=1
ok: CONST BRUTEFORCE=2
ok: CONST BRUTEFORCE_L1=3
ok: CONST BRUTEFORCE_HAMMING=4
ok: CONST BRUTEFORCE_HAMMINGLUT=5
ok: CONST BRUTEFORCE_SL2=6

--- Incoming ---
[   'cv.DescriptorMatcher.add',
    'void',
    ['/V'],
    [['vector_Mat', 'descriptors', '', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>

--- Incoming ---
[   'cv.DescriptorMatcher.getTrainDescriptors',
    'vector_Mat',
    ['/C'],
    [],
    'std::vector<Mat>']
ok: FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>

--- Incoming ---
['cv.DescriptorMatcher.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.DescriptorMatcher.clear []>

--- Incoming ---
['cv.DescriptorMatcher.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.DescriptorMatcher.empty []>

--- Incoming ---
[   'cv.DescriptorMatcher.isMaskSupported',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.DescriptorMatcher.isMaskSupported []>

--- Incoming ---
['cv.DescriptorMatcher.train', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.DescriptorMatcher.train []>

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['int', 'k', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['float', 'maxDistance', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['vector_Mat', 'masks', 'vector_Mat()', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['int', 'k', '', []],
        ['vector_Mat', 'masks', 'vector_Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['float', 'maxDistance', '', []],
        ['vector_Mat', 'masks', 'vector_Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [['String', 'fileName', '', ['/C', '/Ref', '/PATH']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    [],
    [['String', 'fileName', '', ['/C', '/Ref', '/PATH']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    ['/V'],
    [['FileNode', 'arg1', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.read [ARG FileNode arg1=]>

--- Incoming ---
[   'cv.DescriptorMatcher.clone',
    'Ptr_DescriptorMatcher',
    ['/C', '/V', '/PV'],
    [['bool', 'emptyTrainData', 'false', []]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr_DescriptorMatcher',
    ['/S'],
    [['String', 'descriptorMatcherType', '', ['/C', '/Ref']]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr_DescriptorMatcher',
    ['/S'],
    [['DescriptorMatcher_MatcherType', 'matcherType', '', ['/C', '/Ref']]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG DescriptorMatcher_MatcherType matcherType=]>

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.write [ARG FileStorage fs=, ARG String name=]>

--- Incoming ---
['class cv.BFMatcher', ': cv::DescriptorMatcher', [], [], None]
ok: class CLASS cv::.BFMatcher : DescriptorMatcher, name: BFMatcher, base: DescriptorMatcher

--- Incoming ---
[   'cv.BFMatcher.BFMatcher',
    '',
    [],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    None]
ok: FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
[   'cv.BFMatcher.create',
    'Ptr_BFMatcher',
    ['/S'],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    'Ptr<BFMatcher>']
ok: FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
['class cv.FlannBasedMatcher', ': cv::DescriptorMatcher', [], [], None]
ok: class CLASS cv::.FlannBasedMatcher : DescriptorMatcher, name: FlannBasedMatcher, base: DescriptorMatcher

--- Incoming ---
[   'cv.FlannBasedMatcher.FlannBasedMatcher',
    '',
    [],
    [   [   'Ptr_flann_IndexParams',
            'indexParams',
            'makePtr<flann::KDTreeIndexParams>()',
            ['/C', '/Ref']],
        [   'Ptr_flann_SearchParams',
            'searchParams',
            'makePtr<flann::SearchParams>()',
            ['/C', '/Ref']]],
    None]
ok: FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>

--- Incoming ---
[   'cv.FlannBasedMatcher.create',
    'Ptr_FlannBasedMatcher',
    ['/S'],
    [],
    'Ptr<FlannBasedMatcher>']
ok: FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>

--- Incoming ---
[   'enum struct cv.DrawMatchesFlags',
    '',
    [],
    [   ['const cv.DrawMatchesFlags.DEFAULT', '0', [], [], None, ''],
        ['const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG', '1', [], [], None, ''],
        [   'const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS',
            '2',
            [],
            [],
            None,
            ''],
        [   'const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS',
            '4',
            [],
            [],
            None,
            '']],
    None]
class not found: CONST DEFAULT=0
ok: CONST DrawMatchesFlags_DEFAULT=0
class not found: CONST DRAW_OVER_OUTIMG=1
ok: CONST DrawMatchesFlags_DRAW_OVER_OUTIMG=1
class not found: CONST NOT_DRAW_SINGLE_POINTS=2
ok: CONST DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS=2
class not found: CONST DRAW_RICH_KEYPOINTS=4
ok: CONST DrawMatchesFlags_DRAW_RICH_KEYPOINTS=4

--- Incoming ---
[   'cv.drawKeypoints',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/C', '/Ref']],
        ['Mat', 'outImage', '', ['/IO']],
        ['Scalar', 'color', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   'cv.drawMatches',
    'void',
    [],
    [   ['Mat', 'img1', '', []],
        ['vector_KeyPoint', 'keypoints1', '', ['/C', '/Ref']],
        ['Mat', 'img2', '', []],
        ['vector_KeyPoint', 'keypoints2', '', ['/C', '/Ref']],
        ['vector_DMatch', 'matches1to2', '', ['/C', '/Ref']],
        ['Mat', 'outImg', '', ['/IO']],
        ['Scalar', 'matchColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['Scalar', 'singlePointColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['vector_char', 'matchesMask', 'std::vector<char>()', ['/C', '/Ref']],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   'cv.drawMatches',
    'void',
    [],
    [   ['Mat', 'img1', '', []],
        ['vector_KeyPoint', 'keypoints1', '', ['/C', '/Ref']],
        ['Mat', 'img2', '', []],
        ['vector_KeyPoint', 'keypoints2', '', ['/C', '/Ref']],
        ['vector_DMatch', 'matches1to2', '', ['/C', '/Ref']],
        ['Mat', 'outImg', '', ['/IO']],
        ['int', 'matchesThickness', '', ['/C']],
        ['Scalar', 'matchColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['Scalar', 'singlePointColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['vector_char', 'matchesMask', 'std::vector<char>()', ['/C', '/Ref']],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG int matchesThickness=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   'cv.drawMatches',
    'void',
    ['=drawMatchesKnn'],
    [   ['Mat', 'img1', '', []],
        ['vector_KeyPoint', 'keypoints1', '', ['/C', '/Ref']],
        ['Mat', 'img2', '', []],
        ['vector_KeyPoint', 'keypoints2', '', ['/C', '/Ref']],
        ['vector_vector_DMatch', 'matches1to2', '', ['/C', '/Ref']],
        ['Mat', 'outImg', '', ['/IO']],
        ['Scalar', 'matchColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['Scalar', 'singlePointColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        [   'vector_vector_char',
            'matchesMask',
            'std::vector<std::vector<char> >()',
            ['/C', '/Ref']],
        ['DrawMatchesFlags', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
['class cv.BOWTrainer', '', [], [], None]
ok: class CLASS cv::.BOWTrainer : , name: BOWTrainer, base: 

--- Incoming ---
[   'cv.BOWTrainer.add',
    'void',
    [],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>

--- Incoming ---
['cv.BOWTrainer.getDescriptors', 'vector_Mat', ['/C'], [], 'std::vector<Mat>']
ok: FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>

--- Incoming ---
['cv.BOWTrainer.descriptorsCount', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWTrainer.descriptorsCount []>

--- Incoming ---
['cv.BOWTrainer.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.BOWTrainer.clear []>

--- Incoming ---
['cv.BOWTrainer.cluster', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster []>

--- Incoming ---
[   'cv.BOWTrainer.cluster',
    'Mat',
    ['/C', '/V', '/PV'],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
['class cv.BOWKMeansTrainer', ': cv::BOWTrainer', [], [], None]
ok: class CLASS cv::.BOWKMeansTrainer : BOWTrainer, name: BOWKMeansTrainer, base: BOWTrainer

--- Incoming ---
[   'cv.BOWKMeansTrainer.BOWKMeansTrainer',
    '',
    [],
    [   ['int', 'clusterCount', '', []],
        ['TermCriteria', 'termcrit', 'TermCriteria()', ['/C', '/Ref']],
        ['int', 'attempts', '3', []],
        ['int', 'flags', 'KMEANS_PP_CENTERS', []]],
    None]
ok: FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>

--- Incoming ---
['cv.BOWKMeansTrainer.cluster', 'Mat', ['/C', '/V'], [], 'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster []>

--- Incoming ---
[   'cv.BOWKMeansTrainer.cluster',
    'Mat',
    ['/C', '/V'],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
['class cv.BOWImgDescriptorExtractor', '', [], [], None]
ok: class CLASS cv::.BOWImgDescriptorExtractor : , name: BOWImgDescriptorExtractor, base: 

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor',
    '',
    [],
    [   ['Ptr_Feature2D', 'dextractor', '', ['/C', '/Ref']],
        ['Ptr_DescriptorMatcher', 'dmatcher', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_Feature2D dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.setVocabulary',
    'void',
    [],
    [['Mat', 'vocabulary', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.getVocabulary', 'Mat', ['/C'], [], 'Mat']
ok: FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.compute2',
    'void',
    ['=compute'],
    [   ['Mat', 'image', '', ['/C', '/Ref']],
        ['vector_KeyPoint', 'keypoints', '', ['/Ref']],
        ['Mat', 'imgDescriptor', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.descriptorSize', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.descriptorType', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>


===== Generating... =====
CLASS cv::.AKAZE : Feature2D
[CONST DESCRIPTOR_KAZE_UPRIGHT=2, CONST DESCRIPTOR_KAZE=3, CONST DESCRIPTOR_MLDB_UPRIGHT=4, CONST DESCRIPTOR_MLDB=5]
FUNC <Ptr_AKAZE cv.AKAZE.create [ARG AKAZE_DescriptorType descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2, ARG int max_points=-1]>
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers, int diffusivity, int max_points)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels)
java: AKAZE create(int descriptor_type, int descriptor_size)
java: AKAZE create(int descriptor_type)
java: AKAZE create()
FUNC <void cv.AKAZE.setDescriptorType [ARG AKAZE_DescriptorType dtype=]>
java: void setDescriptorType(int dtype)
FUNC <AKAZE_DescriptorType cv.AKAZE.getDescriptorType []>
java: int getDescriptorType()
FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>
java: void setDescriptorSize(int dsize)
FUNC <int cv.AKAZE.getDescriptorSize []>
java: int getDescriptorSize()
FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>
java: void setDescriptorChannels(int dch)
FUNC <int cv.AKAZE.getDescriptorChannels []>
java: int getDescriptorChannels()
FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
FUNC <double cv.AKAZE.getThreshold []>
java: double getThreshold()
FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <int cv.AKAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <int cv.AKAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <void cv.AKAZE.setDiffusivity [ARG KAZE_DiffusivityType diff=]>
java: void setDiffusivity(int diff)
FUNC <KAZE_DiffusivityType cv.AKAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <String cv.AKAZE.getDefaultName []>
java: String getDefaultName()
FUNC <void cv.AKAZE.setMaxPoints [ARG int max_points=]>
java: void setMaxPoints(int max_points)
FUNC <int cv.AKAZE.getMaxPoints []>
java: int getMaxPoints()
CLASS cv::.AffineFeature : Feature2D
FUNC <Ptr_AffineFeature cv.AffineFeature.create [ARG Ptr_Feature2D backend=, ARG int maxTilt=5, ARG int minTilt=0, ARG float tiltStep=1.4142135623730951f, ARG float rotateStepBase=72]>
java: AffineFeature create(Feature2D backend, int maxTilt, int minTilt, float tiltStep, float rotateStepBase)
java: AffineFeature create(Feature2D backend, int maxTilt, int minTilt, float tiltStep)
java: AffineFeature create(Feature2D backend, int maxTilt, int minTilt)
java: AffineFeature create(Feature2D backend, int maxTilt)
java: AffineFeature create(Feature2D backend)
FUNC <void cv.AffineFeature.setViewParams [ARG vector_float tilts=, ARG vector_float rolls=]>
java: void setViewParams(MatOfFloat tilts, MatOfFloat rolls)
FUNC <void cv.AffineFeature.getViewParams [ARG vector_float tilts=, ARG vector_float rolls=]>
java: void getViewParams(MatOfFloat tilts, MatOfFloat rolls)
FUNC <String cv.AffineFeature.getDefaultName []>
java: String getDefaultName()
CLASS cv::.AgastFeatureDetector : Feature2D
[CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001]
[CONST AGAST_5_8=0, CONST AGAST_7_12d=1, CONST AGAST_7_12s=2, CONST OAST_9_16=3]
FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG AgastFeatureDetector_DetectorType type=AgastFeatureDetector::OAST_9_16]>
java: AgastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: AgastFeatureDetector create(int threshold, boolean nonmaxSuppression)
java: AgastFeatureDetector create(int threshold)
java: AgastFeatureDetector create()
FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <int cv.AgastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <void cv.AgastFeatureDetector.setType [ARG AgastFeatureDetector_DetectorType type=]>
java: void setType(int type)
FUNC <AgastFeatureDetector_DetectorType cv.AgastFeatureDetector.getType []>
java: int getType()
FUNC <String cv.AgastFeatureDetector.getDefaultName []>
java: String getDefaultName()
CLASS cv::.BFMatcher : DescriptorMatcher
FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java:  BFMatcher(int normType, boolean crossCheck)
java:  BFMatcher(int normType)
java:  BFMatcher()
FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java: BFMatcher create(int normType, boolean crossCheck)
java: BFMatcher create(int normType)
java: BFMatcher create()
CLASS cv::.BOWImgDescriptorExtractor : 
FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_Feature2D dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>
java:  BOWImgDescriptorExtractor(Feature2D dextractor, DescriptorMatcher dmatcher)
FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>
java: void setVocabulary(Mat vocabulary)
FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>
java: Mat getVocabulary()
FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat imgDescriptor)
FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>
java: int descriptorType()
CLASS cv::.BOWKMeansTrainer : BOWTrainer
FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit, int attempts, int flags)
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit, int attempts)
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit)
java:  BOWKMeansTrainer(int clusterCount)
FUNC <Mat cv.BOWKMeansTrainer.cluster []>
java: Mat cluster()
FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
CLASS cv::.BOWTrainer : 
FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>
java: void add(Mat descriptors)
FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>
java: List<Mat> getDescriptors()
FUNC <int cv.BOWTrainer.descriptorsCount []>
java: int descriptorsCount()
FUNC <void cv.BOWTrainer.clear []>
java: void clear()
FUNC <Mat cv.BOWTrainer.cluster []>
java: Mat cluster()
FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
CLASS cv::.BRISK : Feature2D
FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>
java: BRISK create(int thresh, int octaves, float patternScale)
java: BRISK create(int thresh, int octaves)
java: BRISK create(int thresh)
java: BRISK create()
FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin, MatOfInt indexChange)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList)
FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=, ARG int octaves=, ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin, MatOfInt indexChange)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList)
FUNC <String cv.BRISK.getDefaultName []>
java: String getDefaultName()
FUNC <void cv.BRISK.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <int cv.BRISK.getThreshold []>
java: int getThreshold()
FUNC <void cv.BRISK.setOctaves [ARG int octaves=]>
java: void setOctaves(int octaves)
FUNC <int cv.BRISK.getOctaves []>
java: int getOctaves()
FUNC <void cv.BRISK.setPatternScale [ARG float patternScale=]>
java: void setPatternScale(float patternScale)
FUNC <float cv.BRISK.getPatternScale []>
java: float getPatternScale()
CLASS cv::.DescriptorMatcher : Algorithm
[CONST FLANNBASED=1, CONST BRUTEFORCE=2, CONST BRUTEFORCE_L1=3, CONST BRUTEFORCE_HAMMING=4, CONST BRUTEFORCE_HAMMINGLUT=5, CONST BRUTEFORCE_SL2=6]
FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>
java: void add(List<Mat> descriptors)
FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>
java: List<Mat> getTrainDescriptors()
FUNC <void cv.DescriptorMatcher.clear []>
java: void clear()
FUNC <bool cv.DescriptorMatcher.empty []>
java: boolean empty()
FUNC <bool cv.DescriptorMatcher.isMaskSupported []>
java: boolean isMaskSupported()
FUNC <void cv.DescriptorMatcher.train []>
java: void train()
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches, Mat mask)
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k, Mat mask, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k, Mat mask)
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance, Mat mask, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance, Mat mask)
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>
java: void match(Mat queryDescriptors, MatOfDMatch matches, List<Mat> masks)
java: void match(Mat queryDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k, List<Mat> masks, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k, List<Mat> masks)
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance, List<Mat> masks, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance, List<Mat> masks)
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>
java: void write(String fileName)
FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.DescriptorMatcher.read [ARG FileNode arg1=]>
SKIP:void cv::DescriptorMatcher::read(FileNode arg1)	 due to ARG type FileNode/I
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>
java: DescriptorMatcher clone(boolean emptyTrainData)
java: DescriptorMatcher clone()
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>
java: DescriptorMatcher create(String descriptorMatcherType)
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG DescriptorMatcher_MatcherType matcherType=]>
java: DescriptorMatcher create(int matcherType)
FUNC <void cv.DescriptorMatcher.write [ARG FileStorage fs=, ARG String name=]>
SKIP:void cv::DescriptorMatcher::write(FileStorage fs, String name)	 due to ARG type FileStorage/I
CLASS cv::.FastFeatureDetector : Feature2D
[CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001, CONST FAST_N=10002]
[CONST TYPE_5_8=0, CONST TYPE_7_12=1, CONST TYPE_9_16=2]
FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG FastFeatureDetector_DetectorType type=FastFeatureDetector::TYPE_9_16]>
java: FastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: FastFeatureDetector create(int threshold, boolean nonmaxSuppression)
java: FastFeatureDetector create(int threshold)
java: FastFeatureDetector create()
FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <int cv.FastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <void cv.FastFeatureDetector.setType [ARG FastFeatureDetector_DetectorType type=]>
java: void setType(int type)
FUNC <FastFeatureDetector_DetectorType cv.FastFeatureDetector.getType []>
java: int getType()
FUNC <String cv.FastFeatureDetector.getDefaultName []>
java: String getDefaultName()
CLASS cv::.Feature2D : Algorithm
FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>
java: void detect(Mat image, MatOfKeyPoint keypoints, Mat mask)
java: void detect(Mat image, MatOfKeyPoint keypoints)
FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks)
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints)
FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>
java: void compute(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> descriptors)
FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors, boolean useProvidedKeypoints)
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <int cv.Feature2D.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.Feature2D.descriptorType []>
java: int descriptorType()
FUNC <int cv.Feature2D.defaultNorm []>
java: int defaultNorm()
FUNC <void cv.Feature2D.write [ARG String fileName=]>
java: void write(String fileName)
FUNC <void cv.Feature2D.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.Feature2D.read [ARG FileNode arg1=]>
SKIP:void cv::Feature2D::read(FileNode arg1)	 due to ARG type FileNode/I
FUNC <bool cv.Feature2D.empty []>
java: boolean empty()
FUNC <String cv.Feature2D.getDefaultName []>
java: String getDefaultName()
FUNC <void cv.Feature2D.write [ARG FileStorage fs=, ARG String name=]>
SKIP:void cv::Feature2D::write(FileStorage fs, String name)	 due to ARG type FileStorage/I
CLASS cv::.Features2d : 
[CONST DrawMatchesFlags_DEFAULT=0, CONST DrawMatchesFlags_DRAW_OVER_OUTIMG=1, CONST DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS=2, CONST DrawMatchesFlags_DRAW_RICH_KEYPOINTS=4]
FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage, Scalar color, int flags)
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage, Scalar color)
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask, int flags)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG int matchesThickness=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, int matchesThickness, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask, int flags)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, int matchesThickness, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, int matchesThickness, Scalar matchColor, Scalar singlePointColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, int matchesThickness, Scalar matchColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, int matchesThickness)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG DrawMatchesFlags flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask, int flags)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg)
CLASS cv::.FlannBasedMatcher : DescriptorMatcher
FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>
java:  FlannBasedMatcher()
java:  FlannBasedMatcher()
java:  FlannBasedMatcher()
FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>
java: FlannBasedMatcher create()
CLASS cv::.GFTTDetector : Feature2D
FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, boolean useHarrisDetector, double k)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, boolean useHarrisDetector)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance)
java: GFTTDetector create(int maxCorners, double qualityLevel)
java: GFTTDetector create(int maxCorners)
java: GFTTDetector create()
FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG int blockSize=, ARG int gradiantSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize, boolean useHarrisDetector, double k)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize, boolean useHarrisDetector)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize)
FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <int cv.GFTTDetector.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>
java: void setQualityLevel(double qlevel)
FUNC <double cv.GFTTDetector.getQualityLevel []>
java: double getQualityLevel()
FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>
java: void setMinDistance(double minDistance)
FUNC <double cv.GFTTDetector.getMinDistance []>
java: double getMinDistance()
FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>
java: void setBlockSize(int blockSize)
FUNC <int cv.GFTTDetector.getBlockSize []>
java: int getBlockSize()
FUNC <void cv.GFTTDetector.setGradientSize [ARG int gradientSize_=]>
java: void setGradientSize(int gradientSize_)
FUNC <int cv.GFTTDetector.getGradientSize []>
java: int getGradientSize()
FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>
java: void setHarrisDetector(boolean val)
FUNC <bool cv.GFTTDetector.getHarrisDetector []>
java: boolean getHarrisDetector()
FUNC <void cv.GFTTDetector.setK [ARG double k=]>
java: void setK(double k)
FUNC <double cv.GFTTDetector.getK []>
java: double getK()
FUNC <String cv.GFTTDetector.getDefaultName []>
java: String getDefaultName()
CLASS cv::.KAZE : Feature2D
[CONST DIFF_PM_G1=0, CONST DIFF_PM_G2=1, CONST DIFF_WEICKERT=2, CONST DIFF_CHARBONNIER=3]
FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG KAZE_DiffusivityType diffusivity=KAZE::DIFF_PM_G2]>
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves, int nOctaveLayers)
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves)
java: KAZE create(boolean extended, boolean upright, float threshold)
java: KAZE create(boolean extended, boolean upright)
java: KAZE create(boolean extended)
java: KAZE create()
FUNC <void cv.KAZE.setExtended [ARG bool extended=]>
java: void setExtended(boolean extended)
FUNC <bool cv.KAZE.getExtended []>
java: boolean getExtended()
FUNC <void cv.KAZE.setUpright [ARG bool upright=]>
java: void setUpright(boolean upright)
FUNC <bool cv.KAZE.getUpright []>
java: boolean getUpright()
FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
FUNC <double cv.KAZE.getThreshold []>
java: double getThreshold()
FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <int cv.KAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <int cv.KAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <void cv.KAZE.setDiffusivity [ARG KAZE_DiffusivityType diff=]>
java: void setDiffusivity(int diff)
FUNC <KAZE_DiffusivityType cv.KAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <String cv.KAZE.getDefaultName []>
java: String getDefaultName()
CLASS cv::.MSER : Feature2D
FUNC <Ptr_MSER cv.MSER.create [ARG int delta=5, ARG int min_area=60, ARG int max_area=14400, ARG double max_variation=0.25, ARG double min_diversity=.2, ARG int max_evolution=200, ARG double area_threshold=1.01, ARG double min_margin=0.003, ARG int edge_blur_size=5]>
java: MSER create(int delta, int min_area, int max_area, double max_variation, double min_diversity, int max_evolution, double area_threshold, double min_margin, int edge_blur_size)
java: MSER create(int delta, int min_area, int max_area, double max_variation, double min_diversity, int max_evolution, double area_threshold, double min_margin)
java: MSER create(int delta, int min_area, int max_area, double max_variation, double min_diversity, int max_evolution, double area_threshold)
java: MSER create(int delta, int min_area, int max_area, double max_variation, double min_diversity, int max_evolution)
java: MSER create(int delta, int min_area, int max_area, double max_variation, double min_diversity)
java: MSER create(int delta, int min_area, int max_area, double max_variation)
java: MSER create(int delta, int min_area, int max_area)
java: MSER create(int delta, int min_area)
java: MSER create(int delta)
java: MSER create()
FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>
java: void detectRegions(Mat image, List<MatOfPoint> msers, MatOfRect bboxes)
FUNC <void cv.MSER.setDelta [ARG int delta=]>
java: void setDelta(int delta)
FUNC <int cv.MSER.getDelta []>
java: int getDelta()
FUNC <void cv.MSER.setMinArea [ARG int minArea=]>
java: void setMinArea(int minArea)
FUNC <int cv.MSER.getMinArea []>
java: int getMinArea()
FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>
java: void setMaxArea(int maxArea)
FUNC <int cv.MSER.getMaxArea []>
java: int getMaxArea()
FUNC <void cv.MSER.setMaxVariation [ARG double maxVariation=]>
java: void setMaxVariation(double maxVariation)
FUNC <double cv.MSER.getMaxVariation []>
java: double getMaxVariation()
FUNC <void cv.MSER.setMinDiversity [ARG double minDiversity=]>
java: void setMinDiversity(double minDiversity)
FUNC <double cv.MSER.getMinDiversity []>
java: double getMinDiversity()
FUNC <void cv.MSER.setMaxEvolution [ARG int maxEvolution=]>
java: void setMaxEvolution(int maxEvolution)
FUNC <int cv.MSER.getMaxEvolution []>
java: int getMaxEvolution()
FUNC <void cv.MSER.setAreaThreshold [ARG double areaThreshold=]>
java: void setAreaThreshold(double areaThreshold)
FUNC <double cv.MSER.getAreaThreshold []>
java: double getAreaThreshold()
FUNC <void cv.MSER.setMinMargin [ARG double min_margin=]>
java: void setMinMargin(double min_margin)
FUNC <double cv.MSER.getMinMargin []>
java: double getMinMargin()
FUNC <void cv.MSER.setEdgeBlurSize [ARG int edge_blur_size=]>
java: void setEdgeBlurSize(int edge_blur_size)
FUNC <int cv.MSER.getEdgeBlurSize []>
java: int getEdgeBlurSize()
FUNC <void cv.MSER.setPass2Only [ARG bool f=]>
java: void setPass2Only(boolean f)
FUNC <bool cv.MSER.getPass2Only []>
java: boolean getPass2Only()
FUNC <String cv.MSER.getDefaultName []>
java: String getDefaultName()
CLASS cv::.ORB : Feature2D
[CONST HARRIS_SCORE=0, CONST FAST_SCORE=1]
FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG ORB_ScoreType scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize, int fastThreshold)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold)
java: ORB create(int nfeatures, float scaleFactor, int nlevels)
java: ORB create(int nfeatures, float scaleFactor)
java: ORB create(int nfeatures)
java: ORB create()
FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <int cv.ORB.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>
java: void setScaleFactor(double scaleFactor)
FUNC <double cv.ORB.getScaleFactor []>
java: double getScaleFactor()
FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>
java: void setNLevels(int nlevels)
FUNC <int cv.ORB.getNLevels []>
java: int getNLevels()
FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>
java: void setEdgeThreshold(int edgeThreshold)
FUNC <int cv.ORB.getEdgeThreshold []>
java: int getEdgeThreshold()
FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>
java: void setFirstLevel(int firstLevel)
FUNC <int cv.ORB.getFirstLevel []>
java: int getFirstLevel()
FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>
java: void setWTA_K(int wta_k)
FUNC <int cv.ORB.getWTA_K []>
java: int getWTA_K()
FUNC <void cv.ORB.setScoreType [ARG ORB_ScoreType scoreType=]>
java: void setScoreType(int scoreType)
FUNC <ORB_ScoreType cv.ORB.getScoreType []>
java: int getScoreType()
FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>
java: void setPatchSize(int patchSize)
FUNC <int cv.ORB.getPatchSize []>
java: int getPatchSize()
FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>
java: void setFastThreshold(int fastThreshold)
FUNC <int cv.ORB.getFastThreshold []>
java: int getFastThreshold()
FUNC <String cv.ORB.getDefaultName []>
java: String getDefaultName()
CLASS cv::.SIFT : Feature2D
FUNC <Ptr_SIFT cv.SIFT.create [ARG int nfeatures=0, ARG int nOctaveLayers=3, ARG double contrastThreshold=0.04, ARG double edgeThreshold=10, ARG double sigma=1.6, ARG bool enable_precise_upscale=false]>
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma, boolean enable_precise_upscale)
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma)
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold)
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold)
java: SIFT create(int nfeatures, int nOctaveLayers)
java: SIFT create(int nfeatures)
java: SIFT create()
FUNC <Ptr_SIFT cv.SIFT.create [ARG int nfeatures=, ARG int nOctaveLayers=, ARG double contrastThreshold=, ARG double edgeThreshold=, ARG double sigma=, ARG int descriptorType=, ARG bool enable_precise_upscale=false]>
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma, int descriptorType, boolean enable_precise_upscale)
java: SIFT create(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma, int descriptorType)
FUNC <String cv.SIFT.getDefaultName []>
java: String getDefaultName()
FUNC <void cv.SIFT.setNFeatures [ARG int maxFeatures=]>
java: void setNFeatures(int maxFeatures)
FUNC <int cv.SIFT.getNFeatures []>
java: int getNFeatures()
FUNC <void cv.SIFT.setNOctaveLayers [ARG int nOctaveLayers=]>
java: void setNOctaveLayers(int nOctaveLayers)
FUNC <int cv.SIFT.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <void cv.SIFT.setContrastThreshold [ARG double contrastThreshold=]>
java: void setContrastThreshold(double contrastThreshold)
FUNC <double cv.SIFT.getContrastThreshold []>
java: double getContrastThreshold()
FUNC <void cv.SIFT.setEdgeThreshold [ARG double edgeThreshold=]>
java: void setEdgeThreshold(double edgeThreshold)
FUNC <double cv.SIFT.getEdgeThreshold []>
java: double getEdgeThreshold()
FUNC <void cv.SIFT.setSigma [ARG double sigma=]>
java: void setSigma(double sigma)
FUNC <double cv.SIFT.getSigma []>
java: double getSigma()
CLASS cv::.SimpleBlobDetector : Feature2D
FUNC <Ptr_SimpleBlobDetector cv.SimpleBlobDetector.create [ARG SimpleBlobDetector_Params parameters=SimpleBlobDetector::Params()]>
java: SimpleBlobDetector create(SimpleBlobDetector_Params parameters)
java: SimpleBlobDetector create()
FUNC <void cv.SimpleBlobDetector.setParams [ARG SimpleBlobDetector_Params params=]>
java: void setParams(SimpleBlobDetector_Params params)
FUNC <SimpleBlobDetector_Params cv.SimpleBlobDetector.getParams []>
java: SimpleBlobDetector_Params getParams()
FUNC <String cv.SimpleBlobDetector.getDefaultName []>
java: String getDefaultName()
FUNC <vector_vector_Point cv.SimpleBlobDetector.getBlobContours []>
java: List<MatOfPoint> getBlobContours()
CLASS cv::SimpleBlobDetector.SimpleBlobDetector_Params : 
FUNC < cv.SimpleBlobDetector.Params.SimpleBlobDetector_Params []>
java:  SimpleBlobDetector_Params()
FUNC <float cv.SimpleBlobDetector.Params.get_thresholdStep []>
java: float get_thresholdStep()
FUNC <void cv.SimpleBlobDetector.Params.set_thresholdStep [ARG float thresholdStep=]>
java: void set_thresholdStep(float thresholdStep)
FUNC <float cv.SimpleBlobDetector.Params.get_minThreshold []>
java: float get_minThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_minThreshold [ARG float minThreshold=]>
java: void set_minThreshold(float minThreshold)
FUNC <float cv.SimpleBlobDetector.Params.get_maxThreshold []>
java: float get_maxThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_maxThreshold [ARG float maxThreshold=]>
java: void set_maxThreshold(float maxThreshold)
FUNC <size_t cv.SimpleBlobDetector.Params.get_minRepeatability []>
java: long get_minRepeatability()
FUNC <void cv.SimpleBlobDetector.Params.set_minRepeatability [ARG size_t minRepeatability=]>
java: void set_minRepeatability(long minRepeatability)
FUNC <float cv.SimpleBlobDetector.Params.get_minDistBetweenBlobs []>
java: float get_minDistBetweenBlobs()
FUNC <void cv.SimpleBlobDetector.Params.set_minDistBetweenBlobs [ARG float minDistBetweenBlobs=]>
java: void set_minDistBetweenBlobs(float minDistBetweenBlobs)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByColor []>
java: boolean get_filterByColor()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByColor [ARG bool filterByColor=]>
java: void set_filterByColor(boolean filterByColor)
FUNC <uchar cv.SimpleBlobDetector.Params.get_blobColor []>
SKIP:uchar SimpleBlobDetector_Params::blobColor	 due to RET type uchar
FUNC <void cv.SimpleBlobDetector.Params.set_blobColor [ARG uchar blobColor=]>
SKIP:void SimpleBlobDetector_Params::blobColor	 due to ARG type uchar/I
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByArea []>
java: boolean get_filterByArea()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByArea [ARG bool filterByArea=]>
java: void set_filterByArea(boolean filterByArea)
FUNC <float cv.SimpleBlobDetector.Params.get_minArea []>
java: float get_minArea()
FUNC <void cv.SimpleBlobDetector.Params.set_minArea [ARG float minArea=]>
java: void set_minArea(float minArea)
FUNC <float cv.SimpleBlobDetector.Params.get_maxArea []>
java: float get_maxArea()
FUNC <void cv.SimpleBlobDetector.Params.set_maxArea [ARG float maxArea=]>
java: void set_maxArea(float maxArea)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByCircularity []>
java: boolean get_filterByCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByCircularity [ARG bool filterByCircularity=]>
java: void set_filterByCircularity(boolean filterByCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_minCircularity []>
java: float get_minCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_minCircularity [ARG float minCircularity=]>
java: void set_minCircularity(float minCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxCircularity []>
java: float get_maxCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxCircularity [ARG float maxCircularity=]>
java: void set_maxCircularity(float maxCircularity)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByInertia []>
java: boolean get_filterByInertia()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByInertia [ARG bool filterByInertia=]>
java: void set_filterByInertia(boolean filterByInertia)
FUNC <float cv.SimpleBlobDetector.Params.get_minInertiaRatio []>
java: float get_minInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_minInertiaRatio [ARG float minInertiaRatio=]>
java: void set_minInertiaRatio(float minInertiaRatio)
FUNC <float cv.SimpleBlobDetector.Params.get_maxInertiaRatio []>
java: float get_maxInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_maxInertiaRatio [ARG float maxInertiaRatio=]>
java: void set_maxInertiaRatio(float maxInertiaRatio)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByConvexity []>
java: boolean get_filterByConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByConvexity [ARG bool filterByConvexity=]>
java: void set_filterByConvexity(boolean filterByConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_minConvexity []>
java: float get_minConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_minConvexity [ARG float minConvexity=]>
java: void set_minConvexity(float minConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxConvexity []>
java: float get_maxConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxConvexity [ARG float maxConvexity=]>
java: void set_maxConvexity(float maxConvexity)
FUNC <bool cv.SimpleBlobDetector.Params.get_collectContours []>
java: boolean get_collectContours()
FUNC <void cv.SimpleBlobDetector.Params.set_collectContours [ARG bool collectContours=]>
java: void set_collectContours(boolean collectContours)

=== MODULE: imgcodecs (/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs) ===


Files (5):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/macosx.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Imgcodecs : , name: Imgcodecs, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs_c.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/macosx.h =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/macosx.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/ios.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs.hpp =====
Namespaces: ['cv']

--- Incoming ---
[   'enum cv.ImreadModes',
    '',
    [],
    [   ['const cv.IMREAD_UNCHANGED', '-1', [], [], None, ''],
        ['const cv.IMREAD_GRAYSCALE', '0', [], [], None, ''],
        ['const cv.IMREAD_COLOR', '1', [], [], None, ''],
        ['const cv.IMREAD_ANYDEPTH', '2', [], [], None, ''],
        ['const cv.IMREAD_ANYCOLOR', '4', [], [], None, ''],
        ['const cv.IMREAD_LOAD_GDAL', '8', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_GRAYSCALE_2', '16', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_COLOR_2', '17', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_GRAYSCALE_4', '32', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_COLOR_4', '33', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_GRAYSCALE_8', '64', [], [], None, ''],
        ['const cv.IMREAD_REDUCED_COLOR_8', '65', [], [], None, ''],
        ['const cv.IMREAD_IGNORE_ORIENTATION', '128', [], [], None, '']],
    None]
ok: CONST IMREAD_UNCHANGED=-1
ok: CONST IMREAD_GRAYSCALE=0
ok: CONST IMREAD_COLOR=1
ok: CONST IMREAD_ANYDEPTH=2
ok: CONST IMREAD_ANYCOLOR=4
ok: CONST IMREAD_LOAD_GDAL=8
ok: CONST IMREAD_REDUCED_GRAYSCALE_2=16
ok: CONST IMREAD_REDUCED_COLOR_2=17
ok: CONST IMREAD_REDUCED_GRAYSCALE_4=32
ok: CONST IMREAD_REDUCED_COLOR_4=33
ok: CONST IMREAD_REDUCED_GRAYSCALE_8=64
ok: CONST IMREAD_REDUCED_COLOR_8=65
ok: CONST IMREAD_IGNORE_ORIENTATION=128

--- Incoming ---
[   'enum cv.ImwriteFlags',
    '',
    [],
    [   ['const cv.IMWRITE_JPEG_QUALITY', '1', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_PROGRESSIVE', '2', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_OPTIMIZE', '3', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_RST_INTERVAL', '4', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_LUMA_QUALITY', '5', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_CHROMA_QUALITY', '6', [], [], None, ''],
        ['const cv.IMWRITE_JPEG_SAMPLING_FACTOR', '7', [], [], None, ''],
        ['const cv.IMWRITE_PNG_COMPRESSION', '16', [], [], None, ''],
        ['const cv.IMWRITE_PNG_STRATEGY', '17', [], [], None, ''],
        ['const cv.IMWRITE_PNG_BILEVEL', '18', [], [], None, ''],
        ['const cv.IMWRITE_PXM_BINARY', '32', [], [], None, ''],
        ['const cv.IMWRITE_EXR_TYPE', '(3 << 4) + 0', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION', '(3 << 4) + 1', [], [], None, ''],
        [   'const cv.IMWRITE_EXR_DWA_COMPRESSION_LEVEL',
            '(3 << 4) + 2',
            [],
            [],
            None,
            ''],
        ['const cv.IMWRITE_WEBP_QUALITY', '64', [], [], None, ''],
        ['const cv.IMWRITE_HDR_COMPRESSION', '(5 << 4) + 0', [], [], None, ''],
        ['const cv.IMWRITE_PAM_TUPLETYPE', '128', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_RESUNIT', '256', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_XDPI', '257', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_YDPI', '258', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION', '259', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_ROWSPERSTRIP', '278', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_PREDICTOR', '317', [], [], None, ''],
        [   'const cv.IMWRITE_JPEG2000_COMPRESSION_X1000',
            '272',
            [],
            [],
            None,
            ''],
        ['const cv.IMWRITE_AVIF_QUALITY', '512', [], [], None, ''],
        ['const cv.IMWRITE_AVIF_DEPTH', '513', [], [], None, ''],
        ['const cv.IMWRITE_AVIF_SPEED', '514', [], [], None, '']],
    None]
ok: CONST IMWRITE_JPEG_QUALITY=1
ok: CONST IMWRITE_JPEG_PROGRESSIVE=2
ok: CONST IMWRITE_JPEG_OPTIMIZE=3
ok: CONST IMWRITE_JPEG_RST_INTERVAL=4
ok: CONST IMWRITE_JPEG_LUMA_QUALITY=5
ok: CONST IMWRITE_JPEG_CHROMA_QUALITY=6
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR=7
ok: CONST IMWRITE_PNG_COMPRESSION=16
ok: CONST IMWRITE_PNG_STRATEGY=17
ok: CONST IMWRITE_PNG_BILEVEL=18
ok: CONST IMWRITE_PXM_BINARY=32
ok: CONST IMWRITE_EXR_TYPE=(3 << 4) + 0
ok: CONST IMWRITE_EXR_COMPRESSION=(3 << 4) + 1
ok: CONST IMWRITE_EXR_DWA_COMPRESSION_LEVEL=(3 << 4) + 2
ok: CONST IMWRITE_WEBP_QUALITY=64
ok: CONST IMWRITE_HDR_COMPRESSION=(5 << 4) + 0
ok: CONST IMWRITE_PAM_TUPLETYPE=128
ok: CONST IMWRITE_TIFF_RESUNIT=256
ok: CONST IMWRITE_TIFF_XDPI=257
ok: CONST IMWRITE_TIFF_YDPI=258
ok: CONST IMWRITE_TIFF_COMPRESSION=259
ok: CONST IMWRITE_TIFF_ROWSPERSTRIP=278
ok: CONST IMWRITE_TIFF_PREDICTOR=317
ok: CONST IMWRITE_JPEG2000_COMPRESSION_X1000=272
ok: CONST IMWRITE_AVIF_QUALITY=512
ok: CONST IMWRITE_AVIF_DEPTH=513
ok: CONST IMWRITE_AVIF_SPEED=514

--- Incoming ---
[   'enum cv.ImwriteJPEGSamplingFactorParams',
    '',
    [],
    [   [   'const cv.IMWRITE_JPEG_SAMPLING_FACTOR_411',
            '0x411111',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_JPEG_SAMPLING_FACTOR_420',
            '0x221111',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_JPEG_SAMPLING_FACTOR_422',
            '0x211111',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_JPEG_SAMPLING_FACTOR_440',
            '0x121111',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_JPEG_SAMPLING_FACTOR_444',
            '0x111111',
            [],
            [],
            None,
            '']],
    None]
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR_411=0x411111
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR_420=0x221111
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR_422=0x211111
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR_440=0x121111
ok: CONST IMWRITE_JPEG_SAMPLING_FACTOR_444=0x111111

--- Incoming ---
[   'enum cv.ImwriteTiffCompressionFlags',
    '',
    [],
    [   ['const cv.IMWRITE_TIFF_COMPRESSION_NONE', '1', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_CCITTRLE', '2', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_CCITTFAX3', '3', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_CCITT_T4', '3', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_CCITTFAX4', '4', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_CCITT_T6', '4', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_LZW', '5', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_OJPEG', '6', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_JPEG', '7', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_T85', '9', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_T43', '10', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_NEXT', '32766', [], [], None, ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_CCITTRLEW',
            '32771',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_PACKBITS',
            '32773',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_THUNDERSCAN',
            '32809',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_IT8CTPAD',
            '32895',
            [],
            [],
            None,
            ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_IT8LW', '32896', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_IT8MP', '32897', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_IT8BL', '32898', [], [], None, ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_PIXARFILM',
            '32908',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_PIXARLOG',
            '32909',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_DEFLATE',
            '32946',
            [],
            [],
            None,
            ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_ADOBE_DEFLATE',
            '8',
            [],
            [],
            None,
            ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_DCS', '32947', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_JBIG', '34661', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_SGILOG', '34676', [], [], None, ''],
        [   'const cv.IMWRITE_TIFF_COMPRESSION_SGILOG24',
            '34677',
            [],
            [],
            None,
            ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_JP2000', '34712', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_LERC', '34887', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_LZMA', '34925', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_ZSTD', '50000', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_WEBP', '50001', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_COMPRESSION_JXL', '50002', [], [], None, '']],
    None]
ok: CONST IMWRITE_TIFF_COMPRESSION_NONE=1
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITTRLE=2
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITTFAX3=3
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITT_T4=3
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITTFAX4=4
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITT_T6=4
ok: CONST IMWRITE_TIFF_COMPRESSION_LZW=5
ok: CONST IMWRITE_TIFF_COMPRESSION_OJPEG=6
ok: CONST IMWRITE_TIFF_COMPRESSION_JPEG=7
ok: CONST IMWRITE_TIFF_COMPRESSION_T85=9
ok: CONST IMWRITE_TIFF_COMPRESSION_T43=10
ok: CONST IMWRITE_TIFF_COMPRESSION_NEXT=32766
ok: CONST IMWRITE_TIFF_COMPRESSION_CCITTRLEW=32771
ok: CONST IMWRITE_TIFF_COMPRESSION_PACKBITS=32773
ok: CONST IMWRITE_TIFF_COMPRESSION_THUNDERSCAN=32809
ok: CONST IMWRITE_TIFF_COMPRESSION_IT8CTPAD=32895
ok: CONST IMWRITE_TIFF_COMPRESSION_IT8LW=32896
ok: CONST IMWRITE_TIFF_COMPRESSION_IT8MP=32897
ok: CONST IMWRITE_TIFF_COMPRESSION_IT8BL=32898
ok: CONST IMWRITE_TIFF_COMPRESSION_PIXARFILM=32908
ok: CONST IMWRITE_TIFF_COMPRESSION_PIXARLOG=32909
ok: CONST IMWRITE_TIFF_COMPRESSION_DEFLATE=32946
ok: CONST IMWRITE_TIFF_COMPRESSION_ADOBE_DEFLATE=8
ok: CONST IMWRITE_TIFF_COMPRESSION_DCS=32947
ok: CONST IMWRITE_TIFF_COMPRESSION_JBIG=34661
ok: CONST IMWRITE_TIFF_COMPRESSION_SGILOG=34676
ok: CONST IMWRITE_TIFF_COMPRESSION_SGILOG24=34677
ok: CONST IMWRITE_TIFF_COMPRESSION_JP2000=34712
ok: CONST IMWRITE_TIFF_COMPRESSION_LERC=34887
ok: CONST IMWRITE_TIFF_COMPRESSION_LZMA=34925
ok: CONST IMWRITE_TIFF_COMPRESSION_ZSTD=50000
ok: CONST IMWRITE_TIFF_COMPRESSION_WEBP=50001
ok: CONST IMWRITE_TIFF_COMPRESSION_JXL=50002

--- Incoming ---
[   'enum cv.ImwriteTiffPredictorFlags',
    '',
    [],
    [   ['const cv.IMWRITE_TIFF_PREDICTOR_NONE', '1', [], [], None, ''],
        ['const cv.IMWRITE_TIFF_PREDICTOR_HORIZONTAL', '2', [], [], None, ''],
        [   'const cv.IMWRITE_TIFF_PREDICTOR_FLOATINGPOINT',
            '3',
            [],
            [],
            None,
            '']],
    None]
ok: CONST IMWRITE_TIFF_PREDICTOR_NONE=1
ok: CONST IMWRITE_TIFF_PREDICTOR_HORIZONTAL=2
ok: CONST IMWRITE_TIFF_PREDICTOR_FLOATINGPOINT=3

--- Incoming ---
[   'enum cv.ImwriteEXRTypeFlags',
    '',
    [],
    [   ['const cv.IMWRITE_EXR_TYPE_HALF', '1', [], [], None, ''],
        ['const cv.IMWRITE_EXR_TYPE_FLOAT', '2', [], [], None, '']],
    None]
ok: CONST IMWRITE_EXR_TYPE_HALF=1
ok: CONST IMWRITE_EXR_TYPE_FLOAT=2

--- Incoming ---
[   'enum cv.ImwriteEXRCompressionFlags',
    '',
    [],
    [   ['const cv.IMWRITE_EXR_COMPRESSION_NO', '0', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_RLE', '1', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_ZIPS', '2', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_ZIP', '3', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_PIZ', '4', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_PXR24', '5', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_B44', '6', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_B44A', '7', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_DWAA', '8', [], [], None, ''],
        ['const cv.IMWRITE_EXR_COMPRESSION_DWAB', '9', [], [], None, '']],
    None]
ok: CONST IMWRITE_EXR_COMPRESSION_NO=0
ok: CONST IMWRITE_EXR_COMPRESSION_RLE=1
ok: CONST IMWRITE_EXR_COMPRESSION_ZIPS=2
ok: CONST IMWRITE_EXR_COMPRESSION_ZIP=3
ok: CONST IMWRITE_EXR_COMPRESSION_PIZ=4
ok: CONST IMWRITE_EXR_COMPRESSION_PXR24=5
ok: CONST IMWRITE_EXR_COMPRESSION_B44=6
ok: CONST IMWRITE_EXR_COMPRESSION_B44A=7
ok: CONST IMWRITE_EXR_COMPRESSION_DWAA=8
ok: CONST IMWRITE_EXR_COMPRESSION_DWAB=9

--- Incoming ---
[   'enum cv.ImwritePNGFlags',
    '',
    [],
    [   ['const cv.IMWRITE_PNG_STRATEGY_DEFAULT', '0', [], [], None, ''],
        ['const cv.IMWRITE_PNG_STRATEGY_FILTERED', '1', [], [], None, ''],
        ['const cv.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY', '2', [], [], None, ''],
        ['const cv.IMWRITE_PNG_STRATEGY_RLE', '3', [], [], None, ''],
        ['const cv.IMWRITE_PNG_STRATEGY_FIXED', '4', [], [], None, '']],
    None]
ok: CONST IMWRITE_PNG_STRATEGY_DEFAULT=0
ok: CONST IMWRITE_PNG_STRATEGY_FILTERED=1
ok: CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2
ok: CONST IMWRITE_PNG_STRATEGY_RLE=3
ok: CONST IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
[   'enum cv.ImwritePAMFlags',
    '',
    [],
    [   ['const cv.IMWRITE_PAM_FORMAT_NULL', '0', [], [], None, ''],
        ['const cv.IMWRITE_PAM_FORMAT_BLACKANDWHITE', '1', [], [], None, ''],
        ['const cv.IMWRITE_PAM_FORMAT_GRAYSCALE', '2', [], [], None, ''],
        ['const cv.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA', '3', [], [], None, ''],
        ['const cv.IMWRITE_PAM_FORMAT_RGB', '4', [], [], None, ''],
        ['const cv.IMWRITE_PAM_FORMAT_RGB_ALPHA', '5', [], [], None, '']],
    None]
ok: CONST IMWRITE_PAM_FORMAT_NULL=0
ok: CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3
ok: CONST IMWRITE_PAM_FORMAT_RGB=4
ok: CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
[   'enum cv.ImwriteHDRCompressionFlags',
    '',
    [],
    [   ['const cv.IMWRITE_HDR_COMPRESSION_NONE', '0', [], [], None, ''],
        ['const cv.IMWRITE_HDR_COMPRESSION_RLE', '1', [], [], None, '']],
    None]
ok: CONST IMWRITE_HDR_COMPRESSION_NONE=0
ok: CONST IMWRITE_HDR_COMPRESSION_RLE=1

--- Incoming ---
[   'cv.imread',
    'Mat',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'flags', 'IMREAD_COLOR', []]],
    'Mat']
ok: FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>

--- Incoming ---
[   'cv.imread',
    'void',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'IMREAD_COLOR', []]],
    'void']
ok: FUNC <void cv..imread [ARG String filename=, ARG Mat dst=, ARG int flags=IMREAD_COLOR]>

--- Incoming ---
[   'cv.imreadmulti',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['vector_Mat', 'mats', '', ['/O', '/Ref']],
        ['int', 'flags', 'IMREAD_ANYCOLOR', []]],
    'bool']
ok: FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   'cv.imreadmulti',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['vector_Mat', 'mats', '', ['/O', '/Ref']],
        ['int', 'start', '', []],
        ['int', 'count', '', []],
        ['int', 'flags', 'IMREAD_ANYCOLOR', []]],
    'bool']
ok: FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int start=, ARG int count=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   'cv.imcount',
    'size_t',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'flags', 'IMREAD_ANYCOLOR', []]],
    'size_t']
ok: FUNC <size_t cv..imcount [ARG String filename=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   'cv.imwrite',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['Mat', 'img', '', []],
        ['vector_int', 'params', 'std::vector<int>()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   'cv.imwritemulti',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['vector_Mat', 'img', '', []],
        ['vector_int', 'params', 'std::vector<int>()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imwritemulti [ARG String filename=, ARG vector_Mat img=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   'cv.imdecode',
    'Mat',
    [],
    [['Mat', 'buf', '', []], ['int', 'flags', '', []]],
    'Mat']
ok: FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>

--- Incoming ---
[   'cv.imdecodemulti',
    'bool',
    [],
    [   ['Mat', 'buf', '', []],
        ['int', 'flags', '', []],
        ['vector_Mat', 'mats', '', ['/O', '/Ref']],
        ['Range', 'range', 'Range::all()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imdecodemulti [ARG Mat buf=, ARG int flags=, ARG vector_Mat mats=, ARG Range range=Range::all()]>

--- Incoming ---
[   'cv.imencode',
    'bool',
    [],
    [   ['String', 'ext', '', ['/C', '/Ref']],
        ['Mat', 'img', '', []],
        ['vector_uchar', 'buf', '', ['/O', '/Ref']],
        ['vector_int', 'params', 'std::vector<int>()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   'cv.haveImageReader',
    'bool',
    [],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    'bool']
ok: FUNC <bool cv..haveImageReader [ARG String filename=]>

--- Incoming ---
[   'cv.haveImageWriter',
    'bool',
    [],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    'bool']
ok: FUNC <bool cv..haveImageWriter [ARG String filename=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp =====
Namespaces: ['cv']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/imgcodecs/include/opencv2/imgcodecs/imgcodecs.hpp


===== Generating... =====
CLASS cv::.Imgcodecs : 
[CONST IMREAD_UNCHANGED=-1, CONST IMREAD_GRAYSCALE=0, CONST IMREAD_COLOR=1, CONST IMREAD_ANYDEPTH=2, CONST IMREAD_ANYCOLOR=4, CONST IMREAD_LOAD_GDAL=8, CONST IMREAD_REDUCED_GRAYSCALE_2=16, CONST IMREAD_REDUCED_COLOR_2=17, CONST IMREAD_REDUCED_GRAYSCALE_4=32, CONST IMREAD_REDUCED_COLOR_4=33, CONST IMREAD_REDUCED_GRAYSCALE_8=64, CONST IMREAD_REDUCED_COLOR_8=65, CONST IMREAD_IGNORE_ORIENTATION=128]
[CONST IMWRITE_EXR_COMPRESSION_NO=0, CONST IMWRITE_EXR_COMPRESSION_RLE=1, CONST IMWRITE_EXR_COMPRESSION_ZIPS=2, CONST IMWRITE_EXR_COMPRESSION_ZIP=3, CONST IMWRITE_EXR_COMPRESSION_PIZ=4, CONST IMWRITE_EXR_COMPRESSION_PXR24=5, CONST IMWRITE_EXR_COMPRESSION_B44=6, CONST IMWRITE_EXR_COMPRESSION_B44A=7, CONST IMWRITE_EXR_COMPRESSION_DWAA=8, CONST IMWRITE_EXR_COMPRESSION_DWAB=9]
[CONST IMWRITE_EXR_TYPE_HALF=1, CONST IMWRITE_EXR_TYPE_FLOAT=2]
[CONST IMWRITE_JPEG_QUALITY=1, CONST IMWRITE_JPEG_PROGRESSIVE=2, CONST IMWRITE_JPEG_OPTIMIZE=3, CONST IMWRITE_JPEG_RST_INTERVAL=4, CONST IMWRITE_JPEG_LUMA_QUALITY=5, CONST IMWRITE_JPEG_CHROMA_QUALITY=6, CONST IMWRITE_JPEG_SAMPLING_FACTOR=7, CONST IMWRITE_PNG_COMPRESSION=16, CONST IMWRITE_PNG_STRATEGY=17, CONST IMWRITE_PNG_BILEVEL=18, CONST IMWRITE_PXM_BINARY=32, CONST IMWRITE_EXR_TYPE=(3 << 4) + 0, CONST IMWRITE_EXR_COMPRESSION=(3 << 4) + 1, CONST IMWRITE_EXR_DWA_COMPRESSION_LEVEL=(3 << 4) + 2, CONST IMWRITE_WEBP_QUALITY=64, CONST IMWRITE_HDR_COMPRESSION=(5 << 4) + 0, CONST IMWRITE_PAM_TUPLETYPE=128, CONST IMWRITE_TIFF_RESUNIT=256, CONST IMWRITE_TIFF_XDPI=257, CONST IMWRITE_TIFF_YDPI=258, CONST IMWRITE_TIFF_COMPRESSION=259, CONST IMWRITE_TIFF_ROWSPERSTRIP=278, CONST IMWRITE_TIFF_PREDICTOR=317, CONST IMWRITE_JPEG2000_COMPRESSION_X1000=272, CONST IMWRITE_AVIF_QUALITY=512, CONST IMWRITE_AVIF_DEPTH=513, CONST IMWRITE_AVIF_SPEED=514]
[CONST IMWRITE_HDR_COMPRESSION_NONE=0, CONST IMWRITE_HDR_COMPRESSION_RLE=1]
[CONST IMWRITE_JPEG_SAMPLING_FACTOR_411=0x411111, CONST IMWRITE_JPEG_SAMPLING_FACTOR_420=0x221111, CONST IMWRITE_JPEG_SAMPLING_FACTOR_422=0x211111, CONST IMWRITE_JPEG_SAMPLING_FACTOR_440=0x121111, CONST IMWRITE_JPEG_SAMPLING_FACTOR_444=0x111111]
[CONST IMWRITE_PAM_FORMAT_NULL=0, CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST IMWRITE_PAM_FORMAT_RGB=4, CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5]
[CONST IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST IMWRITE_PNG_STRATEGY_FILTERED=1, CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST IMWRITE_PNG_STRATEGY_RLE=3, CONST IMWRITE_PNG_STRATEGY_FIXED=4]
[CONST IMWRITE_TIFF_COMPRESSION_NONE=1, CONST IMWRITE_TIFF_COMPRESSION_CCITTRLE=2, CONST IMWRITE_TIFF_COMPRESSION_CCITTFAX3=3, CONST IMWRITE_TIFF_COMPRESSION_CCITT_T4=3, CONST IMWRITE_TIFF_COMPRESSION_CCITTFAX4=4, CONST IMWRITE_TIFF_COMPRESSION_CCITT_T6=4, CONST IMWRITE_TIFF_COMPRESSION_LZW=5, CONST IMWRITE_TIFF_COMPRESSION_OJPEG=6, CONST IMWRITE_TIFF_COMPRESSION_JPEG=7, CONST IMWRITE_TIFF_COMPRESSION_T85=9, CONST IMWRITE_TIFF_COMPRESSION_T43=10, CONST IMWRITE_TIFF_COMPRESSION_NEXT=32766, CONST IMWRITE_TIFF_COMPRESSION_CCITTRLEW=32771, CONST IMWRITE_TIFF_COMPRESSION_PACKBITS=32773, CONST IMWRITE_TIFF_COMPRESSION_THUNDERSCAN=32809, CONST IMWRITE_TIFF_COMPRESSION_IT8CTPAD=32895, CONST IMWRITE_TIFF_COMPRESSION_IT8LW=32896, CONST IMWRITE_TIFF_COMPRESSION_IT8MP=32897, CONST IMWRITE_TIFF_COMPRESSION_IT8BL=32898, CONST IMWRITE_TIFF_COMPRESSION_PIXARFILM=32908, CONST IMWRITE_TIFF_COMPRESSION_PIXARLOG=32909, CONST IMWRITE_TIFF_COMPRESSION_DEFLATE=32946, CONST IMWRITE_TIFF_COMPRESSION_ADOBE_DEFLATE=8, CONST IMWRITE_TIFF_COMPRESSION_DCS=32947, CONST IMWRITE_TIFF_COMPRESSION_JBIG=34661, CONST IMWRITE_TIFF_COMPRESSION_SGILOG=34676, CONST IMWRITE_TIFF_COMPRESSION_SGILOG24=34677, CONST IMWRITE_TIFF_COMPRESSION_JP2000=34712, CONST IMWRITE_TIFF_COMPRESSION_LERC=34887, CONST IMWRITE_TIFF_COMPRESSION_LZMA=34925, CONST IMWRITE_TIFF_COMPRESSION_ZSTD=50000, CONST IMWRITE_TIFF_COMPRESSION_WEBP=50001, CONST IMWRITE_TIFF_COMPRESSION_JXL=50002]
[CONST IMWRITE_TIFF_PREDICTOR_NONE=1, CONST IMWRITE_TIFF_PREDICTOR_HORIZONTAL=2, CONST IMWRITE_TIFF_PREDICTOR_FLOATINGPOINT=3]
FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>
java: Mat imread(String filename, int flags)
java: Mat imread(String filename)
FUNC <void cv..imread [ARG String filename=, ARG Mat dst=, ARG int flags=IMREAD_COLOR]>
java: void imread(String filename, Mat dst, int flags)
java: void imread(String filename, Mat dst)
FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>
java: boolean imreadmulti(String filename, List<Mat> mats, int flags)
java: boolean imreadmulti(String filename, List<Mat> mats)
FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int start=, ARG int count=, ARG int flags=IMREAD_ANYCOLOR]>
java: boolean imreadmulti(String filename, List<Mat> mats, int start, int count, int flags)
java: boolean imreadmulti(String filename, List<Mat> mats, int start, int count)
FUNC <size_t cv..imcount [ARG String filename=, ARG int flags=IMREAD_ANYCOLOR]>
java: long imcount(String filename, int flags)
java: long imcount(String filename)
FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>
java: boolean imwrite(String filename, Mat img, MatOfInt params)
java: boolean imwrite(String filename, Mat img)
FUNC <bool cv..imwritemulti [ARG String filename=, ARG vector_Mat img=, ARG vector_int params=std::vector<int>()]>
java: boolean imwritemulti(String filename, List<Mat> img, MatOfInt params)
java: boolean imwritemulti(String filename, List<Mat> img)
FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>
java: Mat imdecode(Mat buf, int flags)
FUNC <bool cv..imdecodemulti [ARG Mat buf=, ARG int flags=, ARG vector_Mat mats=, ARG Range range=Range::all()]>
java: boolean imdecodemulti(Mat buf, int flags, List<Mat> mats, Range range)
java: boolean imdecodemulti(Mat buf, int flags, List<Mat> mats)
FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>
java: boolean imencode(String ext, Mat img, MatOfByte buf, MatOfInt params)
java: boolean imencode(String ext, Mat img, MatOfByte buf)
FUNC <bool cv..haveImageReader [ARG String filename=]>
java: boolean haveImageReader(String filename)
FUNC <bool cv..haveImageWriter [ARG String filename=]>
java: boolean haveImageWriter(String filename)

=== MODULE: videoio (/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio) ===


Files (6):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/cap_ios.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio_c.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/registry.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/doc/hwaccel.doc.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Videoio : , name: Videoio, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/cap_ios.h =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/cap_ios.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio_c.h =====
Namespaces: ['']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio_c.h


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio.hpp =====
Namespaces: ['', 'cv', 'cv.internal']

--- Incoming ---
[   'enum cv.VideoCaptureAPIs',
    '',
    [],
    [   ['const cv.CAP_ANY', '0', [], [], None, ''],
        ['const cv.CAP_VFW', '200', [], [], None, ''],
        ['const cv.CAP_V4L', '200', [], [], None, ''],
        ['const cv.CAP_V4L2', 'CAP_V4L', [], [], None, ''],
        ['const cv.CAP_FIREWIRE', '300', [], [], None, ''],
        ['const cv.CAP_FIREWARE', 'CAP_FIREWIRE', [], [], None, ''],
        ['const cv.CAP_IEEE1394', 'CAP_FIREWIRE', [], [], None, ''],
        ['const cv.CAP_DC1394', 'CAP_FIREWIRE', [], [], None, ''],
        ['const cv.CAP_CMU1394', 'CAP_FIREWIRE', [], [], None, ''],
        ['const cv.CAP_QT', '500', [], [], None, ''],
        ['const cv.CAP_UNICAP', '600', [], [], None, ''],
        ['const cv.CAP_DSHOW', '700', [], [], None, ''],
        ['const cv.CAP_PVAPI', '800', [], [], None, ''],
        ['const cv.CAP_OPENNI', '900', [], [], None, ''],
        ['const cv.CAP_OPENNI_ASUS', '910', [], [], None, ''],
        ['const cv.CAP_ANDROID', '1000', [], [], None, ''],
        ['const cv.CAP_XIAPI', '1100', [], [], None, ''],
        ['const cv.CAP_AVFOUNDATION', '1200', [], [], None, ''],
        ['const cv.CAP_GIGANETIX', '1300', [], [], None, ''],
        ['const cv.CAP_MSMF', '1400', [], [], None, ''],
        ['const cv.CAP_WINRT', '1410', [], [], None, ''],
        ['const cv.CAP_INTELPERC', '1500', [], [], None, ''],
        ['const cv.CAP_REALSENSE', '1500', [], [], None, ''],
        ['const cv.CAP_OPENNI2', '1600', [], [], None, ''],
        ['const cv.CAP_OPENNI2_ASUS', '1610', [], [], None, ''],
        ['const cv.CAP_OPENNI2_ASTRA', '1620', [], [], None, ''],
        ['const cv.CAP_GPHOTO2', '1700', [], [], None, ''],
        ['const cv.CAP_GSTREAMER', '1800', [], [], None, ''],
        ['const cv.CAP_FFMPEG', '1900', [], [], None, ''],
        ['const cv.CAP_IMAGES', '2000', [], [], None, ''],
        ['const cv.CAP_ARAVIS', '2100', [], [], None, ''],
        ['const cv.CAP_OPENCV_MJPEG', '2200', [], [], None, ''],
        ['const cv.CAP_INTEL_MFX', '2300', [], [], None, ''],
        ['const cv.CAP_XINE', '2400', [], [], None, ''],
        ['const cv.CAP_UEYE', '2500', [], [], None, ''],
        ['const cv.CAP_OBSENSOR', '2600', [], [], None, '']],
    None]
ok: CONST CAP_ANY=0
ok: CONST CAP_VFW=200
ok: CONST CAP_V4L=200
ok: CONST CAP_V4L2=CAP_V4L
ok: CONST CAP_FIREWIRE=300
ok: CONST CAP_FIREWARE=CAP_FIREWIRE
ok: CONST CAP_IEEE1394=CAP_FIREWIRE
ok: CONST CAP_DC1394=CAP_FIREWIRE
ok: CONST CAP_CMU1394=CAP_FIREWIRE
ok: CONST CAP_QT=500
ok: CONST CAP_UNICAP=600
ok: CONST CAP_DSHOW=700
ok: CONST CAP_PVAPI=800
ok: CONST CAP_OPENNI=900
ok: CONST CAP_OPENNI_ASUS=910
ok: CONST CAP_ANDROID=1000
ok: CONST CAP_XIAPI=1100
ok: CONST CAP_AVFOUNDATION=1200
ok: CONST CAP_GIGANETIX=1300
ok: CONST CAP_MSMF=1400
ok: CONST CAP_WINRT=1410
ok: CONST CAP_INTELPERC=1500
ok: CONST CAP_REALSENSE=1500
ok: CONST CAP_OPENNI2=1600
ok: CONST CAP_OPENNI2_ASUS=1610
ok: CONST CAP_OPENNI2_ASTRA=1620
ok: CONST CAP_GPHOTO2=1700
ok: CONST CAP_GSTREAMER=1800
ok: CONST CAP_FFMPEG=1900
ok: CONST CAP_IMAGES=2000
ok: CONST CAP_ARAVIS=2100
ok: CONST CAP_OPENCV_MJPEG=2200
ok: CONST CAP_INTEL_MFX=2300
ok: CONST CAP_XINE=2400
ok: CONST CAP_UEYE=2500
ok: CONST CAP_OBSENSOR=2600

--- Incoming ---
[   'enum cv.VideoCaptureProperties',
    '',
    [],
    [   ['const cv.CAP_PROP_POS_MSEC', '0', [], [], None, ''],
        ['const cv.CAP_PROP_POS_FRAMES', '1', [], [], None, ''],
        ['const cv.CAP_PROP_POS_AVI_RATIO', '2', [], [], None, ''],
        ['const cv.CAP_PROP_FRAME_WIDTH', '3', [], [], None, ''],
        ['const cv.CAP_PROP_FRAME_HEIGHT', '4', [], [], None, ''],
        ['const cv.CAP_PROP_FPS', '5', [], [], None, ''],
        ['const cv.CAP_PROP_FOURCC', '6', [], [], None, ''],
        ['const cv.CAP_PROP_FRAME_COUNT', '7', [], [], None, ''],
        ['const cv.CAP_PROP_FORMAT', '8', [], [], None, ''],
        ['const cv.CAP_PROP_MODE', '9', [], [], None, ''],
        ['const cv.CAP_PROP_BRIGHTNESS', '10', [], [], None, ''],
        ['const cv.CAP_PROP_CONTRAST', '11', [], [], None, ''],
        ['const cv.CAP_PROP_SATURATION', '12', [], [], None, ''],
        ['const cv.CAP_PROP_HUE', '13', [], [], None, ''],
        ['const cv.CAP_PROP_GAIN', '14', [], [], None, ''],
        ['const cv.CAP_PROP_EXPOSURE', '15', [], [], None, ''],
        ['const cv.CAP_PROP_CONVERT_RGB', '16', [], [], None, ''],
        ['const cv.CAP_PROP_WHITE_BALANCE_BLUE_U', '17', [], [], None, ''],
        ['const cv.CAP_PROP_RECTIFICATION', '18', [], [], None, ''],
        ['const cv.CAP_PROP_MONOCHROME', '19', [], [], None, ''],
        ['const cv.CAP_PROP_SHARPNESS', '20', [], [], None, ''],
        ['const cv.CAP_PROP_AUTO_EXPOSURE', '21', [], [], None, ''],
        ['const cv.CAP_PROP_GAMMA', '22', [], [], None, ''],
        ['const cv.CAP_PROP_TEMPERATURE', '23', [], [], None, ''],
        ['const cv.CAP_PROP_TRIGGER', '24', [], [], None, ''],
        ['const cv.CAP_PROP_TRIGGER_DELAY', '25', [], [], None, ''],
        ['const cv.CAP_PROP_WHITE_BALANCE_RED_V', '26', [], [], None, ''],
        ['const cv.CAP_PROP_ZOOM', '27', [], [], None, ''],
        ['const cv.CAP_PROP_FOCUS', '28', [], [], None, ''],
        ['const cv.CAP_PROP_GUID', '29', [], [], None, ''],
        ['const cv.CAP_PROP_ISO_SPEED', '30', [], [], None, ''],
        ['const cv.CAP_PROP_BACKLIGHT', '32', [], [], None, ''],
        ['const cv.CAP_PROP_PAN', '33', [], [], None, ''],
        ['const cv.CAP_PROP_TILT', '34', [], [], None, ''],
        ['const cv.CAP_PROP_ROLL', '35', [], [], None, ''],
        ['const cv.CAP_PROP_IRIS', '36', [], [], None, ''],
        ['const cv.CAP_PROP_SETTINGS', '37', [], [], None, ''],
        ['const cv.CAP_PROP_BUFFERSIZE', '38', [], [], None, ''],
        ['const cv.CAP_PROP_AUTOFOCUS', '39', [], [], None, ''],
        ['const cv.CAP_PROP_SAR_NUM', '40', [], [], None, ''],
        ['const cv.CAP_PROP_SAR_DEN', '41', [], [], None, ''],
        ['const cv.CAP_PROP_BACKEND', '42', [], [], None, ''],
        ['const cv.CAP_PROP_CHANNEL', '43', [], [], None, ''],
        ['const cv.CAP_PROP_AUTO_WB', '44', [], [], None, ''],
        ['const cv.CAP_PROP_WB_TEMPERATURE', '45', [], [], None, ''],
        ['const cv.CAP_PROP_CODEC_PIXEL_FORMAT', '46', [], [], None, ''],
        ['const cv.CAP_PROP_BITRATE', '47', [], [], None, ''],
        ['const cv.CAP_PROP_ORIENTATION_META', '48', [], [], None, ''],
        ['const cv.CAP_PROP_ORIENTATION_AUTO', '49', [], [], None, ''],
        ['const cv.CAP_PROP_HW_ACCELERATION', '50', [], [], None, ''],
        ['const cv.CAP_PROP_HW_DEVICE', '51', [], [], None, ''],
        [   'const cv.CAP_PROP_HW_ACCELERATION_USE_OPENCL',
            '52',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_OPEN_TIMEOUT_MSEC', '53', [], [], None, ''],
        ['const cv.CAP_PROP_READ_TIMEOUT_MSEC', '54', [], [], None, ''],
        ['const cv.CAP_PROP_STREAM_OPEN_TIME_USEC', '55', [], [], None, ''],
        ['const cv.CAP_PROP_VIDEO_TOTAL_CHANNELS', '56', [], [], None, ''],
        ['const cv.CAP_PROP_VIDEO_STREAM', '57', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_STREAM', '58', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_POS', '59', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_SHIFT_NSEC', '60', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_DATA_DEPTH', '61', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_SAMPLES_PER_SECOND', '62', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_BASE_INDEX', '63', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_TOTAL_CHANNELS', '64', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_TOTAL_STREAMS', '65', [], [], None, ''],
        ['const cv.CAP_PROP_AUDIO_SYNCHRONIZE', '66', [], [], None, ''],
        ['const cv.CAP_PROP_LRF_HAS_KEY_FRAME', '67', [], [], None, ''],
        ['const cv.CAP_PROP_CODEC_EXTRADATA_INDEX', '68', [], [], None, ''],
        ['const cv.CAP_PROP_FRAME_TYPE', '69', [], [], None, ''],
        ['const cv.CAP_PROP_N_THREADS', '70', [], [], None, '']],
    None]
ok: CONST CAP_PROP_POS_MSEC=0
ok: CONST CAP_PROP_POS_FRAMES=1
ok: CONST CAP_PROP_POS_AVI_RATIO=2
ok: CONST CAP_PROP_FRAME_WIDTH=3
ok: CONST CAP_PROP_FRAME_HEIGHT=4
ok: CONST CAP_PROP_FPS=5
ok: CONST CAP_PROP_FOURCC=6
ok: CONST CAP_PROP_FRAME_COUNT=7
ok: CONST CAP_PROP_FORMAT=8
ok: CONST CAP_PROP_MODE=9
ok: CONST CAP_PROP_BRIGHTNESS=10
ok: CONST CAP_PROP_CONTRAST=11
ok: CONST CAP_PROP_SATURATION=12
ok: CONST CAP_PROP_HUE=13
ok: CONST CAP_PROP_GAIN=14
ok: CONST CAP_PROP_EXPOSURE=15
ok: CONST CAP_PROP_CONVERT_RGB=16
ok: CONST CAP_PROP_WHITE_BALANCE_BLUE_U=17
ok: CONST CAP_PROP_RECTIFICATION=18
ok: CONST CAP_PROP_MONOCHROME=19
ok: CONST CAP_PROP_SHARPNESS=20
ok: CONST CAP_PROP_AUTO_EXPOSURE=21
ok: CONST CAP_PROP_GAMMA=22
ok: CONST CAP_PROP_TEMPERATURE=23
ok: CONST CAP_PROP_TRIGGER=24
ok: CONST CAP_PROP_TRIGGER_DELAY=25
ok: CONST CAP_PROP_WHITE_BALANCE_RED_V=26
ok: CONST CAP_PROP_ZOOM=27
ok: CONST CAP_PROP_FOCUS=28
ok: CONST CAP_PROP_GUID=29
ok: CONST CAP_PROP_ISO_SPEED=30
ok: CONST CAP_PROP_BACKLIGHT=32
ok: CONST CAP_PROP_PAN=33
ok: CONST CAP_PROP_TILT=34
ok: CONST CAP_PROP_ROLL=35
ok: CONST CAP_PROP_IRIS=36
ok: CONST CAP_PROP_SETTINGS=37
ok: CONST CAP_PROP_BUFFERSIZE=38
ok: CONST CAP_PROP_AUTOFOCUS=39
ok: CONST CAP_PROP_SAR_NUM=40
ok: CONST CAP_PROP_SAR_DEN=41
ok: CONST CAP_PROP_BACKEND=42
ok: CONST CAP_PROP_CHANNEL=43
ok: CONST CAP_PROP_AUTO_WB=44
ok: CONST CAP_PROP_WB_TEMPERATURE=45
ok: CONST CAP_PROP_CODEC_PIXEL_FORMAT=46
ok: CONST CAP_PROP_BITRATE=47
ok: CONST CAP_PROP_ORIENTATION_META=48
ok: CONST CAP_PROP_ORIENTATION_AUTO=49
ok: CONST CAP_PROP_HW_ACCELERATION=50
ok: CONST CAP_PROP_HW_DEVICE=51
ok: CONST CAP_PROP_HW_ACCELERATION_USE_OPENCL=52
ok: CONST CAP_PROP_OPEN_TIMEOUT_MSEC=53
ok: CONST CAP_PROP_READ_TIMEOUT_MSEC=54
ok: CONST CAP_PROP_STREAM_OPEN_TIME_USEC=55
ok: CONST CAP_PROP_VIDEO_TOTAL_CHANNELS=56
ok: CONST CAP_PROP_VIDEO_STREAM=57
ok: CONST CAP_PROP_AUDIO_STREAM=58
ok: CONST CAP_PROP_AUDIO_POS=59
ok: CONST CAP_PROP_AUDIO_SHIFT_NSEC=60
ok: CONST CAP_PROP_AUDIO_DATA_DEPTH=61
ok: CONST CAP_PROP_AUDIO_SAMPLES_PER_SECOND=62
ok: CONST CAP_PROP_AUDIO_BASE_INDEX=63
ok: CONST CAP_PROP_AUDIO_TOTAL_CHANNELS=64
ok: CONST CAP_PROP_AUDIO_TOTAL_STREAMS=65
ok: CONST CAP_PROP_AUDIO_SYNCHRONIZE=66
ok: CONST CAP_PROP_LRF_HAS_KEY_FRAME=67
ok: CONST CAP_PROP_CODEC_EXTRADATA_INDEX=68
ok: CONST CAP_PROP_FRAME_TYPE=69
ok: CONST CAP_PROP_N_THREADS=70

--- Incoming ---
[   'enum cv.VideoWriterProperties',
    '',
    [],
    [   ['const cv.VIDEOWRITER_PROP_QUALITY', '1', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_FRAMEBYTES', '2', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_NSTRIPES', '3', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_IS_COLOR', '4', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_DEPTH', '5', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_HW_ACCELERATION', '6', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_HW_DEVICE', '7', [], [], None, ''],
        [   'const cv.VIDEOWRITER_PROP_HW_ACCELERATION_USE_OPENCL',
            '8',
            [],
            [],
            None,
            ''],
        ['const cv.VIDEOWRITER_PROP_RAW_VIDEO', '9', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_KEY_INTERVAL', '10', [], [], None, ''],
        ['const cv.VIDEOWRITER_PROP_KEY_FLAG', '11', [], [], None, '']],
    None]
ok: CONST VIDEOWRITER_PROP_QUALITY=1
ok: CONST VIDEOWRITER_PROP_FRAMEBYTES=2
ok: CONST VIDEOWRITER_PROP_NSTRIPES=3
ok: CONST VIDEOWRITER_PROP_IS_COLOR=4
ok: CONST VIDEOWRITER_PROP_DEPTH=5
ok: CONST VIDEOWRITER_PROP_HW_ACCELERATION=6
ok: CONST VIDEOWRITER_PROP_HW_DEVICE=7
ok: CONST VIDEOWRITER_PROP_HW_ACCELERATION_USE_OPENCL=8
ok: CONST VIDEOWRITER_PROP_RAW_VIDEO=9
ok: CONST VIDEOWRITER_PROP_KEY_INTERVAL=10
ok: CONST VIDEOWRITER_PROP_KEY_FLAG=11

--- Incoming ---
[   'enum cv.VideoAccelerationType',
    '',
    [],
    [   ['const cv.VIDEO_ACCELERATION_NONE', '0', [], [], None, ''],
        ['const cv.VIDEO_ACCELERATION_ANY', '1', [], [], None, ''],
        ['const cv.VIDEO_ACCELERATION_D3D11', '2', [], [], None, ''],
        ['const cv.VIDEO_ACCELERATION_VAAPI', '3', [], [], None, ''],
        ['const cv.VIDEO_ACCELERATION_MFX', '4', [], [], None, '']],
    None]
ok: CONST VIDEO_ACCELERATION_NONE=0
ok: CONST VIDEO_ACCELERATION_ANY=1
ok: CONST VIDEO_ACCELERATION_D3D11=2
ok: CONST VIDEO_ACCELERATION_VAAPI=3
ok: CONST VIDEO_ACCELERATION_MFX=4

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_DC1394_OFF', '-4', [], [], None, ''],
        ['const cv.CAP_PROP_DC1394_MODE_MANUAL', '-3', [], [], None, ''],
        ['const cv.CAP_PROP_DC1394_MODE_AUTO', '-2', [], [], None, ''],
        ['const cv.CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO', '-1', [], [], None, ''],
        ['const cv.CAP_PROP_DC1394_MAX', '31', [], [], None, '']],
    None]
ok: CONST CAP_PROP_DC1394_OFF=-4
ok: CONST CAP_PROP_DC1394_MODE_MANUAL=-3
ok: CONST CAP_PROP_DC1394_MODE_AUTO=-2
ok: CONST CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1
ok: CONST CAP_PROP_DC1394_MAX=31

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_OPENNI_DEPTH_GENERATOR', '1 << 31', [], [], None, ''],
        ['const cv.CAP_OPENNI_IMAGE_GENERATOR', '1 << 30', [], [], None, ''],
        ['const cv.CAP_OPENNI_IR_GENERATOR', '1 << 29', [], [], None, ''],
        [   'const cv.CAP_OPENNI_GENERATORS_MASK',
            'CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + '
            'CAP_OPENNI_IR_GENERATOR',
            [],
            [],
            None,
            '']],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR=1 << 31
ok: CONST CAP_OPENNI_IMAGE_GENERATOR=1 << 30
ok: CONST CAP_OPENNI_IR_GENERATOR=1 << 29
ok: CONST CAP_OPENNI_GENERATORS_MASK=CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + CAP_OPENNI_IR_GENERATOR

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_OPENNI_OUTPUT_MODE', '100', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_FRAME_MAX_DEPTH', '101', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_BASELINE', '102', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_FOCAL_LENGTH', '103', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_REGISTRATION', '104', [], [], None, ''],
        [   'const cv.CAP_PROP_OPENNI_REGISTRATION_ON',
            'CAP_PROP_OPENNI_REGISTRATION',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_OPENNI_APPROX_FRAME_SYNC', '105', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_MAX_BUFFER_SIZE', '106', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_CIRCLE_BUFFER', '107', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_MAX_TIME_DURATION', '108', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI_GENERATOR_PRESENT', '109', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI2_SYNC', '110', [], [], None, ''],
        ['const cv.CAP_PROP_OPENNI2_MIRROR', '111', [], [], None, '']],
    None]
ok: CONST CAP_PROP_OPENNI_OUTPUT_MODE=100
ok: CONST CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101
ok: CONST CAP_PROP_OPENNI_BASELINE=102
ok: CONST CAP_PROP_OPENNI_FOCAL_LENGTH=103
ok: CONST CAP_PROP_OPENNI_REGISTRATION=104
ok: CONST CAP_PROP_OPENNI_REGISTRATION_ON=CAP_PROP_OPENNI_REGISTRATION
ok: CONST CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105
ok: CONST CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106
ok: CONST CAP_PROP_OPENNI_CIRCLE_BUFFER=107
ok: CONST CAP_PROP_OPENNI_MAX_TIME_DURATION=108
ok: CONST CAP_PROP_OPENNI_GENERATOR_PRESENT=109
ok: CONST CAP_PROP_OPENNI2_SYNC=110
ok: CONST CAP_PROP_OPENNI2_MIRROR=111

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   [   'const cv.CAP_OPENNI_IMAGE_GENERATOR_PRESENT',
            'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE',
            'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_DEPTH_GENERATOR_PRESENT',
            'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_DEPTH_GENERATOR_BASELINE',
            'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH',
            'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
            'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON',
            'CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_OPENNI_IR_GENERATOR_PRESENT',
            'CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
            [],
            [],
            None,
            '']],
    None]
ok: CONST CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT
ok: CONST CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION
ok: CONST CAP_OPENNI_IR_GENERATOR_PRESENT=CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_OPENNI_DEPTH_MAP', '0', [], [], None, ''],
        ['const cv.CAP_OPENNI_POINT_CLOUD_MAP', '1', [], [], None, ''],
        ['const cv.CAP_OPENNI_DISPARITY_MAP', '2', [], [], None, ''],
        ['const cv.CAP_OPENNI_DISPARITY_MAP_32F', '3', [], [], None, ''],
        ['const cv.CAP_OPENNI_VALID_DEPTH_MASK', '4', [], [], None, ''],
        ['const cv.CAP_OPENNI_BGR_IMAGE', '5', [], [], None, ''],
        ['const cv.CAP_OPENNI_GRAY_IMAGE', '6', [], [], None, ''],
        ['const cv.CAP_OPENNI_IR_IMAGE', '7', [], [], None, '']],
    None]
ok: CONST CAP_OPENNI_DEPTH_MAP=0
ok: CONST CAP_OPENNI_POINT_CLOUD_MAP=1
ok: CONST CAP_OPENNI_DISPARITY_MAP=2
ok: CONST CAP_OPENNI_DISPARITY_MAP_32F=3
ok: CONST CAP_OPENNI_VALID_DEPTH_MASK=4
ok: CONST CAP_OPENNI_BGR_IMAGE=5
ok: CONST CAP_OPENNI_GRAY_IMAGE=6
ok: CONST CAP_OPENNI_IR_IMAGE=7

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_OPENNI_VGA_30HZ', '0', [], [], None, ''],
        ['const cv.CAP_OPENNI_SXGA_15HZ', '1', [], [], None, ''],
        ['const cv.CAP_OPENNI_SXGA_30HZ', '2', [], [], None, ''],
        ['const cv.CAP_OPENNI_QVGA_30HZ', '3', [], [], None, ''],
        ['const cv.CAP_OPENNI_QVGA_60HZ', '4', [], [], None, '']],
    None]
ok: CONST CAP_OPENNI_VGA_30HZ=0
ok: CONST CAP_OPENNI_SXGA_15HZ=1
ok: CONST CAP_OPENNI_SXGA_30HZ=2
ok: CONST CAP_OPENNI_QVGA_30HZ=3
ok: CONST CAP_OPENNI_QVGA_60HZ=4

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [['const cv.CAP_PROP_GSTREAMER_QUEUE_LENGTH', '200', [], [], None, '']],
    None]
ok: CONST CAP_PROP_GSTREAMER_QUEUE_LENGTH=200

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_PVAPI_MULTICASTIP', '300', [], [], None, ''],
        [   'const cv.CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE',
            '301',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_PVAPI_DECIMATIONHORIZONTAL',
            '302',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_PVAPI_DECIMATIONVERTICAL', '303', [], [], None, ''],
        ['const cv.CAP_PROP_PVAPI_BINNINGX', '304', [], [], None, ''],
        ['const cv.CAP_PROP_PVAPI_BINNINGY', '305', [], [], None, ''],
        ['const cv.CAP_PROP_PVAPI_PIXELFORMAT', '306', [], [], None, '']],
    None]
ok: CONST CAP_PROP_PVAPI_MULTICASTIP=300
ok: CONST CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301
ok: CONST CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302
ok: CONST CAP_PROP_PVAPI_DECIMATIONVERTICAL=303
ok: CONST CAP_PROP_PVAPI_BINNINGX=304
ok: CONST CAP_PROP_PVAPI_BINNINGY=305
ok: CONST CAP_PROP_PVAPI_PIXELFORMAT=306

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PVAPI_FSTRIGMODE_FREERUN', '0', [], [], None, ''],
        ['const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN1', '1', [], [], None, ''],
        ['const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN2', '2', [], [], None, ''],
        ['const cv.CAP_PVAPI_FSTRIGMODE_FIXEDRATE', '3', [], [], None, ''],
        ['const cv.CAP_PVAPI_FSTRIGMODE_SOFTWARE', '4', [], [], None, '']],
    None]
ok: CONST CAP_PVAPI_FSTRIGMODE_FREERUN=0
ok: CONST CAP_PVAPI_FSTRIGMODE_SYNCIN1=1
ok: CONST CAP_PVAPI_FSTRIGMODE_SYNCIN2=2
ok: CONST CAP_PVAPI_FSTRIGMODE_FIXEDRATE=3
ok: CONST CAP_PVAPI_FSTRIGMODE_SOFTWARE=4

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PVAPI_DECIMATION_OFF', '1', [], [], None, ''],
        ['const cv.CAP_PVAPI_DECIMATION_2OUTOF4', '2', [], [], None, ''],
        ['const cv.CAP_PVAPI_DECIMATION_2OUTOF8', '4', [], [], None, ''],
        ['const cv.CAP_PVAPI_DECIMATION_2OUTOF16', '8', [], [], None, '']],
    None]
ok: CONST CAP_PVAPI_DECIMATION_OFF=1
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF4=2
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF8=4
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF16=8

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PVAPI_PIXELFORMAT_MONO8', '1', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_MONO16', '2', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_BAYER8', '3', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_BAYER16', '4', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_RGB24', '5', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_BGR24', '6', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_RGBA32', '7', [], [], None, ''],
        ['const cv.CAP_PVAPI_PIXELFORMAT_BGRA32', '8', [], [], None, '']],
    None]
ok: CONST CAP_PVAPI_PIXELFORMAT_MONO8=1
ok: CONST CAP_PVAPI_PIXELFORMAT_MONO16=2
ok: CONST CAP_PVAPI_PIXELFORMAT_BAYER8=3
ok: CONST CAP_PVAPI_PIXELFORMAT_BAYER16=4
ok: CONST CAP_PVAPI_PIXELFORMAT_RGB24=5
ok: CONST CAP_PVAPI_PIXELFORMAT_BGR24=6
ok: CONST CAP_PVAPI_PIXELFORMAT_RGBA32=7
ok: CONST CAP_PVAPI_PIXELFORMAT_BGRA32=8

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_XI_DOWNSAMPLING', '400', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DATA_FORMAT', '401', [], [], None, ''],
        ['const cv.CAP_PROP_XI_OFFSET_X', '402', [], [], None, ''],
        ['const cv.CAP_PROP_XI_OFFSET_Y', '403', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TRG_SOURCE', '404', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TRG_SOFTWARE', '405', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GPI_SELECTOR', '406', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GPI_MODE', '407', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GPI_LEVEL', '408', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GPO_SELECTOR', '409', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GPO_MODE', '410', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LED_SELECTOR', '411', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LED_MODE', '412', [], [], None, ''],
        ['const cv.CAP_PROP_XI_MANUAL_WB', '413', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AUTO_WB', '414', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG', '415', [], [], None, ''],
        ['const cv.CAP_PROP_XI_EXP_PRIORITY', '416', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AE_MAX_LIMIT', '417', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AG_MAX_LIMIT', '418', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG_LEVEL', '419', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TIMEOUT', '420', [], [], None, ''],
        ['const cv.CAP_PROP_XI_EXPOSURE', '421', [], [], None, ''],
        ['const cv.CAP_PROP_XI_EXPOSURE_BURST_COUNT', '422', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GAIN_SELECTOR', '423', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GAIN', '424', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DOWNSAMPLING_TYPE', '426', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BINNING_SELECTOR', '427', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BINNING_VERTICAL', '428', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BINNING_HORIZONTAL', '429', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BINNING_PATTERN', '430', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DECIMATION_SELECTOR', '431', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DECIMATION_VERTICAL', '432', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DECIMATION_HORIZONTAL', '433', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DECIMATION_PATTERN', '434', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR',
            '587',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_TEST_PATTERN', '588', [], [], None, ''],
        ['const cv.CAP_PROP_XI_IMAGE_DATA_FORMAT', '435', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SHUTTER_TYPE', '436', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SENSOR_TAPS', '437', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG_ROI_OFFSET_X', '439', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG_ROI_OFFSET_Y', '440', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG_ROI_WIDTH', '441', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AEAG_ROI_HEIGHT', '442', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BPC', '445', [], [], None, ''],
        ['const cv.CAP_PROP_XI_WB_KR', '448', [], [], None, ''],
        ['const cv.CAP_PROP_XI_WB_KG', '449', [], [], None, ''],
        ['const cv.CAP_PROP_XI_WB_KB', '450', [], [], None, ''],
        ['const cv.CAP_PROP_XI_WIDTH', '451', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HEIGHT', '452', [], [], None, ''],
        ['const cv.CAP_PROP_XI_REGION_SELECTOR', '589', [], [], None, ''],
        ['const cv.CAP_PROP_XI_REGION_MODE', '595', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LIMIT_BANDWIDTH', '459', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH', '460', [], [], None, ''],
        ['const cv.CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH', '461', [], [], None, ''],
        ['const cv.CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH', '462', [], [], None, ''],
        ['const cv.CAP_PROP_XI_OUTPUT_DATA_PACKING', '463', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE',
            '464',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_IS_COOLED', '465', [], [], None, ''],
        ['const cv.CAP_PROP_XI_COOLING', '466', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TARGET_TEMP', '467', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CHIP_TEMP', '468', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HOUS_TEMP', '469', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HOUS_BACK_SIDE_TEMP', '590', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SENSOR_BOARD_TEMP', '596', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CMS', '470', [], [], None, ''],
        ['const cv.CAP_PROP_XI_APPLY_CMS', '471', [], [], None, ''],
        ['const cv.CAP_PROP_XI_IMAGE_IS_COLOR', '474', [], [], None, ''],
        ['const cv.CAP_PROP_XI_COLOR_FILTER_ARRAY', '475', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GAMMAY', '476', [], [], None, ''],
        ['const cv.CAP_PROP_XI_GAMMAC', '477', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SHARPNESS', '478', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_00', '479', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_01', '480', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_02', '481', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_03', '482', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_10', '483', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_11', '484', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_12', '485', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_13', '486', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_20', '487', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_21', '488', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_22', '489', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_23', '490', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_30', '491', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_31', '492', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_32', '493', [], [], None, ''],
        ['const cv.CAP_PROP_XI_CC_MATRIX_33', '494', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEFAULT_CC_MATRIX', '495', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TRG_SELECTOR', '498', [], [], None, ''],
        ['const cv.CAP_PROP_XI_ACQ_FRAME_BURST_COUNT', '499', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEBOUNCE_EN', '507', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEBOUNCE_T0', '508', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEBOUNCE_T1', '509', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEBOUNCE_POL', '510', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_MODE', '511', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_APERTURE_VALUE', '512', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE',
            '513',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_LENS_FOCUS_MOVE', '514', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_FOCUS_DISTANCE', '515', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_FOCAL_LENGTH', '516', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_FEATURE_SELECTOR', '517', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LENS_FEATURE', '518', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEVICE_MODEL_ID', '521', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEVICE_SN', '522', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA',
            '529',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_IMAGE_PAYLOAD_SIZE', '530', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT',
            '531',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ', '532', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX',
            '533',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT',
            '534',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_FRAMERATE', '535', [], [], None, ''],
        ['const cv.CAP_PROP_XI_COUNTER_SELECTOR', '536', [], [], None, ''],
        ['const cv.CAP_PROP_XI_COUNTER_VALUE', '537', [], [], None, ''],
        ['const cv.CAP_PROP_XI_ACQ_TIMING_MODE', '538', [], [], None, ''],
        ['const cv.CAP_PROP_XI_AVAILABLE_BANDWIDTH', '539', [], [], None, ''],
        ['const cv.CAP_PROP_XI_BUFFER_POLICY', '540', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LUT_EN', '541', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LUT_INDEX', '542', [], [], None, ''],
        ['const cv.CAP_PROP_XI_LUT_VALUE', '543', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TRG_DELAY', '544', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TS_RST_MODE', '545', [], [], None, ''],
        ['const cv.CAP_PROP_XI_TS_RST_SOURCE', '546', [], [], None, ''],
        ['const cv.CAP_PROP_XI_IS_DEVICE_EXIST', '547', [], [], None, ''],
        ['const cv.CAP_PROP_XI_ACQ_BUFFER_SIZE', '548', [], [], None, ''],
        ['const cv.CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT', '549', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE',
            '550',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_BUFFERS_QUEUE_SIZE', '551', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT',
            '552',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_RECENT_FRAME', '553', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEVICE_RESET', '554', [], [], None, ''],
        ['const cv.CAP_PROP_XI_COLUMN_FPN_CORRECTION', '555', [], [], None, ''],
        ['const cv.CAP_PROP_XI_ROW_FPN_CORRECTION', '591', [], [], None, ''],
        ['const cv.CAP_PROP_XI_SENSOR_MODE', '558', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HDR', '559', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HDR_KNEEPOINT_COUNT', '560', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HDR_T1', '561', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HDR_T2', '562', [], [], None, ''],
        ['const cv.CAP_PROP_XI_KNEEPOINT1', '563', [], [], None, ''],
        ['const cv.CAP_PROP_XI_KNEEPOINT2', '564', [], [], None, ''],
        ['const cv.CAP_PROP_XI_IMAGE_BLACK_LEVEL', '565', [], [], None, ''],
        ['const cv.CAP_PROP_XI_HW_REVISION', '571', [], [], None, ''],
        ['const cv.CAP_PROP_XI_DEBUG_LEVEL', '572', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION',
            '573',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_FFS_FILE_ID', '594', [], [], None, ''],
        ['const cv.CAP_PROP_XI_FFS_FILE_SIZE', '580', [], [], None, ''],
        ['const cv.CAP_PROP_XI_FREE_FFS_SIZE', '581', [], [], None, ''],
        ['const cv.CAP_PROP_XI_USED_FFS_SIZE', '582', [], [], None, ''],
        ['const cv.CAP_PROP_XI_FFS_ACCESS_KEY', '583', [], [], None, ''],
        [   'const cv.CAP_PROP_XI_SENSOR_FEATURE_SELECTOR',
            '585',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_XI_SENSOR_FEATURE_VALUE', '586', [], [], None, '']],
    None]
ok: CONST CAP_PROP_XI_DOWNSAMPLING=400
ok: CONST CAP_PROP_XI_DATA_FORMAT=401
ok: CONST CAP_PROP_XI_OFFSET_X=402
ok: CONST CAP_PROP_XI_OFFSET_Y=403
ok: CONST CAP_PROP_XI_TRG_SOURCE=404
ok: CONST CAP_PROP_XI_TRG_SOFTWARE=405
ok: CONST CAP_PROP_XI_GPI_SELECTOR=406
ok: CONST CAP_PROP_XI_GPI_MODE=407
ok: CONST CAP_PROP_XI_GPI_LEVEL=408
ok: CONST CAP_PROP_XI_GPO_SELECTOR=409
ok: CONST CAP_PROP_XI_GPO_MODE=410
ok: CONST CAP_PROP_XI_LED_SELECTOR=411
ok: CONST CAP_PROP_XI_LED_MODE=412
ok: CONST CAP_PROP_XI_MANUAL_WB=413
ok: CONST CAP_PROP_XI_AUTO_WB=414
ok: CONST CAP_PROP_XI_AEAG=415
ok: CONST CAP_PROP_XI_EXP_PRIORITY=416
ok: CONST CAP_PROP_XI_AE_MAX_LIMIT=417
ok: CONST CAP_PROP_XI_AG_MAX_LIMIT=418
ok: CONST CAP_PROP_XI_AEAG_LEVEL=419
ok: CONST CAP_PROP_XI_TIMEOUT=420
ok: CONST CAP_PROP_XI_EXPOSURE=421
ok: CONST CAP_PROP_XI_EXPOSURE_BURST_COUNT=422
ok: CONST CAP_PROP_XI_GAIN_SELECTOR=423
ok: CONST CAP_PROP_XI_GAIN=424
ok: CONST CAP_PROP_XI_DOWNSAMPLING_TYPE=426
ok: CONST CAP_PROP_XI_BINNING_SELECTOR=427
ok: CONST CAP_PROP_XI_BINNING_VERTICAL=428
ok: CONST CAP_PROP_XI_BINNING_HORIZONTAL=429
ok: CONST CAP_PROP_XI_BINNING_PATTERN=430
ok: CONST CAP_PROP_XI_DECIMATION_SELECTOR=431
ok: CONST CAP_PROP_XI_DECIMATION_VERTICAL=432
ok: CONST CAP_PROP_XI_DECIMATION_HORIZONTAL=433
ok: CONST CAP_PROP_XI_DECIMATION_PATTERN=434
ok: CONST CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587
ok: CONST CAP_PROP_XI_TEST_PATTERN=588
ok: CONST CAP_PROP_XI_IMAGE_DATA_FORMAT=435
ok: CONST CAP_PROP_XI_SHUTTER_TYPE=436
ok: CONST CAP_PROP_XI_SENSOR_TAPS=437
ok: CONST CAP_PROP_XI_AEAG_ROI_OFFSET_X=439
ok: CONST CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440
ok: CONST CAP_PROP_XI_AEAG_ROI_WIDTH=441
ok: CONST CAP_PROP_XI_AEAG_ROI_HEIGHT=442
ok: CONST CAP_PROP_XI_BPC=445
ok: CONST CAP_PROP_XI_WB_KR=448
ok: CONST CAP_PROP_XI_WB_KG=449
ok: CONST CAP_PROP_XI_WB_KB=450
ok: CONST CAP_PROP_XI_WIDTH=451
ok: CONST CAP_PROP_XI_HEIGHT=452
ok: CONST CAP_PROP_XI_REGION_SELECTOR=589
ok: CONST CAP_PROP_XI_REGION_MODE=595
ok: CONST CAP_PROP_XI_LIMIT_BANDWIDTH=459
ok: CONST CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460
ok: CONST CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461
ok: CONST CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462
ok: CONST CAP_PROP_XI_OUTPUT_DATA_PACKING=463
ok: CONST CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464
ok: CONST CAP_PROP_XI_IS_COOLED=465
ok: CONST CAP_PROP_XI_COOLING=466
ok: CONST CAP_PROP_XI_TARGET_TEMP=467
ok: CONST CAP_PROP_XI_CHIP_TEMP=468
ok: CONST CAP_PROP_XI_HOUS_TEMP=469
ok: CONST CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590
ok: CONST CAP_PROP_XI_SENSOR_BOARD_TEMP=596
ok: CONST CAP_PROP_XI_CMS=470
ok: CONST CAP_PROP_XI_APPLY_CMS=471
ok: CONST CAP_PROP_XI_IMAGE_IS_COLOR=474
ok: CONST CAP_PROP_XI_COLOR_FILTER_ARRAY=475
ok: CONST CAP_PROP_XI_GAMMAY=476
ok: CONST CAP_PROP_XI_GAMMAC=477
ok: CONST CAP_PROP_XI_SHARPNESS=478
ok: CONST CAP_PROP_XI_CC_MATRIX_00=479
ok: CONST CAP_PROP_XI_CC_MATRIX_01=480
ok: CONST CAP_PROP_XI_CC_MATRIX_02=481
ok: CONST CAP_PROP_XI_CC_MATRIX_03=482
ok: CONST CAP_PROP_XI_CC_MATRIX_10=483
ok: CONST CAP_PROP_XI_CC_MATRIX_11=484
ok: CONST CAP_PROP_XI_CC_MATRIX_12=485
ok: CONST CAP_PROP_XI_CC_MATRIX_13=486
ok: CONST CAP_PROP_XI_CC_MATRIX_20=487
ok: CONST CAP_PROP_XI_CC_MATRIX_21=488
ok: CONST CAP_PROP_XI_CC_MATRIX_22=489
ok: CONST CAP_PROP_XI_CC_MATRIX_23=490
ok: CONST CAP_PROP_XI_CC_MATRIX_30=491
ok: CONST CAP_PROP_XI_CC_MATRIX_31=492
ok: CONST CAP_PROP_XI_CC_MATRIX_32=493
ok: CONST CAP_PROP_XI_CC_MATRIX_33=494
ok: CONST CAP_PROP_XI_DEFAULT_CC_MATRIX=495
ok: CONST CAP_PROP_XI_TRG_SELECTOR=498
ok: CONST CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499
ok: CONST CAP_PROP_XI_DEBOUNCE_EN=507
ok: CONST CAP_PROP_XI_DEBOUNCE_T0=508
ok: CONST CAP_PROP_XI_DEBOUNCE_T1=509
ok: CONST CAP_PROP_XI_DEBOUNCE_POL=510
ok: CONST CAP_PROP_XI_LENS_MODE=511
ok: CONST CAP_PROP_XI_LENS_APERTURE_VALUE=512
ok: CONST CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513
ok: CONST CAP_PROP_XI_LENS_FOCUS_MOVE=514
ok: CONST CAP_PROP_XI_LENS_FOCUS_DISTANCE=515
ok: CONST CAP_PROP_XI_LENS_FOCAL_LENGTH=516
ok: CONST CAP_PROP_XI_LENS_FEATURE_SELECTOR=517
ok: CONST CAP_PROP_XI_LENS_FEATURE=518
ok: CONST CAP_PROP_XI_DEVICE_MODEL_ID=521
ok: CONST CAP_PROP_XI_DEVICE_SN=522
ok: CONST CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529
ok: CONST CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530
ok: CONST CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531
ok: CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532
ok: CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533
ok: CONST CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534
ok: CONST CAP_PROP_XI_FRAMERATE=535
ok: CONST CAP_PROP_XI_COUNTER_SELECTOR=536
ok: CONST CAP_PROP_XI_COUNTER_VALUE=537
ok: CONST CAP_PROP_XI_ACQ_TIMING_MODE=538
ok: CONST CAP_PROP_XI_AVAILABLE_BANDWIDTH=539
ok: CONST CAP_PROP_XI_BUFFER_POLICY=540
ok: CONST CAP_PROP_XI_LUT_EN=541
ok: CONST CAP_PROP_XI_LUT_INDEX=542
ok: CONST CAP_PROP_XI_LUT_VALUE=543
ok: CONST CAP_PROP_XI_TRG_DELAY=544
ok: CONST CAP_PROP_XI_TS_RST_MODE=545
ok: CONST CAP_PROP_XI_TS_RST_SOURCE=546
ok: CONST CAP_PROP_XI_IS_DEVICE_EXIST=547
ok: CONST CAP_PROP_XI_ACQ_BUFFER_SIZE=548
ok: CONST CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549
ok: CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550
ok: CONST CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551
ok: CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552
ok: CONST CAP_PROP_XI_RECENT_FRAME=553
ok: CONST CAP_PROP_XI_DEVICE_RESET=554
ok: CONST CAP_PROP_XI_COLUMN_FPN_CORRECTION=555
ok: CONST CAP_PROP_XI_ROW_FPN_CORRECTION=591
ok: CONST CAP_PROP_XI_SENSOR_MODE=558
ok: CONST CAP_PROP_XI_HDR=559
ok: CONST CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560
ok: CONST CAP_PROP_XI_HDR_T1=561
ok: CONST CAP_PROP_XI_HDR_T2=562
ok: CONST CAP_PROP_XI_KNEEPOINT1=563
ok: CONST CAP_PROP_XI_KNEEPOINT2=564
ok: CONST CAP_PROP_XI_IMAGE_BLACK_LEVEL=565
ok: CONST CAP_PROP_XI_HW_REVISION=571
ok: CONST CAP_PROP_XI_DEBUG_LEVEL=572
ok: CONST CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573
ok: CONST CAP_PROP_XI_FFS_FILE_ID=594
ok: CONST CAP_PROP_XI_FFS_FILE_SIZE=580
ok: CONST CAP_PROP_XI_FREE_FFS_SIZE=581
ok: CONST CAP_PROP_XI_USED_FFS_SIZE=582
ok: CONST CAP_PROP_XI_FFS_ACCESS_KEY=583
ok: CONST CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585
ok: CONST CAP_PROP_XI_SENSOR_FEATURE_VALUE=586

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [['const cv.CAP_PROP_ARAVIS_AUTOTRIGGER', '600', [], [], None, '']],
    None]
ok: CONST CAP_PROP_ARAVIS_AUTOTRIGGER=600

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_IOS_DEVICE_FOCUS', '9001', [], [], None, ''],
        ['const cv.CAP_PROP_IOS_DEVICE_EXPOSURE', '9002', [], [], None, ''],
        ['const cv.CAP_PROP_IOS_DEVICE_FLASH', '9003', [], [], None, ''],
        ['const cv.CAP_PROP_IOS_DEVICE_WHITEBALANCE', '9004', [], [], None, ''],
        ['const cv.CAP_PROP_IOS_DEVICE_TORCH', '9005', [], [], None, '']],
    None]
ok: CONST CAP_PROP_IOS_DEVICE_FOCUS=9001
ok: CONST CAP_PROP_IOS_DEVICE_EXPOSURE=9002
ok: CONST CAP_PROP_IOS_DEVICE_FLASH=9003
ok: CONST CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004
ok: CONST CAP_PROP_IOS_DEVICE_TORCH=9005

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_GIGA_FRAME_OFFSET_X', '10001', [], [], None, ''],
        ['const cv.CAP_PROP_GIGA_FRAME_OFFSET_Y', '10002', [], [], None, ''],
        ['const cv.CAP_PROP_GIGA_FRAME_WIDTH_MAX', '10003', [], [], None, ''],
        ['const cv.CAP_PROP_GIGA_FRAME_HEIGH_MAX', '10004', [], [], None, ''],
        ['const cv.CAP_PROP_GIGA_FRAME_SENS_WIDTH', '10005', [], [], None, ''],
        ['const cv.CAP_PROP_GIGA_FRAME_SENS_HEIGH', '10006', [], [], None, '']],
    None]
ok: CONST CAP_PROP_GIGA_FRAME_OFFSET_X=10001
ok: CONST CAP_PROP_GIGA_FRAME_OFFSET_Y=10002
ok: CONST CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003
ok: CONST CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004
ok: CONST CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005
ok: CONST CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   [   'const cv.CAP_PROP_INTELPERC_PROFILE_COUNT',
            '11001',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_INTELPERC_PROFILE_IDX', '11002', [], [], None, ''],
        [   'const cv.CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE',
            '11003',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE',
            '11004',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD',
            '11005',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ',
            '11006',
            [],
            [],
            None,
            ''],
        [   'const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT',
            '11007',
            [],
            [],
            None,
            '']],
    None]
ok: CONST CAP_PROP_INTELPERC_PROFILE_COUNT=11001
ok: CONST CAP_PROP_INTELPERC_PROFILE_IDX=11002
ok: CONST CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003
ok: CONST CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004
ok: CONST CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005
ok: CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006
ok: CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_INTELPERC_DEPTH_GENERATOR', '1 << 29', [], [], None, ''],
        ['const cv.CAP_INTELPERC_IMAGE_GENERATOR', '1 << 28', [], [], None, ''],
        ['const cv.CAP_INTELPERC_IR_GENERATOR', '1 << 27', [], [], None, ''],
        [   'const cv.CAP_INTELPERC_GENERATORS_MASK',
            'CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR + '
            'CAP_INTELPERC_IR_GENERATOR',
            [],
            [],
            None,
            '']],
    None]
ok: CONST CAP_INTELPERC_DEPTH_GENERATOR=1 << 29
ok: CONST CAP_INTELPERC_IMAGE_GENERATOR=1 << 28
ok: CONST CAP_INTELPERC_IR_GENERATOR=1 << 27
ok: CONST CAP_INTELPERC_GENERATORS_MASK=CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR + CAP_INTELPERC_IR_GENERATOR

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_INTELPERC_DEPTH_MAP', '0', [], [], None, ''],
        ['const cv.CAP_INTELPERC_UVDEPTH_MAP', '1', [], [], None, ''],
        ['const cv.CAP_INTELPERC_IR_MAP', '2', [], [], None, ''],
        ['const cv.CAP_INTELPERC_IMAGE', '3', [], [], None, '']],
    None]
ok: CONST CAP_INTELPERC_DEPTH_MAP=0
ok: CONST CAP_INTELPERC_UVDEPTH_MAP=1
ok: CONST CAP_INTELPERC_IR_MAP=2
ok: CONST CAP_INTELPERC_IMAGE=3

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_GPHOTO2_PREVIEW', '17001', [], [], None, ''],
        [   'const cv.CAP_PROP_GPHOTO2_WIDGET_ENUMERATE',
            '17002',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_GPHOTO2_RELOAD_CONFIG', '17003', [], [], None, ''],
        [   'const cv.CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE',
            '17004',
            [],
            [],
            None,
            ''],
        ['const cv.CAP_PROP_GPHOTO2_COLLECT_MSGS', '17005', [], [], None, ''],
        ['const cv.CAP_PROP_GPHOTO2_FLUSH_MSGS', '17006', [], [], None, ''],
        ['const cv.CAP_PROP_SPEED', '17007', [], [], None, ''],
        ['const cv.CAP_PROP_APERTURE', '17008', [], [], None, ''],
        ['const cv.CAP_PROP_EXPOSUREPROGRAM', '17009', [], [], None, ''],
        ['const cv.CAP_PROP_VIEWFINDER', '17010', [], [], None, '']],
    None]
ok: CONST CAP_PROP_GPHOTO2_PREVIEW=17001
ok: CONST CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002
ok: CONST CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003
ok: CONST CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004
ok: CONST CAP_PROP_GPHOTO2_COLLECT_MSGS=17005
ok: CONST CAP_PROP_GPHOTO2_FLUSH_MSGS=17006
ok: CONST CAP_PROP_SPEED=17007
ok: CONST CAP_PROP_APERTURE=17008
ok: CONST CAP_PROP_EXPOSUREPROGRAM=17009
ok: CONST CAP_PROP_VIEWFINDER=17010

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CAP_PROP_IMAGES_BASE', '18000', [], [], None, ''],
        ['const cv.CAP_PROP_IMAGES_LAST', '19000', [], [], None, '']],
    None]
ok: CONST CAP_PROP_IMAGES_BASE=18000
ok: CONST CAP_PROP_IMAGES_LAST=19000

--- Incoming ---
[   'enum cv.VideoCaptureOBSensorDataType',
    '',
    [],
    [   ['const cv.CAP_OBSENSOR_DEPTH_MAP', '0', [], [], None, ''],
        ['const cv.CAP_OBSENSOR_BGR_IMAGE', '1', [], [], None, ''],
        ['const cv.CAP_OBSENSOR_IR_IMAGE', '2', [], [], None, '']],
    None]
ok: CONST CAP_OBSENSOR_DEPTH_MAP=0
ok: CONST CAP_OBSENSOR_BGR_IMAGE=1
ok: CONST CAP_OBSENSOR_IR_IMAGE=2

--- Incoming ---
[   'enum cv.VideoCaptureOBSensorGenerators',
    '',
    [],
    [   ['const cv.CAP_OBSENSOR_DEPTH_GENERATOR', '1 << 29', [], [], None, ''],
        ['const cv.CAP_OBSENSOR_IMAGE_GENERATOR', '1 << 28', [], [], None, ''],
        ['const cv.CAP_OBSENSOR_IR_GENERATOR', '1 << 27', [], [], None, ''],
        [   'const cv.CAP_OBSENSOR_GENERATORS_MASK',
            'CAP_OBSENSOR_DEPTH_GENERATOR + CAP_OBSENSOR_IMAGE_GENERATOR + '
            'CAP_OBSENSOR_IR_GENERATOR',
            [],
            [],
            None,
            '']],
    None]
ok: CONST CAP_OBSENSOR_DEPTH_GENERATOR=1 << 29
ok: CONST CAP_OBSENSOR_IMAGE_GENERATOR=1 << 28
ok: CONST CAP_OBSENSOR_IR_GENERATOR=1 << 27
ok: CONST CAP_OBSENSOR_GENERATORS_MASK=CAP_OBSENSOR_DEPTH_GENERATOR + CAP_OBSENSOR_IMAGE_GENERATOR + CAP_OBSENSOR_IR_GENERATOR

--- Incoming ---
[   'enum cv.VideoCaptureOBSensorProperties',
    '',
    [],
    [   ['const cv.CAP_PROP_OBSENSOR_INTRINSIC_FX', '26001', [], [], None, ''],
        ['const cv.CAP_PROP_OBSENSOR_INTRINSIC_FY', '26002', [], [], None, ''],
        ['const cv.CAP_PROP_OBSENSOR_INTRINSIC_CX', '26003', [], [], None, ''],
        ['const cv.CAP_PROP_OBSENSOR_INTRINSIC_CY', '26004', [], [], None, '']],
    None]
ok: CONST CAP_PROP_OBSENSOR_INTRINSIC_FX=26001
ok: CONST CAP_PROP_OBSENSOR_INTRINSIC_FY=26002
ok: CONST CAP_PROP_OBSENSOR_INTRINSIC_CX=26003
ok: CONST CAP_PROP_OBSENSOR_INTRINSIC_CY=26004

--- Incoming ---
['class cv.VideoCapture', '', [], [], None]
ok: class CLASS cv::.VideoCapture : , name: VideoCapture, base: 

--- Incoming ---
['cv.VideoCapture.VideoCapture', '', [], [], None]
ok: FUNC < cv.VideoCapture.VideoCapture []>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', 'CAP_ANY', []]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=CAP_ANY]>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [['int', 'index', '', []], ['int', 'apiPreference', 'CAP_ANY', []]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG int index=, ARG int apiPreference=CAP_ANY]>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [   ['int', 'index', '', []],
        ['int', 'apiPreference', '', []],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG int index=, ARG int apiPreference=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', 'CAP_ANY', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=CAP_ANY]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [['int', 'index', '', []], ['int', 'apiPreference', 'CAP_ANY', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG int index=, ARG int apiPreference=CAP_ANY]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [   ['int', 'index', '', []],
        ['int', 'apiPreference', '', []],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG int index=, ARG int apiPreference=, ARG vector_int params=]>

--- Incoming ---
['cv.VideoCapture.isOpened', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.VideoCapture.isOpened []>

--- Incoming ---
['cv.VideoCapture.release', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.VideoCapture.release []>

--- Incoming ---
['cv.VideoCapture.grab', 'bool', ['/V'], [], 'bool']
ok: FUNC <bool cv.VideoCapture.grab []>

--- Incoming ---
[   'cv.VideoCapture.retrieve',
    'bool',
    ['/V'],
    [['Mat', 'image', '', ['/O']], ['int', 'flag', '0', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.retrieve [ARG Mat image=, ARG int flag=0]>

--- Incoming ---
['cv.VideoCapture.read', 'bool', ['/V'], [['Mat', 'image', '', ['/O']]], 'bool']
ok: FUNC <bool cv.VideoCapture.read [ARG Mat image=]>

--- Incoming ---
[   'cv.VideoCapture.set',
    'bool',
    ['/V'],
    [['int', 'propId', '', []], ['double', 'value', '', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.set [ARG int propId=, ARG double value=]>

--- Incoming ---
[   'cv.VideoCapture.get',
    'double',
    ['/C', '/V'],
    [['int', 'propId', '', []]],
    'double']
ok: FUNC <double cv.VideoCapture.get [ARG int propId=]>

--- Incoming ---
['cv.VideoCapture.getBackendName', 'String', ['/C'], [], 'String']
ok: FUNC <String cv.VideoCapture.getBackendName []>

--- Incoming ---
[   'cv.VideoCapture.setExceptionMode',
    'void',
    [],
    [['bool', 'enable', '', []]],
    'void']
ok: FUNC <void cv.VideoCapture.setExceptionMode [ARG bool enable=]>

--- Incoming ---
['cv.VideoCapture.getExceptionMode', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.VideoCapture.getExceptionMode []>

--- Incoming ---
[   'cv.VideoCapture.waitAny',
    'bool',
    ['/S'],
    [   ['vector_VideoCapture', 'streams', '', ['/C', '/Ref']],
        ['vector_int', 'readyIndex', '', ['/O', '/Ref']],
        ['int64', 'timeoutNs', '0', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.waitAny [ARG vector_VideoCapture streams=, ARG vector_int readyIndex=, ARG int64 timeoutNs=0]>

--- Incoming ---
['class cv.VideoWriter', '', [], [], None]
ok: class CLASS cv::.VideoWriter : , name: VideoWriter, base: 

--- Incoming ---
['cv.VideoWriter.VideoWriter', '', [], [], None]
ok: FUNC < cv.VideoWriter.VideoWriter []>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', ['/C', '/Ref']],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', ['/C', '/Ref']],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', ['/C', '/Ref']],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', ['/C', '/Ref']],
        ['vector_int', 'params', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>

--- Incoming ---
['cv.VideoWriter.isOpened', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.VideoWriter.isOpened []>

--- Incoming ---
['cv.VideoWriter.release', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.VideoWriter.release []>

--- Incoming ---
['cv.VideoWriter.write', 'void', ['/V'], [['Mat', 'image', '', []]], 'void']
ok: FUNC <void cv.VideoWriter.write [ARG Mat image=]>

--- Incoming ---
[   'cv.VideoWriter.set',
    'bool',
    ['/V'],
    [['int', 'propId', '', []], ['double', 'value', '', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.set [ARG int propId=, ARG double value=]>

--- Incoming ---
[   'cv.VideoWriter.get',
    'double',
    ['/C', '/V'],
    [['int', 'propId', '', []]],
    'double']
ok: FUNC <double cv.VideoWriter.get [ARG int propId=]>

--- Incoming ---
[   'cv.VideoWriter.fourcc',
    'int',
    ['/S'],
    [   ['char', 'c1', '', []],
        ['char', 'c2', '', []],
        ['char', 'c3', '', []],
        ['char', 'c4', '', []]],
    'int']
ok: FUNC <int cv.VideoWriter.fourcc [ARG char c1=, ARG char c2=, ARG char c3=, ARG char c4=]>

--- Incoming ---
['cv.VideoWriter.getBackendName', 'String', ['/C'], [], 'String']
ok: FUNC <String cv.VideoWriter.getBackendName []>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/registry.hpp =====
Namespaces: ['', 'cv', 'cv.internal', 'cv.videoio_registry']

--- Incoming ---
[   'cv.videoio_registry.getBackendName',
    'String',
    [],
    [['VideoCaptureAPIs', 'api', '', []]],
    'cv::String']
ok: FUNC <String cv.videoio_registry..getBackendName [ARG VideoCaptureAPIs api=]>

--- Incoming ---
[   'cv.videoio_registry.getBackends',
    'vector_VideoCaptureAPIs',
    [],
    [],
    'std::vector<VideoCaptureAPIs>']
ok: FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getBackends []>

--- Incoming ---
[   'cv.videoio_registry.getCameraBackends',
    'vector_VideoCaptureAPIs',
    [],
    [],
    'std::vector<VideoCaptureAPIs>']
ok: FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getCameraBackends []>

--- Incoming ---
[   'cv.videoio_registry.getStreamBackends',
    'vector_VideoCaptureAPIs',
    [],
    [],
    'std::vector<VideoCaptureAPIs>']
ok: FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getStreamBackends []>

--- Incoming ---
[   'cv.videoio_registry.getWriterBackends',
    'vector_VideoCaptureAPIs',
    [],
    [],
    'std::vector<VideoCaptureAPIs>']
ok: FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getWriterBackends []>

--- Incoming ---
[   'cv.videoio_registry.hasBackend',
    'bool',
    [],
    [['VideoCaptureAPIs', 'api', '', []]],
    'bool']
ok: FUNC <bool cv.videoio_registry..hasBackend [ARG VideoCaptureAPIs api=]>

--- Incoming ---
[   'cv.videoio_registry.isBackendBuiltIn',
    'bool',
    [],
    [['VideoCaptureAPIs', 'api', '', []]],
    'bool']
ok: FUNC <bool cv.videoio_registry..isBackendBuiltIn [ARG VideoCaptureAPIs api=]>

--- Incoming ---
[   'cv.videoio_registry.getCameraBackendPluginVersion',
    'string',
    [],
    [   ['VideoCaptureAPIs', 'api', '', []],
        ['int', 'version_ABI', '', ['/O', '/Ref']],
        ['int', 'version_API', '', ['/O', '/Ref']]],
    'std::string']
ok: FUNC <string cv.videoio_registry..getCameraBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>

--- Incoming ---
[   'cv.videoio_registry.getStreamBackendPluginVersion',
    'string',
    [],
    [   ['VideoCaptureAPIs', 'api', '', []],
        ['int', 'version_ABI', '', ['/O', '/Ref']],
        ['int', 'version_API', '', ['/O', '/Ref']]],
    'std::string']
ok: FUNC <string cv.videoio_registry..getStreamBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>

--- Incoming ---
[   'cv.videoio_registry.getWriterBackendPluginVersion',
    'string',
    [],
    [   ['VideoCaptureAPIs', 'api', '', []],
        ['int', 'version_ABI', '', ['/O', '/Ref']],
        ['int', 'version_API', '', ['/O', '/Ref']]],
    'std::string']
ok: FUNC <string cv.videoio_registry..getWriterBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio.hpp =====
Namespaces: ['', 'cv', 'cv.internal', 'cv.videoio_registry']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/videoio.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/doc/hwaccel.doc.hpp =====
Namespaces: ['', 'cv', 'cv.internal', 'cv.videoio_registry']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/videoio/include/opencv2/videoio/doc/hwaccel.doc.hpp


===== Generating... =====
CLASS cv::.VideoCapture : 
FUNC < cv.VideoCapture.VideoCapture []>
java:  VideoCapture()
FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=CAP_ANY]>
java:  VideoCapture(String filename, int apiPreference)
java:  VideoCapture(String filename)
FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=, ARG vector_int params=]>
java:  VideoCapture(String filename, int apiPreference, MatOfInt params)
FUNC < cv.VideoCapture.VideoCapture [ARG int index=, ARG int apiPreference=CAP_ANY]>
java:  VideoCapture(int index, int apiPreference)
java:  VideoCapture(int index)
FUNC < cv.VideoCapture.VideoCapture [ARG int index=, ARG int apiPreference=, ARG vector_int params=]>
java:  VideoCapture(int index, int apiPreference, MatOfInt params)
FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=CAP_ANY]>
java: boolean open(String filename, int apiPreference)
java: boolean open(String filename)
FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=, ARG vector_int params=]>
java: boolean open(String filename, int apiPreference, MatOfInt params)
FUNC <bool cv.VideoCapture.open [ARG int index=, ARG int apiPreference=CAP_ANY]>
java: boolean open(int index, int apiPreference)
java: boolean open(int index)
FUNC <bool cv.VideoCapture.open [ARG int index=, ARG int apiPreference=, ARG vector_int params=]>
java: boolean open(int index, int apiPreference, MatOfInt params)
FUNC <bool cv.VideoCapture.isOpened []>
java: boolean isOpened()
FUNC <void cv.VideoCapture.release []>
java: void release()
FUNC <bool cv.VideoCapture.grab []>
java: boolean grab()
FUNC <bool cv.VideoCapture.retrieve [ARG Mat image=, ARG int flag=0]>
java: boolean retrieve(Mat image, int flag)
java: boolean retrieve(Mat image)
FUNC <bool cv.VideoCapture.read [ARG Mat image=]>
java: boolean read(Mat image)
FUNC <bool cv.VideoCapture.set [ARG int propId=, ARG double value=]>
java: boolean set(int propId, double value)
FUNC <double cv.VideoCapture.get [ARG int propId=]>
java: double get(int propId)
FUNC <String cv.VideoCapture.getBackendName []>
java: String getBackendName()
FUNC <void cv.VideoCapture.setExceptionMode [ARG bool enable=]>
java: void setExceptionMode(boolean enable)
FUNC <bool cv.VideoCapture.getExceptionMode []>
java: boolean getExceptionMode()
FUNC <bool cv.VideoCapture.waitAny [ARG vector_VideoCapture streams=, ARG vector_int readyIndex=, ARG int64 timeoutNs=0]>
SKIP:static bool cv::VideoCapture::waitAny(vector_VideoCapture streams, vector_int& readyIndex, int64 timeoutNs = 0)	 due to ARG type vector_VideoCapture/I
CLASS cv::.VideoWriter : 
FUNC < cv.VideoWriter.VideoWriter []>
java:  VideoWriter()
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java:  VideoWriter(String filename, int fourcc, double fps, Size frameSize, boolean isColor)
java:  VideoWriter(String filename, int fourcc, double fps, Size frameSize)
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java:  VideoWriter(String filename, int apiPreference, int fourcc, double fps, Size frameSize, boolean isColor)
java:  VideoWriter(String filename, int apiPreference, int fourcc, double fps, Size frameSize)
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>
java:  VideoWriter(String filename, int fourcc, double fps, Size frameSize, MatOfInt params)
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>
java:  VideoWriter(String filename, int apiPreference, int fourcc, double fps, Size frameSize, MatOfInt params)
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java: boolean open(String filename, int fourcc, double fps, Size frameSize, boolean isColor)
java: boolean open(String filename, int fourcc, double fps, Size frameSize)
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java: boolean open(String filename, int apiPreference, int fourcc, double fps, Size frameSize, boolean isColor)
java: boolean open(String filename, int apiPreference, int fourcc, double fps, Size frameSize)
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>
java: boolean open(String filename, int fourcc, double fps, Size frameSize, MatOfInt params)
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG vector_int params=]>
java: boolean open(String filename, int apiPreference, int fourcc, double fps, Size frameSize, MatOfInt params)
FUNC <bool cv.VideoWriter.isOpened []>
java: boolean isOpened()
FUNC <void cv.VideoWriter.release []>
java: void release()
FUNC <void cv.VideoWriter.write [ARG Mat image=]>
java: void write(Mat image)
FUNC <bool cv.VideoWriter.set [ARG int propId=, ARG double value=]>
java: boolean set(int propId, double value)
FUNC <double cv.VideoWriter.get [ARG int propId=]>
java: double get(int propId)
FUNC <int cv.VideoWriter.fourcc [ARG char c1=, ARG char c2=, ARG char c3=, ARG char c4=]>
java: int fourcc(char c1, char c2, char c3, char c4)
FUNC <String cv.VideoWriter.getBackendName []>
java: String getBackendName()
CLASS cv::.Videoio : 
[CONST CAP_PROP_DC1394_OFF=-4, CONST CAP_PROP_DC1394_MODE_MANUAL=-3, CONST CAP_PROP_DC1394_MODE_AUTO=-2, CONST CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1, CONST CAP_PROP_DC1394_MAX=31, CONST CAP_OPENNI_DEPTH_GENERATOR=1 << 31, CONST CAP_OPENNI_IMAGE_GENERATOR=1 << 30, CONST CAP_OPENNI_IR_GENERATOR=1 << 29, CONST CAP_OPENNI_GENERATORS_MASK=CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + CAP_OPENNI_IR_GENERATOR, CONST CAP_PROP_OPENNI_OUTPUT_MODE=100, CONST CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101, CONST CAP_PROP_OPENNI_BASELINE=102, CONST CAP_PROP_OPENNI_FOCAL_LENGTH=103, CONST CAP_PROP_OPENNI_REGISTRATION=104, CONST CAP_PROP_OPENNI_REGISTRATION_ON=CAP_PROP_OPENNI_REGISTRATION, CONST CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105, CONST CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106, CONST CAP_PROP_OPENNI_CIRCLE_BUFFER=107, CONST CAP_PROP_OPENNI_MAX_TIME_DURATION=108, CONST CAP_PROP_OPENNI_GENERATOR_PRESENT=109, CONST CAP_PROP_OPENNI2_SYNC=110, CONST CAP_PROP_OPENNI2_MIRROR=111, CONST CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE, CONST CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE, CONST CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH, CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION, CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION, CONST CAP_OPENNI_IR_GENERATOR_PRESENT=CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_DEPTH_MAP=0, CONST CAP_OPENNI_POINT_CLOUD_MAP=1, CONST CAP_OPENNI_DISPARITY_MAP=2, CONST CAP_OPENNI_DISPARITY_MAP_32F=3, CONST CAP_OPENNI_VALID_DEPTH_MASK=4, CONST CAP_OPENNI_BGR_IMAGE=5, CONST CAP_OPENNI_GRAY_IMAGE=6, CONST CAP_OPENNI_IR_IMAGE=7, CONST CAP_OPENNI_VGA_30HZ=0, CONST CAP_OPENNI_SXGA_15HZ=1, CONST CAP_OPENNI_SXGA_30HZ=2, CONST CAP_OPENNI_QVGA_30HZ=3, CONST CAP_OPENNI_QVGA_60HZ=4, CONST CAP_PROP_GSTREAMER_QUEUE_LENGTH=200, CONST CAP_PROP_PVAPI_MULTICASTIP=300, CONST CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301, CONST CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302, CONST CAP_PROP_PVAPI_DECIMATIONVERTICAL=303, CONST CAP_PROP_PVAPI_BINNINGX=304, CONST CAP_PROP_PVAPI_BINNINGY=305, CONST CAP_PROP_PVAPI_PIXELFORMAT=306, CONST CAP_PVAPI_FSTRIGMODE_FREERUN=0, CONST CAP_PVAPI_FSTRIGMODE_SYNCIN1=1, CONST CAP_PVAPI_FSTRIGMODE_SYNCIN2=2, CONST CAP_PVAPI_FSTRIGMODE_FIXEDRATE=3, CONST CAP_PVAPI_FSTRIGMODE_SOFTWARE=4, CONST CAP_PVAPI_DECIMATION_OFF=1, CONST CAP_PVAPI_DECIMATION_2OUTOF4=2, CONST CAP_PVAPI_DECIMATION_2OUTOF8=4, CONST CAP_PVAPI_DECIMATION_2OUTOF16=8, CONST CAP_PVAPI_PIXELFORMAT_MONO8=1, CONST CAP_PVAPI_PIXELFORMAT_MONO16=2, CONST CAP_PVAPI_PIXELFORMAT_BAYER8=3, CONST CAP_PVAPI_PIXELFORMAT_BAYER16=4, CONST CAP_PVAPI_PIXELFORMAT_RGB24=5, CONST CAP_PVAPI_PIXELFORMAT_BGR24=6, CONST CAP_PVAPI_PIXELFORMAT_RGBA32=7, CONST CAP_PVAPI_PIXELFORMAT_BGRA32=8, CONST CAP_PROP_XI_DOWNSAMPLING=400, CONST CAP_PROP_XI_DATA_FORMAT=401, CONST CAP_PROP_XI_OFFSET_X=402, CONST CAP_PROP_XI_OFFSET_Y=403, CONST CAP_PROP_XI_TRG_SOURCE=404, CONST CAP_PROP_XI_TRG_SOFTWARE=405, CONST CAP_PROP_XI_GPI_SELECTOR=406, CONST CAP_PROP_XI_GPI_MODE=407, CONST CAP_PROP_XI_GPI_LEVEL=408, CONST CAP_PROP_XI_GPO_SELECTOR=409, CONST CAP_PROP_XI_GPO_MODE=410, CONST CAP_PROP_XI_LED_SELECTOR=411, CONST CAP_PROP_XI_LED_MODE=412, CONST CAP_PROP_XI_MANUAL_WB=413, CONST CAP_PROP_XI_AUTO_WB=414, CONST CAP_PROP_XI_AEAG=415, CONST CAP_PROP_XI_EXP_PRIORITY=416, CONST CAP_PROP_XI_AE_MAX_LIMIT=417, CONST CAP_PROP_XI_AG_MAX_LIMIT=418, CONST CAP_PROP_XI_AEAG_LEVEL=419, CONST CAP_PROP_XI_TIMEOUT=420, CONST CAP_PROP_XI_EXPOSURE=421, CONST CAP_PROP_XI_EXPOSURE_BURST_COUNT=422, CONST CAP_PROP_XI_GAIN_SELECTOR=423, CONST CAP_PROP_XI_GAIN=424, CONST CAP_PROP_XI_DOWNSAMPLING_TYPE=426, CONST CAP_PROP_XI_BINNING_SELECTOR=427, CONST CAP_PROP_XI_BINNING_VERTICAL=428, CONST CAP_PROP_XI_BINNING_HORIZONTAL=429, CONST CAP_PROP_XI_BINNING_PATTERN=430, CONST CAP_PROP_XI_DECIMATION_SELECTOR=431, CONST CAP_PROP_XI_DECIMATION_VERTICAL=432, CONST CAP_PROP_XI_DECIMATION_HORIZONTAL=433, CONST CAP_PROP_XI_DECIMATION_PATTERN=434, CONST CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587, CONST CAP_PROP_XI_TEST_PATTERN=588, CONST CAP_PROP_XI_IMAGE_DATA_FORMAT=435, CONST CAP_PROP_XI_SHUTTER_TYPE=436, CONST CAP_PROP_XI_SENSOR_TAPS=437, CONST CAP_PROP_XI_AEAG_ROI_OFFSET_X=439, CONST CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440, CONST CAP_PROP_XI_AEAG_ROI_WIDTH=441, CONST CAP_PROP_XI_AEAG_ROI_HEIGHT=442, CONST CAP_PROP_XI_BPC=445, CONST CAP_PROP_XI_WB_KR=448, CONST CAP_PROP_XI_WB_KG=449, CONST CAP_PROP_XI_WB_KB=450, CONST CAP_PROP_XI_WIDTH=451, CONST CAP_PROP_XI_HEIGHT=452, CONST CAP_PROP_XI_REGION_SELECTOR=589, CONST CAP_PROP_XI_REGION_MODE=595, CONST CAP_PROP_XI_LIMIT_BANDWIDTH=459, CONST CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460, CONST CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461, CONST CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462, CONST CAP_PROP_XI_OUTPUT_DATA_PACKING=463, CONST CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464, CONST CAP_PROP_XI_IS_COOLED=465, CONST CAP_PROP_XI_COOLING=466, CONST CAP_PROP_XI_TARGET_TEMP=467, CONST CAP_PROP_XI_CHIP_TEMP=468, CONST CAP_PROP_XI_HOUS_TEMP=469, CONST CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590, CONST CAP_PROP_XI_SENSOR_BOARD_TEMP=596, CONST CAP_PROP_XI_CMS=470, CONST CAP_PROP_XI_APPLY_CMS=471, CONST CAP_PROP_XI_IMAGE_IS_COLOR=474, CONST CAP_PROP_XI_COLOR_FILTER_ARRAY=475, CONST CAP_PROP_XI_GAMMAY=476, CONST CAP_PROP_XI_GAMMAC=477, CONST CAP_PROP_XI_SHARPNESS=478, CONST CAP_PROP_XI_CC_MATRIX_00=479, CONST CAP_PROP_XI_CC_MATRIX_01=480, CONST CAP_PROP_XI_CC_MATRIX_02=481, CONST CAP_PROP_XI_CC_MATRIX_03=482, CONST CAP_PROP_XI_CC_MATRIX_10=483, CONST CAP_PROP_XI_CC_MATRIX_11=484, CONST CAP_PROP_XI_CC_MATRIX_12=485, CONST CAP_PROP_XI_CC_MATRIX_13=486, CONST CAP_PROP_XI_CC_MATRIX_20=487, CONST CAP_PROP_XI_CC_MATRIX_21=488, CONST CAP_PROP_XI_CC_MATRIX_22=489, CONST CAP_PROP_XI_CC_MATRIX_23=490, CONST CAP_PROP_XI_CC_MATRIX_30=491, CONST CAP_PROP_XI_CC_MATRIX_31=492, CONST CAP_PROP_XI_CC_MATRIX_32=493, CONST CAP_PROP_XI_CC_MATRIX_33=494, CONST CAP_PROP_XI_DEFAULT_CC_MATRIX=495, CONST CAP_PROP_XI_TRG_SELECTOR=498, CONST CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499, CONST CAP_PROP_XI_DEBOUNCE_EN=507, CONST CAP_PROP_XI_DEBOUNCE_T0=508, CONST CAP_PROP_XI_DEBOUNCE_T1=509, CONST CAP_PROP_XI_DEBOUNCE_POL=510, CONST CAP_PROP_XI_LENS_MODE=511, CONST CAP_PROP_XI_LENS_APERTURE_VALUE=512, CONST CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513, CONST CAP_PROP_XI_LENS_FOCUS_MOVE=514, CONST CAP_PROP_XI_LENS_FOCUS_DISTANCE=515, CONST CAP_PROP_XI_LENS_FOCAL_LENGTH=516, CONST CAP_PROP_XI_LENS_FEATURE_SELECTOR=517, CONST CAP_PROP_XI_LENS_FEATURE=518, CONST CAP_PROP_XI_DEVICE_MODEL_ID=521, CONST CAP_PROP_XI_DEVICE_SN=522, CONST CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529, CONST CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530, CONST CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531, CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532, CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533, CONST CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534, CONST CAP_PROP_XI_FRAMERATE=535, CONST CAP_PROP_XI_COUNTER_SELECTOR=536, CONST CAP_PROP_XI_COUNTER_VALUE=537, CONST CAP_PROP_XI_ACQ_TIMING_MODE=538, CONST CAP_PROP_XI_AVAILABLE_BANDWIDTH=539, CONST CAP_PROP_XI_BUFFER_POLICY=540, CONST CAP_PROP_XI_LUT_EN=541, CONST CAP_PROP_XI_LUT_INDEX=542, CONST CAP_PROP_XI_LUT_VALUE=543, CONST CAP_PROP_XI_TRG_DELAY=544, CONST CAP_PROP_XI_TS_RST_MODE=545, CONST CAP_PROP_XI_TS_RST_SOURCE=546, CONST CAP_PROP_XI_IS_DEVICE_EXIST=547, CONST CAP_PROP_XI_ACQ_BUFFER_SIZE=548, CONST CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549, CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550, CONST CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551, CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552, CONST CAP_PROP_XI_RECENT_FRAME=553, CONST CAP_PROP_XI_DEVICE_RESET=554, CONST CAP_PROP_XI_COLUMN_FPN_CORRECTION=555, CONST CAP_PROP_XI_ROW_FPN_CORRECTION=591, CONST CAP_PROP_XI_SENSOR_MODE=558, CONST CAP_PROP_XI_HDR=559, CONST CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560, CONST CAP_PROP_XI_HDR_T1=561, CONST CAP_PROP_XI_HDR_T2=562, CONST CAP_PROP_XI_KNEEPOINT1=563, CONST CAP_PROP_XI_KNEEPOINT2=564, CONST CAP_PROP_XI_IMAGE_BLACK_LEVEL=565, CONST CAP_PROP_XI_HW_REVISION=571, CONST CAP_PROP_XI_DEBUG_LEVEL=572, CONST CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573, CONST CAP_PROP_XI_FFS_FILE_ID=594, CONST CAP_PROP_XI_FFS_FILE_SIZE=580, CONST CAP_PROP_XI_FREE_FFS_SIZE=581, CONST CAP_PROP_XI_USED_FFS_SIZE=582, CONST CAP_PROP_XI_FFS_ACCESS_KEY=583, CONST CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585, CONST CAP_PROP_XI_SENSOR_FEATURE_VALUE=586, CONST CAP_PROP_ARAVIS_AUTOTRIGGER=600, CONST CAP_PROP_IOS_DEVICE_FOCUS=9001, CONST CAP_PROP_IOS_DEVICE_EXPOSURE=9002, CONST CAP_PROP_IOS_DEVICE_FLASH=9003, CONST CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004, CONST CAP_PROP_IOS_DEVICE_TORCH=9005, CONST CAP_PROP_GIGA_FRAME_OFFSET_X=10001, CONST CAP_PROP_GIGA_FRAME_OFFSET_Y=10002, CONST CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003, CONST CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004, CONST CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005, CONST CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006, CONST CAP_PROP_INTELPERC_PROFILE_COUNT=11001, CONST CAP_PROP_INTELPERC_PROFILE_IDX=11002, CONST CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003, CONST CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004, CONST CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005, CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006, CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007, CONST CAP_INTELPERC_DEPTH_GENERATOR=1 << 29, CONST CAP_INTELPERC_IMAGE_GENERATOR=1 << 28, CONST CAP_INTELPERC_IR_GENERATOR=1 << 27, CONST CAP_INTELPERC_GENERATORS_MASK=CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR + CAP_INTELPERC_IR_GENERATOR, CONST CAP_INTELPERC_DEPTH_MAP=0, CONST CAP_INTELPERC_UVDEPTH_MAP=1, CONST CAP_INTELPERC_IR_MAP=2, CONST CAP_INTELPERC_IMAGE=3, CONST CAP_PROP_GPHOTO2_PREVIEW=17001, CONST CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002, CONST CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003, CONST CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004, CONST CAP_PROP_GPHOTO2_COLLECT_MSGS=17005, CONST CAP_PROP_GPHOTO2_FLUSH_MSGS=17006, CONST CAP_PROP_SPEED=17007, CONST CAP_PROP_APERTURE=17008, CONST CAP_PROP_EXPOSUREPROGRAM=17009, CONST CAP_PROP_VIEWFINDER=17010, CONST CAP_PROP_IMAGES_BASE=18000, CONST CAP_PROP_IMAGES_LAST=19000]
[CONST VIDEO_ACCELERATION_NONE=0, CONST VIDEO_ACCELERATION_ANY=1, CONST VIDEO_ACCELERATION_D3D11=2, CONST VIDEO_ACCELERATION_VAAPI=3, CONST VIDEO_ACCELERATION_MFX=4]
[CONST CAP_ANY=0, CONST CAP_VFW=200, CONST CAP_V4L=200, CONST CAP_V4L2=CAP_V4L, CONST CAP_FIREWIRE=300, CONST CAP_FIREWARE=CAP_FIREWIRE, CONST CAP_IEEE1394=CAP_FIREWIRE, CONST CAP_DC1394=CAP_FIREWIRE, CONST CAP_CMU1394=CAP_FIREWIRE, CONST CAP_QT=500, CONST CAP_UNICAP=600, CONST CAP_DSHOW=700, CONST CAP_PVAPI=800, CONST CAP_OPENNI=900, CONST CAP_OPENNI_ASUS=910, CONST CAP_ANDROID=1000, CONST CAP_XIAPI=1100, CONST CAP_AVFOUNDATION=1200, CONST CAP_GIGANETIX=1300, CONST CAP_MSMF=1400, CONST CAP_WINRT=1410, CONST CAP_INTELPERC=1500, CONST CAP_REALSENSE=1500, CONST CAP_OPENNI2=1600, CONST CAP_OPENNI2_ASUS=1610, CONST CAP_OPENNI2_ASTRA=1620, CONST CAP_GPHOTO2=1700, CONST CAP_GSTREAMER=1800, CONST CAP_FFMPEG=1900, CONST CAP_IMAGES=2000, CONST CAP_ARAVIS=2100, CONST CAP_OPENCV_MJPEG=2200, CONST CAP_INTEL_MFX=2300, CONST CAP_XINE=2400, CONST CAP_UEYE=2500, CONST CAP_OBSENSOR=2600]
[CONST CAP_OBSENSOR_DEPTH_MAP=0, CONST CAP_OBSENSOR_BGR_IMAGE=1, CONST CAP_OBSENSOR_IR_IMAGE=2]
[CONST CAP_OBSENSOR_DEPTH_GENERATOR=1 << 29, CONST CAP_OBSENSOR_IMAGE_GENERATOR=1 << 28, CONST CAP_OBSENSOR_IR_GENERATOR=1 << 27, CONST CAP_OBSENSOR_GENERATORS_MASK=CAP_OBSENSOR_DEPTH_GENERATOR + CAP_OBSENSOR_IMAGE_GENERATOR + CAP_OBSENSOR_IR_GENERATOR]
[CONST CAP_PROP_OBSENSOR_INTRINSIC_FX=26001, CONST CAP_PROP_OBSENSOR_INTRINSIC_FY=26002, CONST CAP_PROP_OBSENSOR_INTRINSIC_CX=26003, CONST CAP_PROP_OBSENSOR_INTRINSIC_CY=26004]
[CONST CAP_PROP_POS_MSEC=0, CONST CAP_PROP_POS_FRAMES=1, CONST CAP_PROP_POS_AVI_RATIO=2, CONST CAP_PROP_FRAME_WIDTH=3, CONST CAP_PROP_FRAME_HEIGHT=4, CONST CAP_PROP_FPS=5, CONST CAP_PROP_FOURCC=6, CONST CAP_PROP_FRAME_COUNT=7, CONST CAP_PROP_FORMAT=8, CONST CAP_PROP_MODE=9, CONST CAP_PROP_BRIGHTNESS=10, CONST CAP_PROP_CONTRAST=11, CONST CAP_PROP_SATURATION=12, CONST CAP_PROP_HUE=13, CONST CAP_PROP_GAIN=14, CONST CAP_PROP_EXPOSURE=15, CONST CAP_PROP_CONVERT_RGB=16, CONST CAP_PROP_WHITE_BALANCE_BLUE_U=17, CONST CAP_PROP_RECTIFICATION=18, CONST CAP_PROP_MONOCHROME=19, CONST CAP_PROP_SHARPNESS=20, CONST CAP_PROP_AUTO_EXPOSURE=21, CONST CAP_PROP_GAMMA=22, CONST CAP_PROP_TEMPERATURE=23, CONST CAP_PROP_TRIGGER=24, CONST CAP_PROP_TRIGGER_DELAY=25, CONST CAP_PROP_WHITE_BALANCE_RED_V=26, CONST CAP_PROP_ZOOM=27, CONST CAP_PROP_FOCUS=28, CONST CAP_PROP_GUID=29, CONST CAP_PROP_ISO_SPEED=30, CONST CAP_PROP_BACKLIGHT=32, CONST CAP_PROP_PAN=33, CONST CAP_PROP_TILT=34, CONST CAP_PROP_ROLL=35, CONST CAP_PROP_IRIS=36, CONST CAP_PROP_SETTINGS=37, CONST CAP_PROP_BUFFERSIZE=38, CONST CAP_PROP_AUTOFOCUS=39, CONST CAP_PROP_SAR_NUM=40, CONST CAP_PROP_SAR_DEN=41, CONST CAP_PROP_BACKEND=42, CONST CAP_PROP_CHANNEL=43, CONST CAP_PROP_AUTO_WB=44, CONST CAP_PROP_WB_TEMPERATURE=45, CONST CAP_PROP_CODEC_PIXEL_FORMAT=46, CONST CAP_PROP_BITRATE=47, CONST CAP_PROP_ORIENTATION_META=48, CONST CAP_PROP_ORIENTATION_AUTO=49, CONST CAP_PROP_HW_ACCELERATION=50, CONST CAP_PROP_HW_DEVICE=51, CONST CAP_PROP_HW_ACCELERATION_USE_OPENCL=52, CONST CAP_PROP_OPEN_TIMEOUT_MSEC=53, CONST CAP_PROP_READ_TIMEOUT_MSEC=54, CONST CAP_PROP_STREAM_OPEN_TIME_USEC=55, CONST CAP_PROP_VIDEO_TOTAL_CHANNELS=56, CONST CAP_PROP_VIDEO_STREAM=57, CONST CAP_PROP_AUDIO_STREAM=58, CONST CAP_PROP_AUDIO_POS=59, CONST CAP_PROP_AUDIO_SHIFT_NSEC=60, CONST CAP_PROP_AUDIO_DATA_DEPTH=61, CONST CAP_PROP_AUDIO_SAMPLES_PER_SECOND=62, CONST CAP_PROP_AUDIO_BASE_INDEX=63, CONST CAP_PROP_AUDIO_TOTAL_CHANNELS=64, CONST CAP_PROP_AUDIO_TOTAL_STREAMS=65, CONST CAP_PROP_AUDIO_SYNCHRONIZE=66, CONST CAP_PROP_LRF_HAS_KEY_FRAME=67, CONST CAP_PROP_CODEC_EXTRADATA_INDEX=68, CONST CAP_PROP_FRAME_TYPE=69, CONST CAP_PROP_N_THREADS=70]
[CONST VIDEOWRITER_PROP_QUALITY=1, CONST VIDEOWRITER_PROP_FRAMEBYTES=2, CONST VIDEOWRITER_PROP_NSTRIPES=3, CONST VIDEOWRITER_PROP_IS_COLOR=4, CONST VIDEOWRITER_PROP_DEPTH=5, CONST VIDEOWRITER_PROP_HW_ACCELERATION=6, CONST VIDEOWRITER_PROP_HW_DEVICE=7, CONST VIDEOWRITER_PROP_HW_ACCELERATION_USE_OPENCL=8, CONST VIDEOWRITER_PROP_RAW_VIDEO=9, CONST VIDEOWRITER_PROP_KEY_INTERVAL=10, CONST VIDEOWRITER_PROP_KEY_FLAG=11]
FUNC <String cv.videoio_registry..getBackendName [ARG VideoCaptureAPIs api=]>
java: String getBackendName(int api)
FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getBackends []>
SKIP:vector_VideoCaptureAPIs cv::videoio_registry::getBackends()	 due to RET type vector_VideoCaptureAPIs
FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getCameraBackends []>
SKIP:vector_VideoCaptureAPIs cv::videoio_registry::getCameraBackends()	 due to RET type vector_VideoCaptureAPIs
FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getStreamBackends []>
SKIP:vector_VideoCaptureAPIs cv::videoio_registry::getStreamBackends()	 due to RET type vector_VideoCaptureAPIs
FUNC <vector_VideoCaptureAPIs cv.videoio_registry..getWriterBackends []>
SKIP:vector_VideoCaptureAPIs cv::videoio_registry::getWriterBackends()	 due to RET type vector_VideoCaptureAPIs
FUNC <bool cv.videoio_registry..hasBackend [ARG VideoCaptureAPIs api=]>
java: boolean hasBackend(int api)
FUNC <bool cv.videoio_registry..isBackendBuiltIn [ARG VideoCaptureAPIs api=]>
java: boolean isBackendBuiltIn(int api)
FUNC <string cv.videoio_registry..getCameraBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>
java: String getCameraBackendPluginVersion(int api, int[] version_ABI, int[] version_API)
FUNC <string cv.videoio_registry..getStreamBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>
java: String getStreamBackendPluginVersion(int api, int[] version_ABI, int[] version_API)
FUNC <string cv.videoio_registry..getWriterBackendPluginVersion [ARG VideoCaptureAPIs api=, ARG int version_ABI=, ARG int version_API=]>
java: String getWriterBackendPluginVersion(int api, int[] version_ABI, int[] version_API)

=== MODULE: calib3d (/home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d) ===


Files (3):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d/calib3d_c.h',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Calib3d : , name: Calib3d, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d/calib3d_c.h =====
Namespaces: ['']

--- Incoming ---
[   'enum <unnamed>',
    '',
    [],
    [   ['const CV_ITERATIVE', '0', [], [], None, ''],
        ['const CV_EPNP', '1', [], [], None, ''],
        ['const CV_P3P', '2', [], [], None, ''],
        ['const CV_DLS', '3', [], [], None, '']],
    None]
ok: CONST CV_ITERATIVE=0
ok: CONST CV_EPNP=1
ok: CONST CV_P3P=2
ok: CONST CV_DLS=3

--- Incoming ---
[   'enum CvLevMarq.<unnamed>',
    '',
    [],
    [   ['const CvLevMarq.DONE', '0', [], [], None, ''],
        ['const CvLevMarq.STARTED', '1', [], [], None, ''],
        ['const CvLevMarq.CALC_J', '2', [], [], None, ''],
        ['const CvLevMarq.CHECK_ERR', '3', [], [], None, '']],
    None]
class not found: CONST DONE=0
ok: CONST CvLevMarq_DONE=0
class not found: CONST STARTED=1
ok: CONST CvLevMarq_STARTED=1
class not found: CONST CALC_J=2
ok: CONST CvLevMarq_CALC_J=2
class not found: CONST CHECK_ERR=3
ok: CONST CvLevMarq_CHECK_ERR=3


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d.hpp =====
Namespaces: ['', 'cv', 'cv.fisheye']

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.LMEDS', '4', [], [], None, ''],
        ['const cv.RANSAC', '8', [], [], None, ''],
        ['const cv.RHO', '16', [], [], None, ''],
        ['const cv.USAC_DEFAULT', '32', [], [], None, ''],
        ['const cv.USAC_PARALLEL', '33', [], [], None, ''],
        ['const cv.USAC_FM_8PTS', '34', [], [], None, ''],
        ['const cv.USAC_FAST', '35', [], [], None, ''],
        ['const cv.USAC_ACCURATE', '36', [], [], None, ''],
        ['const cv.USAC_PROSAC', '37', [], [], None, ''],
        ['const cv.USAC_MAGSAC', '38', [], [], None, '']],
    None]
ok: CONST LMEDS=4
ok: CONST RANSAC=8
ok: CONST RHO=16
ok: CONST USAC_DEFAULT=32
ok: CONST USAC_PARALLEL=33
ok: CONST USAC_FM_8PTS=34
ok: CONST USAC_FAST=35
ok: CONST USAC_ACCURATE=36
ok: CONST USAC_PROSAC=37
ok: CONST USAC_MAGSAC=38

--- Incoming ---
[   'enum cv.SolvePnPMethod',
    '',
    [],
    [   ['const cv.SOLVEPNP_ITERATIVE', '0', [], [], None, ''],
        ['const cv.SOLVEPNP_EPNP', '1', [], [], None, ''],
        ['const cv.SOLVEPNP_P3P', '2', [], [], None, ''],
        ['const cv.SOLVEPNP_DLS', '3', [], [], None, ''],
        ['const cv.SOLVEPNP_UPNP', '4', [], [], None, ''],
        ['const cv.SOLVEPNP_AP3P', '5', [], [], None, ''],
        ['const cv.SOLVEPNP_IPPE', '6', [], [], None, ''],
        ['const cv.SOLVEPNP_IPPE_SQUARE', '7', [], [], None, ''],
        ['const cv.SOLVEPNP_SQPNP', '8', [], [], None, ''],
        ['const cv.SOLVEPNP_MAX_COUNT', '8+1', [], [], None, '']],
    None]
ok: CONST SOLVEPNP_ITERATIVE=0
ok: CONST SOLVEPNP_EPNP=1
ok: CONST SOLVEPNP_P3P=2
ok: CONST SOLVEPNP_DLS=3
ok: CONST SOLVEPNP_UPNP=4
ok: CONST SOLVEPNP_AP3P=5
ok: CONST SOLVEPNP_IPPE=6
ok: CONST SOLVEPNP_IPPE_SQUARE=7
ok: CONST SOLVEPNP_SQPNP=8
ok: CONST SOLVEPNP_MAX_COUNT=8+1

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CALIB_CB_ADAPTIVE_THRESH', '1', [], [], None, ''],
        ['const cv.CALIB_CB_NORMALIZE_IMAGE', '2', [], [], None, ''],
        ['const cv.CALIB_CB_FILTER_QUADS', '4', [], [], None, ''],
        ['const cv.CALIB_CB_FAST_CHECK', '8', [], [], None, ''],
        ['const cv.CALIB_CB_EXHAUSTIVE', '16', [], [], None, ''],
        ['const cv.CALIB_CB_ACCURACY', '32', [], [], None, ''],
        ['const cv.CALIB_CB_LARGER', '64', [], [], None, ''],
        ['const cv.CALIB_CB_MARKER', '128', [], [], None, ''],
        ['const cv.CALIB_CB_PLAIN', '256', [], [], None, '']],
    None]
ok: CONST CALIB_CB_ADAPTIVE_THRESH=1
ok: CONST CALIB_CB_NORMALIZE_IMAGE=2
ok: CONST CALIB_CB_FILTER_QUADS=4
ok: CONST CALIB_CB_FAST_CHECK=8
ok: CONST CALIB_CB_EXHAUSTIVE=16
ok: CONST CALIB_CB_ACCURACY=32
ok: CONST CALIB_CB_LARGER=64
ok: CONST CALIB_CB_MARKER=128
ok: CONST CALIB_CB_PLAIN=256

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CALIB_CB_SYMMETRIC_GRID', '1', [], [], None, ''],
        ['const cv.CALIB_CB_ASYMMETRIC_GRID', '2', [], [], None, ''],
        ['const cv.CALIB_CB_CLUSTERING', '4', [], [], None, '']],
    None]
ok: CONST CALIB_CB_SYMMETRIC_GRID=1
ok: CONST CALIB_CB_ASYMMETRIC_GRID=2
ok: CONST CALIB_CB_CLUSTERING=4

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CALIB_NINTRINSIC', '18', [], [], None, ''],
        ['const cv.CALIB_USE_INTRINSIC_GUESS', '0x00001', [], [], None, ''],
        ['const cv.CALIB_FIX_ASPECT_RATIO', '0x00002', [], [], None, ''],
        ['const cv.CALIB_FIX_PRINCIPAL_POINT', '0x00004', [], [], None, ''],
        ['const cv.CALIB_ZERO_TANGENT_DIST', '0x00008', [], [], None, ''],
        ['const cv.CALIB_FIX_FOCAL_LENGTH', '0x00010', [], [], None, ''],
        ['const cv.CALIB_FIX_K1', '0x00020', [], [], None, ''],
        ['const cv.CALIB_FIX_K2', '0x00040', [], [], None, ''],
        ['const cv.CALIB_FIX_K3', '0x00080', [], [], None, ''],
        ['const cv.CALIB_FIX_K4', '0x00800', [], [], None, ''],
        ['const cv.CALIB_FIX_K5', '0x01000', [], [], None, ''],
        ['const cv.CALIB_FIX_K6', '0x02000', [], [], None, ''],
        ['const cv.CALIB_RATIONAL_MODEL', '0x04000', [], [], None, ''],
        ['const cv.CALIB_THIN_PRISM_MODEL', '0x08000', [], [], None, ''],
        ['const cv.CALIB_FIX_S1_S2_S3_S4', '0x10000', [], [], None, ''],
        ['const cv.CALIB_TILTED_MODEL', '0x40000', [], [], None, ''],
        ['const cv.CALIB_FIX_TAUX_TAUY', '0x80000', [], [], None, ''],
        ['const cv.CALIB_USE_QR', '0x100000', [], [], None, ''],
        ['const cv.CALIB_FIX_TANGENT_DIST', '0x200000', [], [], None, ''],
        ['const cv.CALIB_FIX_INTRINSIC', '0x00100', [], [], None, ''],
        ['const cv.CALIB_SAME_FOCAL_LENGTH', '0x00200', [], [], None, ''],
        ['const cv.CALIB_ZERO_DISPARITY', '0x00400', [], [], None, ''],
        ['const cv.CALIB_USE_LU', '(1 << 17)', [], [], None, ''],
        ['const cv.CALIB_USE_EXTRINSIC_GUESS', '(1 << 22)', [], [], None, '']],
    None]
ok: CONST CALIB_NINTRINSIC=18
ok: CONST CALIB_USE_INTRINSIC_GUESS=0x00001
ok: CONST CALIB_FIX_ASPECT_RATIO=0x00002
ok: CONST CALIB_FIX_PRINCIPAL_POINT=0x00004
ok: CONST CALIB_ZERO_TANGENT_DIST=0x00008
ok: CONST CALIB_FIX_FOCAL_LENGTH=0x00010
ok: CONST CALIB_FIX_K1=0x00020
ok: CONST CALIB_FIX_K2=0x00040
ok: CONST CALIB_FIX_K3=0x00080
ok: CONST CALIB_FIX_K4=0x00800
ok: CONST CALIB_FIX_K5=0x01000
ok: CONST CALIB_FIX_K6=0x02000
ok: CONST CALIB_RATIONAL_MODEL=0x04000
ok: CONST CALIB_THIN_PRISM_MODEL=0x08000
ok: CONST CALIB_FIX_S1_S2_S3_S4=0x10000
ok: CONST CALIB_TILTED_MODEL=0x40000
ok: CONST CALIB_FIX_TAUX_TAUY=0x80000
ok: CONST CALIB_USE_QR=0x100000
ok: CONST CALIB_FIX_TANGENT_DIST=0x200000
ok: CONST CALIB_FIX_INTRINSIC=0x00100
ok: CONST CALIB_SAME_FOCAL_LENGTH=0x00200
ok: CONST CALIB_ZERO_DISPARITY=0x00400
ok: CONST CALIB_USE_LU=(1 << 17)
ok: CONST CALIB_USE_EXTRINSIC_GUESS=(1 << 22)

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.FM_7POINT', '1', [], [], None, ''],
        ['const cv.FM_8POINT', '2', [], [], None, ''],
        ['const cv.FM_LMEDS', '4', [], [], None, ''],
        ['const cv.FM_RANSAC', '8', [], [], None, '']],
    None]
ok: CONST FM_7POINT=1
ok: CONST FM_8POINT=2
ok: CONST FM_LMEDS=4
ok: CONST FM_RANSAC=8

--- Incoming ---
[   'enum cv.HandEyeCalibrationMethod',
    '',
    [],
    [   ['const cv.CALIB_HAND_EYE_TSAI', '0', [], [], None, ''],
        ['const cv.CALIB_HAND_EYE_PARK', '1', [], [], None, ''],
        ['const cv.CALIB_HAND_EYE_HORAUD', '2', [], [], None, ''],
        ['const cv.CALIB_HAND_EYE_ANDREFF', '3', [], [], None, ''],
        ['const cv.CALIB_HAND_EYE_DANIILIDIS', '4', [], [], None, '']],
    None]
ok: CONST CALIB_HAND_EYE_TSAI=0
ok: CONST CALIB_HAND_EYE_PARK=1
ok: CONST CALIB_HAND_EYE_HORAUD=2
ok: CONST CALIB_HAND_EYE_ANDREFF=3
ok: CONST CALIB_HAND_EYE_DANIILIDIS=4

--- Incoming ---
[   'enum cv.RobotWorldHandEyeCalibrationMethod',
    '',
    [],
    [   ['const cv.CALIB_ROBOT_WORLD_HAND_EYE_SHAH', '0', [], [], None, ''],
        ['const cv.CALIB_ROBOT_WORLD_HAND_EYE_LI', '1', [], [], None, '']],
    None]
ok: CONST CALIB_ROBOT_WORLD_HAND_EYE_SHAH=0
ok: CONST CALIB_ROBOT_WORLD_HAND_EYE_LI=1

--- Incoming ---
[   'enum cv.SamplingMethod',
    '',
    [],
    [   ['const cv.SAMPLING_UNIFORM', '0', [], [], None, ''],
        ['const cv.SAMPLING_PROGRESSIVE_NAPSAC', '1', [], [], None, ''],
        ['const cv.SAMPLING_NAPSAC', '2', [], [], None, ''],
        ['const cv.SAMPLING_PROSAC', '3', [], [], None, '']],
    None]
ok: CONST SAMPLING_UNIFORM=0
ok: CONST SAMPLING_PROGRESSIVE_NAPSAC=1
ok: CONST SAMPLING_NAPSAC=2
ok: CONST SAMPLING_PROSAC=3

--- Incoming ---
[   'enum cv.LocalOptimMethod',
    '',
    [],
    [   ['const cv.LOCAL_OPTIM_NULL', '0', [], [], None, ''],
        ['const cv.LOCAL_OPTIM_INNER_LO', '1', [], [], None, ''],
        ['const cv.LOCAL_OPTIM_INNER_AND_ITER_LO', '2', [], [], None, ''],
        ['const cv.LOCAL_OPTIM_GC', '3', [], [], None, ''],
        ['const cv.LOCAL_OPTIM_SIGMA', '4', [], [], None, '']],
    None]
ok: CONST LOCAL_OPTIM_NULL=0
ok: CONST LOCAL_OPTIM_INNER_LO=1
ok: CONST LOCAL_OPTIM_INNER_AND_ITER_LO=2
ok: CONST LOCAL_OPTIM_GC=3
ok: CONST LOCAL_OPTIM_SIGMA=4

--- Incoming ---
[   'enum cv.ScoreMethod',
    '',
    [],
    [   ['const cv.SCORE_METHOD_RANSAC', '0', [], [], None, ''],
        ['const cv.SCORE_METHOD_MSAC', '1', [], [], None, ''],
        ['const cv.SCORE_METHOD_MAGSAC', '2', [], [], None, ''],
        ['const cv.SCORE_METHOD_LMEDS', '3', [], [], None, '']],
    None]
ok: CONST SCORE_METHOD_RANSAC=0
ok: CONST SCORE_METHOD_MSAC=1
ok: CONST SCORE_METHOD_MAGSAC=2
ok: CONST SCORE_METHOD_LMEDS=3

--- Incoming ---
[   'enum cv.NeighborSearchMethod',
    '',
    [],
    [   ['const cv.NEIGH_FLANN_KNN', '0', [], [], None, ''],
        ['const cv.NEIGH_GRID', '1', [], [], None, ''],
        ['const cv.NEIGH_FLANN_RADIUS', '2', [], [], None, '']],
    None]
ok: CONST NEIGH_FLANN_KNN=0
ok: CONST NEIGH_GRID=1
ok: CONST NEIGH_FLANN_RADIUS=2

--- Incoming ---
[   'enum cv.PolishingMethod',
    '',
    [],
    [   ['const cv.NONE_POLISHER', '0', [], [], None, ''],
        ['const cv.LSQ_POLISHER', '1', [], [], None, ''],
        ['const cv.MAGSAC', '2', [], [], None, ''],
        ['const cv.COV_POLISHER', '3', [], [], None, '']],
    None]
ok: CONST NONE_POLISHER=0
ok: CONST LSQ_POLISHER=1
ok: CONST MAGSAC=2
ok: CONST COV_POLISHER=3

--- Incoming ---
[   'struct cv.UsacParams',
    '',
    ['/Simple'],
    [   ['double', 'confidence', '', ['/RW']],
        ['bool', 'isParallel', '', ['/RW']],
        ['int', 'loIterations', '', ['/RW']],
        ['LocalOptimMethod', 'loMethod', '', ['/RW']],
        ['int', 'loSampleSize', '', ['/RW']],
        ['int', 'maxIterations', '', ['/RW']],
        ['NeighborSearchMethod', 'neighborsSearch', '', ['/RW']],
        ['int', 'randomGeneratorState', '', ['/RW']],
        ['SamplingMethod', 'sampler', '', ['/RW']],
        ['ScoreMethod', 'score', '', ['/RW']],
        ['double', 'threshold', '', ['/RW']],
        ['PolishingMethod', 'final_polisher', '', ['/RW']],
        ['int', 'final_polisher_iterations', '', ['/RW']]],
    None]
ok: class CLASS cv::.UsacParams : , name: UsacParams, base: 

--- Incoming ---
['cv.UsacParams.UsacParams', '', [], [], None]
ok: FUNC < cv.UsacParams.UsacParams []>

--- Incoming ---
[   'cv.Rodrigues',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'jacobian', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..Rodrigues [ARG Mat src=, ARG Mat dst=, ARG Mat jacobian=Mat()]>

--- Incoming ---
[   'cv.findHomography',
    'Mat',
    [],
    [   ['Mat', 'srcPoints', '', []],
        ['Mat', 'dstPoints', '', []],
        ['int', 'method', '0', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['Mat', 'mask', 'Mat()', ['/O']],
        ['int', 'maxIters', '2000', ['/C']],
        ['double', 'confidence', '0.995', ['/C']]],
    'Mat']
ok: FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG int method=0, ARG double ransacReprojThreshold=3, ARG Mat mask=Mat(), ARG int maxIters=2000, ARG double confidence=0.995]>

--- Incoming ---
[   'cv.findHomography',
    'Mat',
    [],
    [   ['Mat', 'srcPoints', '', []],
        ['Mat', 'dstPoints', '', []],
        ['Mat', 'mask', '', ['/O']],
        ['UsacParams', 'params', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG Mat mask=, ARG UsacParams params=]>

--- Incoming ---
[   'cv.RQDecomp3x3',
    'Vec3d',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mtxR', '', ['/O']],
        ['Mat', 'mtxQ', '', ['/O']],
        ['Mat', 'Qx', 'Mat()', ['/O']],
        ['Mat', 'Qy', 'Mat()', ['/O']],
        ['Mat', 'Qz', 'Mat()', ['/O']]],
    'Vec3d']
ok: FUNC <Vec3d cv..RQDecomp3x3 [ARG Mat src=, ARG Mat mtxR=, ARG Mat mtxQ=, ARG Mat Qx=Mat(), ARG Mat Qy=Mat(), ARG Mat Qz=Mat()]>

--- Incoming ---
[   'cv.decomposeProjectionMatrix',
    'void',
    [],
    [   ['Mat', 'projMatrix', '', []],
        ['Mat', 'cameraMatrix', '', ['/O']],
        ['Mat', 'rotMatrix', '', ['/O']],
        ['Mat', 'transVect', '', ['/O']],
        ['Mat', 'rotMatrixX', 'Mat()', ['/O']],
        ['Mat', 'rotMatrixY', 'Mat()', ['/O']],
        ['Mat', 'rotMatrixZ', 'Mat()', ['/O']],
        ['Mat', 'eulerAngles', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..decomposeProjectionMatrix [ARG Mat projMatrix=, ARG Mat cameraMatrix=, ARG Mat rotMatrix=, ARG Mat transVect=, ARG Mat rotMatrixX=Mat(), ARG Mat rotMatrixY=Mat(), ARG Mat rotMatrixZ=Mat(), ARG Mat eulerAngles=Mat()]>

--- Incoming ---
[   'cv.matMulDeriv',
    'void',
    [],
    [   ['Mat', 'A', '', []],
        ['Mat', 'B', '', []],
        ['Mat', 'dABdA', '', ['/O']],
        ['Mat', 'dABdB', '', ['/O']]],
    'void']
ok: FUNC <void cv..matMulDeriv [ARG Mat A=, ARG Mat B=, ARG Mat dABdA=, ARG Mat dABdB=]>

--- Incoming ---
[   'cv.composeRT',
    'void',
    [],
    [   ['Mat', 'rvec1', '', []],
        ['Mat', 'tvec1', '', []],
        ['Mat', 'rvec2', '', []],
        ['Mat', 'tvec2', '', []],
        ['Mat', 'rvec3', '', ['/O']],
        ['Mat', 'tvec3', '', ['/O']],
        ['Mat', 'dr3dr1', 'Mat()', ['/O']],
        ['Mat', 'dr3dt1', 'Mat()', ['/O']],
        ['Mat', 'dr3dr2', 'Mat()', ['/O']],
        ['Mat', 'dr3dt2', 'Mat()', ['/O']],
        ['Mat', 'dt3dr1', 'Mat()', ['/O']],
        ['Mat', 'dt3dt1', 'Mat()', ['/O']],
        ['Mat', 'dt3dr2', 'Mat()', ['/O']],
        ['Mat', 'dt3dt2', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..composeRT [ARG Mat rvec1=, ARG Mat tvec1=, ARG Mat rvec2=, ARG Mat tvec2=, ARG Mat rvec3=, ARG Mat tvec3=, ARG Mat dr3dr1=Mat(), ARG Mat dr3dt1=Mat(), ARG Mat dr3dr2=Mat(), ARG Mat dr3dt2=Mat(), ARG Mat dt3dr1=Mat(), ARG Mat dt3dt1=Mat(), ARG Mat dt3dr2=Mat(), ARG Mat dt3dt2=Mat()]>

--- Incoming ---
[   'cv.projectPoints',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'rvec', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'imagePoints', '', ['/O']],
        ['Mat', 'jacobian', 'Mat()', ['/O']],
        ['double', 'aspectRatio', '0', []]],
    'void']
ok: FUNC <void cv..projectPoints [ARG vector_Point3f objectPoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG vector_Point2f imagePoints=, ARG Mat jacobian=Mat(), ARG double aspectRatio=0]>

--- Incoming ---
[   'cv.solvePnP',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]],
    'bool']
ok: FUNC <bool cv..solvePnP [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE]>

--- Incoming ---
[   'cv.solvePnPRansac',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['int', 'iterationsCount', '100', []],
        ['float', 'reprojectionError', '8.0', []],
        ['double', 'confidence', '0.99', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]],
    'bool']
ok: FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int iterationsCount=100, ARG float reprojectionError=8.0, ARG double confidence=0.99, ARG Mat inliers=Mat(), ARG int flags=SOLVEPNP_ITERATIVE]>

--- Incoming ---
[   'cv.solvePnPRansac',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['Mat', 'inliers', '', ['/O']],
        ['UsacParams', 'params', 'UsacParams()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat inliers=, ARG UsacParams params=UsacParams()]>

--- Incoming ---
[   'cv.solveP3P',
    'int',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '', []]],
    'int']
ok: FUNC <int cv..solveP3P [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=]>

--- Incoming ---
[   'cv.solvePnPRefineLM',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/IO']],
        ['Mat', 'tvec', '', ['/IO']],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, '
            'FLT_EPSILON)',
            []]],
    'void']
ok: FUNC <void cv..solvePnPRefineLM [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON)]>

--- Incoming ---
[   'cv.solvePnPRefineVVS',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/IO']],
        ['Mat', 'tvec', '', ['/IO']],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, '
            'FLT_EPSILON)',
            []],
        ['double', 'VVSlambda', '1', []]],
    'void']
ok: FUNC <void cv..solvePnPRefineVVS [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON), ARG double VVSlambda=1]>

--- Incoming ---
[   'cv.solvePnPGeneric',
    'int',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['SolvePnPMethod', 'flags', 'SOLVEPNP_ITERATIVE', []],
        ['Mat', 'rvec', 'Mat()', []],
        ['Mat', 'tvec', 'Mat()', []],
        ['Mat', 'reprojectionError', 'Mat()', ['/O']]],
    'int']
ok: FUNC <int cv..solvePnPGeneric [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG bool useExtrinsicGuess=false, ARG SolvePnPMethod flags=SOLVEPNP_ITERATIVE, ARG Mat rvec=Mat(), ARG Mat tvec=Mat(), ARG Mat reprojectionError=Mat()]>

--- Incoming ---
[   'cv.initCameraMatrix2D',
    'Mat',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'aspectRatio', '1.0', []]],
    'Mat']
ok: FUNC <Mat cv..initCameraMatrix2D [ARG vector_vector_Point3f objectPoints=, ARG vector_vector_Point2f imagePoints=, ARG Size imageSize=, ARG double aspectRatio=1.0]>

--- Incoming ---
[   'cv.findChessboardCorners',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', ['/O']],
        [   'int',
            'flags',
            'CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE',
            []]],
    'bool']
ok: FUNC <bool cv..findChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE]>

--- Incoming ---
[   'cv.checkChessboard',
    'bool',
    [],
    [['Mat', 'img', '', []], ['Size', 'size', '', []]],
    'bool']
ok: FUNC <bool cv..checkChessboard [ARG Mat img=, ARG Size size=]>

--- Incoming ---
[   'cv.findChessboardCornersSB',
    'bool',
    ['=findChessboardCornersSBWithMeta'],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'flags', '', []],
        ['Mat', 'meta', '', ['/O']]],
    'bool']
ok: FUNC <bool cv..findChessboardCornersSB [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG int flags=, ARG Mat meta=]>

--- Incoming ---
[   'cv.findChessboardCornersSB',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'flags', '0', []]],
    'bool']
ok: FUNC <bool cv..findChessboardCornersSB [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG int flags=0]>

--- Incoming ---
[   'cv.estimateChessboardSharpness',
    'Scalar',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', []],
        ['float', 'rise_distance', '0.8F', []],
        ['bool', 'vertical', 'false', []],
        ['Mat', 'sharpness', 'Mat()', ['/O']]],
    'Scalar']
ok: FUNC <Scalar cv..estimateChessboardSharpness [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG float rise_distance=0.8F, ARG bool vertical=false, ARG Mat sharpness=Mat()]>

--- Incoming ---
[   'cv.find4QuadCornerSubpix',
    'bool',
    [],
    [   ['Mat', 'img', '', []],
        ['Mat', 'corners', '', ['/IO']],
        ['Size', 'region_size', '', []]],
    'bool']
ok: FUNC <bool cv..find4QuadCornerSubpix [ARG Mat img=, ARG Mat corners=, ARG Size region_size=]>

--- Incoming ---
[   'cv.drawChessboardCorners',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', []],
        ['bool', 'patternWasFound', '', []]],
    'void']
ok: FUNC <void cv..drawChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG bool patternWasFound=]>

--- Incoming ---
[   'cv.drawFrameAxes',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', []],
        ['Mat', 'tvec', '', []],
        ['float', 'length', '', []],
        ['int', 'thickness', '3', []]],
    'void']
ok: FUNC <void cv..drawFrameAxes [ARG Mat image=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG float length=, ARG int thickness=3]>

--- Incoming ---
[   'struct cv.CirclesGridFinderParameters',
    '',
    ['/Simple'],
    [   ['Size2f', 'densityNeighborhoodSize', '', ['/RW']],
        ['float', 'minDensity', '', ['/RW']],
        ['int', 'kmeansAttempts', '', ['/RW']],
        ['int', 'minDistanceToAddKeypoint', '', ['/RW']],
        ['int', 'keypointScale', '', ['/RW']],
        ['float', 'minGraphConfidence', '', ['/RW']],
        ['float', 'vertexGain', '', ['/RW']],
        ['float', 'vertexPenalty', '', ['/RW']],
        ['float', 'existingVertexGain', '', ['/RW']],
        ['float', 'edgeGain', '', ['/RW']],
        ['float', 'edgePenalty', '', ['/RW']],
        ['float', 'convexHullFactor', '', ['/RW']],
        ['float', 'minRNGEdgeSwitchDist', '', ['/RW']],
        ['float', 'squareSize', '', ['/RW']],
        ['float', 'maxRectifiedDistance', '', ['/RW']]],
    None]
ignored: CLASS cv::.CirclesGridFinderParameters : 

--- Incoming ---
['cv.CirclesGridFinderParameters.CirclesGridFinderParameters', '', [], [], None]
ignored: FUNC < cv.CirclesGridFinderParameters.CirclesGridFinderParameters []>

--- Incoming ---
[   'enum cv.CirclesGridFinderParameters.GridType',
    '',
    [],
    [   [   'const cv.CirclesGridFinderParameters.SYMMETRIC_GRID',
            '0',
            [],
            [],
            None,
            ''],
        [   'const cv.CirclesGridFinderParameters.ASYMMETRIC_GRID',
            '1',
            [],
            [],
            None,
            '']],
    None]
class not found: CONST SYMMETRIC_GRID=0
ok: CONST CirclesGridFinderParameters_SYMMETRIC_GRID=0
class not found: CONST ASYMMETRIC_GRID=1
ok: CONST CirclesGridFinderParameters_ASYMMETRIC_GRID=1

--- Incoming ---
[   'cv.findCirclesGrid',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'centers', '', ['/O']],
        ['int', 'flags', '', []],
        ['Ptr_FeatureDetector', 'blobDetector', '', ['/C', '/Ref']],
        ['CirclesGridFinderParameters', 'parameters', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=, ARG Ptr_FeatureDetector blobDetector=, ARG CirclesGridFinderParameters parameters=]>

--- Incoming ---
[   'cv.findCirclesGrid',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'centers', '', ['/O']],
        ['int', 'flags', 'CALIB_CB_SYMMETRIC_GRID', []],
        [   'Ptr_FeatureDetector',
            'blobDetector',
            'SimpleBlobDetector::create()',
            ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=CALIB_CB_SYMMETRIC_GRID, ARG Ptr_FeatureDetector blobDetector=SimpleBlobDetector::create()]>

--- Incoming ---
[   'cv.calibrateCamera',
    'double',
    ['=calibrateCameraExtended'],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['Mat', 'stdDeviationsIntrinsics', '', ['/O']],
        ['Mat', 'stdDeviationsExtrinsics', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrateCamera',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrateCameraRO',
    'double',
    ['=calibrateCameraROExtended'],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['int', 'iFixedPoint', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['Mat', 'newObjPoints', '', ['/O']],
        ['Mat', 'stdDeviationsIntrinsics', '', ['/O']],
        ['Mat', 'stdDeviationsExtrinsics', '', ['/O']],
        ['Mat', 'stdDeviationsObjPoints', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCameraRO [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG int iFixedPoint=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat newObjPoints=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat stdDeviationsObjPoints=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrateCameraRO',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['int', 'iFixedPoint', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['Mat', 'newObjPoints', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCameraRO [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG int iFixedPoint=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat newObjPoints=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrationMatrixValues',
    'void',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'apertureWidth', '', []],
        ['double', 'apertureHeight', '', []],
        ['double', 'fovx', '', ['/O', '/Ref']],
        ['double', 'fovy', '', ['/O', '/Ref']],
        ['double', 'focalLength', '', ['/O', '/Ref']],
        ['Point2d', 'principalPoint', '', ['/O', '/Ref']],
        ['double', 'aspectRatio', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..calibrationMatrixValues [ARG Mat cameraMatrix=, ARG Size imageSize=, ARG double apertureWidth=, ARG double apertureHeight=, ARG double fovx=, ARG double fovy=, ARG double focalLength=, ARG Point2d principalPoint=, ARG double aspectRatio=]>

--- Incoming ---
[   'cv.stereoCalibrate',
    'double',
    ['=stereoCalibrateExtended'],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'cameraMatrix1', '', ['/IO']],
        ['Mat', 'distCoeffs1', '', ['/IO']],
        ['Mat', 'cameraMatrix2', '', ['/IO']],
        ['Mat', 'distCoeffs2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/IO']],
        ['Mat', 'T', '', ['/IO']],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'F', '', ['/O']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', 'CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)',
            []]],
    'double']
ok: FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>

--- Incoming ---
[   'cv.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'cameraMatrix1', '', ['/IO']],
        ['Mat', 'distCoeffs1', '', ['/IO']],
        ['Mat', 'cameraMatrix2', '', ['/IO']],
        ['Mat', 'distCoeffs2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 'T', '', ['/O']],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'F', '', ['/O']],
        ['int', 'flags', 'CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)',
            []]],
    'double']
ok: FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>

--- Incoming ---
[   'cv.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'cameraMatrix1', '', ['/IO']],
        ['Mat', 'distCoeffs1', '', ['/IO']],
        ['Mat', 'cameraMatrix2', '', ['/IO']],
        ['Mat', 'distCoeffs2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/IO']],
        ['Mat', 'T', '', ['/IO']],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'F', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', 'CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)',
            []]],
    'double']
ok: FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>

--- Incoming ---
[   'cv.stereoRectify',
    'void',
    [],
    [   ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'T', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['int', 'flags', 'CALIB_ZERO_DISPARITY', []],
        ['double', 'alpha', '-1', []],
        ['Size', 'newImageSize', 'Size()', []],
        ['Rect*', 'validPixROI1', '0', ['/O']],
        ['Rect*', 'validPixROI2', '0', ['/O']]],
    'void']
ok: FUNC <void cv..stereoRectify [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=CALIB_ZERO_DISPARITY, ARG double alpha=-1, ARG Size newImageSize=Size(), ARG Rect * validPixROI1=0, ARG Rect * validPixROI2=0]>

--- Incoming ---
[   'cv.stereoRectifyUncalibrated',
    'bool',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'F', '', []],
        ['Size', 'imgSize', '', []],
        ['Mat', 'H1', '', ['/O']],
        ['Mat', 'H2', '', ['/O']],
        ['double', 'threshold', '5', []]],
    'bool']
ok: FUNC <bool cv..stereoRectifyUncalibrated [ARG Mat points1=, ARG Mat points2=, ARG Mat F=, ARG Size imgSize=, ARG Mat H1=, ARG Mat H2=, ARG double threshold=5]>

--- Incoming ---
[   'cv.rectify3Collinear',
    'float',
    [],
    [   ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['Mat', 'cameraMatrix3', '', []],
        ['Mat', 'distCoeffs3', '', []],
        ['vector_Mat', 'imgpt1', '', []],
        ['vector_Mat', 'imgpt3', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R12', '', []],
        ['Mat', 'T12', '', []],
        ['Mat', 'R13', '', []],
        ['Mat', 'T13', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'R3', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'P3', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['double', 'alpha', '', []],
        ['Size', 'newImgSize', '', []],
        ['Rect*', 'roi1', '', ['/O']],
        ['Rect*', 'roi2', '', ['/O']],
        ['int', 'flags', '', []]],
    'float']
ok: FUNC <float cv..rectify3Collinear [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat cameraMatrix3=, ARG Mat distCoeffs3=, ARG vector_Mat imgpt1=, ARG vector_Mat imgpt3=, ARG Size imageSize=, ARG Mat R12=, ARG Mat T12=, ARG Mat R13=, ARG Mat T13=, ARG Mat R1=, ARG Mat R2=, ARG Mat R3=, ARG Mat P1=, ARG Mat P2=, ARG Mat P3=, ARG Mat Q=, ARG double alpha=, ARG Size newImgSize=, ARG Rect * roi1=, ARG Rect * roi2=, ARG int flags=]>

--- Incoming ---
[   'cv.getOptimalNewCameraMatrix',
    'Mat',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'alpha', '', []],
        ['Size', 'newImgSize', 'Size()', []],
        ['Rect*', 'validPixROI', '0', ['/O']],
        ['bool', 'centerPrincipalPoint', 'false', []]],
    'Mat']
ok: FUNC <Mat cv..getOptimalNewCameraMatrix [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG double alpha=, ARG Size newImgSize=Size(), ARG Rect * validPixROI=0, ARG bool centerPrincipalPoint=false]>

--- Incoming ---
[   'cv.calibrateHandEye',
    'void',
    [],
    [   ['vector_Mat', 'R_gripper2base', '', []],
        ['vector_Mat', 't_gripper2base', '', []],
        ['vector_Mat', 'R_target2cam', '', []],
        ['vector_Mat', 't_target2cam', '', []],
        ['Mat', 'R_cam2gripper', '', ['/O']],
        ['Mat', 't_cam2gripper', '', ['/O']],
        ['HandEyeCalibrationMethod', 'method', 'CALIB_HAND_EYE_TSAI', []]],
    'void']
ok: FUNC <void cv..calibrateHandEye [ARG vector_Mat R_gripper2base=, ARG vector_Mat t_gripper2base=, ARG vector_Mat R_target2cam=, ARG vector_Mat t_target2cam=, ARG Mat R_cam2gripper=, ARG Mat t_cam2gripper=, ARG HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI]>

--- Incoming ---
[   'cv.calibrateRobotWorldHandEye',
    'void',
    [],
    [   ['vector_Mat', 'R_world2cam', '', []],
        ['vector_Mat', 't_world2cam', '', []],
        ['vector_Mat', 'R_base2gripper', '', []],
        ['vector_Mat', 't_base2gripper', '', []],
        ['Mat', 'R_base2world', '', ['/O']],
        ['Mat', 't_base2world', '', ['/O']],
        ['Mat', 'R_gripper2cam', '', ['/O']],
        ['Mat', 't_gripper2cam', '', ['/O']],
        [   'RobotWorldHandEyeCalibrationMethod',
            'method',
            'CALIB_ROBOT_WORLD_HAND_EYE_SHAH',
            []]],
    'void']
ok: FUNC <void cv..calibrateRobotWorldHandEye [ARG vector_Mat R_world2cam=, ARG vector_Mat t_world2cam=, ARG vector_Mat R_base2gripper=, ARG vector_Mat t_base2gripper=, ARG Mat R_base2world=, ARG Mat t_base2world=, ARG Mat R_gripper2cam=, ARG Mat t_gripper2cam=, ARG RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH]>

--- Incoming ---
[   'cv.convertPointsToHomogeneous',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertPointsToHomogeneous [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.convertPointsFromHomogeneous',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertPointsFromHomogeneous [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.findFundamentalMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['int', 'method', '', []],
        ['double', 'ransacReprojThreshold', '', []],
        ['double', 'confidence', '', []],
        ['int', 'maxIters', '', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=, ARG double ransacReprojThreshold=, ARG double confidence=, ARG int maxIters=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findFundamentalMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['int', 'method', 'FM_RANSAC', []],
        ['double', 'ransacReprojThreshold', '3.', []],
        ['double', 'confidence', '0.99', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=FM_RANSAC, ARG double ransacReprojThreshold=3., ARG double confidence=0.99, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findFundamentalMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'mask', '', ['/O']],
        ['UsacParams', 'params', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG Mat mask=, ARG UsacParams params=]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['int', 'method', 'RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['int', 'maxIters', '1000', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG int maxIters=1000, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['double', 'focal', '1.0', []],
        ['Point2d', 'pp', 'Point2d(0, 0)', []],
        ['int', 'method', 'RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['int', 'maxIters', '1000', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG int maxIters=1000, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['int', 'method', 'RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'dist_coeff1', '', []],
        ['Mat', 'dist_coeff2', '', []],
        ['Mat', 'mask', '', ['/O']],
        ['UsacParams', 'params', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat cameraMatrix2=, ARG Mat dist_coeff1=, ARG Mat dist_coeff2=, ARG Mat mask=, ARG UsacParams params=]>

--- Incoming ---
[   'cv.decomposeEssentialMat',
    'void',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 't', '', ['/O']]],
    'void']
ok: FUNC <void cv..decomposeEssentialMat [ARG Mat E=, ARG Mat R1=, ARG Mat R2=, ARG Mat t=]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['int', 'method', 'cv::RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['Mat', 'mask', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat E=, ARG Mat R=, ARG Mat t=, ARG int method=cv::RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['double', 'focal', '1.0', []],
        ['Point2d', 'pp', 'Point2d(0, 0)', []],
        ['Mat', 'mask', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat R=, ARG Mat t=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['double', 'distanceThresh', '', []],
        ['Mat', 'mask', 'Mat()', ['/IO']],
        ['Mat', 'triangulatedPoints', 'Mat()', ['/O']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG double distanceThresh=, ARG Mat mask=Mat(), ARG Mat triangulatedPoints=Mat()]>

--- Incoming ---
[   'cv.computeCorrespondEpilines',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['int', 'whichImage', '', []],
        ['Mat', 'F', '', []],
        ['Mat', 'lines', '', ['/O']]],
    'void']
ok: FUNC <void cv..computeCorrespondEpilines [ARG Mat points=, ARG int whichImage=, ARG Mat F=, ARG Mat lines=]>

--- Incoming ---
[   'cv.triangulatePoints',
    'void',
    [],
    [   ['Mat', 'projMatr1', '', []],
        ['Mat', 'projMatr2', '', []],
        ['Mat', 'projPoints1', '', []],
        ['Mat', 'projPoints2', '', []],
        ['Mat', 'points4D', '', ['/O']]],
    'void']
ok: FUNC <void cv..triangulatePoints [ARG Mat projMatr1=, ARG Mat projMatr2=, ARG Mat projPoints1=, ARG Mat projPoints2=, ARG Mat points4D=]>

--- Incoming ---
[   'cv.correctMatches',
    'void',
    [],
    [   ['Mat', 'F', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'newPoints1', '', ['/O']],
        ['Mat', 'newPoints2', '', ['/O']]],
    'void']
ok: FUNC <void cv..correctMatches [ARG Mat F=, ARG Mat points1=, ARG Mat points2=, ARG Mat newPoints1=, ARG Mat newPoints2=]>

--- Incoming ---
[   'cv.filterSpeckles',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['double', 'newVal', '', []],
        ['int', 'maxSpeckleSize', '', []],
        ['double', 'maxDiff', '', []],
        ['Mat', 'buf', 'Mat()', ['/IO']]],
    'void']
ok: FUNC <void cv..filterSpeckles [ARG Mat img=, ARG double newVal=, ARG int maxSpeckleSize=, ARG double maxDiff=, ARG Mat buf=Mat()]>

--- Incoming ---
[   'cv.getValidDisparityROI',
    'Rect',
    [],
    [   ['Rect', 'roi1', '', []],
        ['Rect', 'roi2', '', []],
        ['int', 'minDisparity', '', []],
        ['int', 'numberOfDisparities', '', []],
        ['int', 'blockSize', '', []]],
    'Rect']
ok: FUNC <Rect cv..getValidDisparityROI [ARG Rect roi1=, ARG Rect roi2=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int blockSize=]>

--- Incoming ---
[   'cv.validateDisparity',
    'void',
    [],
    [   ['Mat', 'disparity', '', ['/IO']],
        ['Mat', 'cost', '', []],
        ['int', 'minDisparity', '', []],
        ['int', 'numberOfDisparities', '', []],
        ['int', 'disp12MaxDisp', '1', []]],
    'void']
ok: FUNC <void cv..validateDisparity [ARG Mat disparity=, ARG Mat cost=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int disp12MaxDisp=1]>

--- Incoming ---
[   'cv.reprojectImageTo3D',
    'void',
    [],
    [   ['Mat', 'disparity', '', []],
        ['Mat', '_3dImage', '', ['/O']],
        ['Mat', 'Q', '', []],
        ['bool', 'handleMissingValues', 'false', []],
        ['int', 'ddepth', '-1', []]],
    'void']
ok: FUNC <void cv..reprojectImageTo3D [ARG Mat disparity=, ARG Mat _3dImage=, ARG Mat Q=, ARG bool handleMissingValues=false, ARG int ddepth=-1]>

--- Incoming ---
[   'cv.sampsonDistance',
    'double',
    [],
    [['Mat', 'pt1', '', []], ['Mat', 'pt2', '', []], ['Mat', 'F', '', []]],
    'double']
ok: FUNC <double cv..sampsonDistance [ARG Mat pt1=, ARG Mat pt2=, ARG Mat F=]>

--- Incoming ---
[   'cv.estimateAffine3D',
    'int',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['Mat', 'out', '', ['/O']],
        ['Mat', 'inliers', '', ['/O']],
        ['double', 'ransacThreshold', '3', []],
        ['double', 'confidence', '0.99', []]],
    'int']
ok: FUNC <int cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>

--- Incoming ---
[   'cv.estimateAffine3D',
    'Mat',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['double*', 'scale', 'nullptr', ['/O']],
        ['bool', 'force_rotation', 'true', []]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG double * scale=nullptr, ARG bool force_rotation=true]>

--- Incoming ---
[   'cv.estimateTranslation3D',
    'int',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['Mat', 'out', '', ['/O']],
        ['Mat', 'inliers', '', ['/O']],
        ['double', 'ransacThreshold', '3', []],
        ['double', 'confidence', '0.99', []]],
    'int']
ok: FUNC <int cv..estimateTranslation3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>

--- Incoming ---
[   'cv.estimateAffine2D',
    'Mat',
    [],
    [   ['Mat', 'from', '', []],
        ['Mat', 'to', '', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'method', 'RANSAC', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['size_t', 'maxIters', '2000', []],
        ['double', 'confidence', '0.99', []],
        ['size_t', 'refineIters', '10', []]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffine2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>

--- Incoming ---
[   'cv.estimateAffine2D',
    'Mat',
    [],
    [   ['Mat', 'pts1', '', []],
        ['Mat', 'pts2', '', []],
        ['Mat', 'inliers', '', ['/O']],
        ['UsacParams', 'params', '', ['/C', '/Ref']]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffine2D [ARG Mat pts1=, ARG Mat pts2=, ARG Mat inliers=, ARG UsacParams params=]>

--- Incoming ---
[   'cv.estimateAffinePartial2D',
    'Mat',
    [],
    [   ['Mat', 'from', '', []],
        ['Mat', 'to', '', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'method', 'RANSAC', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['size_t', 'maxIters', '2000', []],
        ['double', 'confidence', '0.99', []],
        ['size_t', 'refineIters', '10', []]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffinePartial2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>

--- Incoming ---
[   'cv.decomposeHomographyMat',
    'int',
    [],
    [   ['Mat', 'H', '', []],
        ['Mat', 'K', '', []],
        ['vector_Mat', 'rotations', '', ['/O']],
        ['vector_Mat', 'translations', '', ['/O']],
        ['vector_Mat', 'normals', '', ['/O']]],
    'int']
ok: FUNC <int cv..decomposeHomographyMat [ARG Mat H=, ARG Mat K=, ARG vector_Mat rotations=, ARG vector_Mat translations=, ARG vector_Mat normals=]>

--- Incoming ---
[   'cv.filterHomographyDecompByVisibleRefpoints',
    'void',
    [],
    [   ['vector_Mat', 'rotations', '', []],
        ['vector_Mat', 'normals', '', []],
        ['Mat', 'beforePoints', '', []],
        ['Mat', 'afterPoints', '', []],
        ['Mat', 'possibleSolutions', '', ['/O']],
        ['Mat', 'pointsMask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..filterHomographyDecompByVisibleRefpoints [ARG vector_Mat rotations=, ARG vector_Mat normals=, ARG Mat beforePoints=, ARG Mat afterPoints=, ARG Mat possibleSolutions=, ARG Mat pointsMask=Mat()]>

--- Incoming ---
['class cv.StereoMatcher', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.StereoMatcher : Algorithm, name: StereoMatcher, base: Algorithm

--- Incoming ---
[   'enum cv.StereoMatcher.<unnamed>',
    '',
    [],
    [   ['const cv.StereoMatcher.DISP_SHIFT', '4', [], [], None, ''],
        [   'const cv.StereoMatcher.DISP_SCALE',
            '(1 << DISP_SHIFT)',
            [],
            [],
            None,
            '']],
    None]
ok: CONST DISP_SHIFT=4
ok: CONST DISP_SCALE=(1 << DISP_SHIFT)

--- Incoming ---
[   'cv.StereoMatcher.compute',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'left', '', []],
        ['Mat', 'right', '', []],
        ['Mat', 'disparity', '', ['/O']]],
    'void']
ok: FUNC <void cv.StereoMatcher.compute [ARG Mat left=, ARG Mat right=, ARG Mat disparity=]>

--- Incoming ---
['cv.StereoMatcher.getMinDisparity', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getMinDisparity []>

--- Incoming ---
[   'cv.StereoMatcher.setMinDisparity',
    'void',
    ['/V', '/PV'],
    [['int', 'minDisparity', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setMinDisparity [ARG int minDisparity=]>

--- Incoming ---
['cv.StereoMatcher.getNumDisparities', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getNumDisparities []>

--- Incoming ---
[   'cv.StereoMatcher.setNumDisparities',
    'void',
    ['/V', '/PV'],
    [['int', 'numDisparities', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setNumDisparities [ARG int numDisparities=]>

--- Incoming ---
['cv.StereoMatcher.getBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getBlockSize []>

--- Incoming ---
[   'cv.StereoMatcher.setBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.StereoMatcher.getSpeckleWindowSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getSpeckleWindowSize []>

--- Incoming ---
[   'cv.StereoMatcher.setSpeckleWindowSize',
    'void',
    ['/V', '/PV'],
    [['int', 'speckleWindowSize', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setSpeckleWindowSize [ARG int speckleWindowSize=]>

--- Incoming ---
['cv.StereoMatcher.getSpeckleRange', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getSpeckleRange []>

--- Incoming ---
[   'cv.StereoMatcher.setSpeckleRange',
    'void',
    ['/V', '/PV'],
    [['int', 'speckleRange', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setSpeckleRange [ARG int speckleRange=]>

--- Incoming ---
['cv.StereoMatcher.getDisp12MaxDiff', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getDisp12MaxDiff []>

--- Incoming ---
[   'cv.StereoMatcher.setDisp12MaxDiff',
    'void',
    ['/V', '/PV'],
    [['int', 'disp12MaxDiff', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setDisp12MaxDiff [ARG int disp12MaxDiff=]>

--- Incoming ---
['class cv.StereoBM', ': cv::StereoMatcher', [], [], None]
ok: class CLASS cv::.StereoBM : StereoMatcher, name: StereoBM, base: StereoMatcher

--- Incoming ---
[   'enum cv.StereoBM.<unnamed>',
    '',
    [],
    [   [   'const cv.StereoBM.PREFILTER_NORMALIZED_RESPONSE',
            '0',
            [],
            [],
            None,
            ''],
        ['const cv.StereoBM.PREFILTER_XSOBEL', '1', [], [], None, '']],
    None]
ok: CONST PREFILTER_NORMALIZED_RESPONSE=0
ok: CONST PREFILTER_XSOBEL=1

--- Incoming ---
['cv.StereoBM.getPreFilterType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterType []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterType',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterType', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterType [ARG int preFilterType=]>

--- Incoming ---
['cv.StereoBM.getPreFilterSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterSize []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterSize',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterSize', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterSize [ARG int preFilterSize=]>

--- Incoming ---
['cv.StereoBM.getPreFilterCap', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterCap []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterCap',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterCap', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterCap [ARG int preFilterCap=]>

--- Incoming ---
['cv.StereoBM.getTextureThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getTextureThreshold []>

--- Incoming ---
[   'cv.StereoBM.setTextureThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'textureThreshold', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setTextureThreshold [ARG int textureThreshold=]>

--- Incoming ---
['cv.StereoBM.getUniquenessRatio', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getUniquenessRatio []>

--- Incoming ---
[   'cv.StereoBM.setUniquenessRatio',
    'void',
    ['/V', '/PV'],
    [['int', 'uniquenessRatio', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setUniquenessRatio [ARG int uniquenessRatio=]>

--- Incoming ---
['cv.StereoBM.getSmallerBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getSmallerBlockSize []>

--- Incoming ---
[   'cv.StereoBM.setSmallerBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setSmallerBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.StereoBM.getROI1', 'Rect', ['/C', '/V', '/PV'], [], 'Rect']
ok: FUNC <Rect cv.StereoBM.getROI1 []>

--- Incoming ---
[   'cv.StereoBM.setROI1',
    'void',
    ['/V', '/PV'],
    [['Rect', 'roi1', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setROI1 [ARG Rect roi1=]>

--- Incoming ---
['cv.StereoBM.getROI2', 'Rect', ['/C', '/V', '/PV'], [], 'Rect']
ok: FUNC <Rect cv.StereoBM.getROI2 []>

--- Incoming ---
[   'cv.StereoBM.setROI2',
    'void',
    ['/V', '/PV'],
    [['Rect', 'roi2', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setROI2 [ARG Rect roi2=]>

--- Incoming ---
[   'cv.StereoBM.create',
    'Ptr_StereoBM',
    ['/S'],
    [['int', 'numDisparities', '0', []], ['int', 'blockSize', '21', []]],
    'Ptr<StereoBM>']
ok: FUNC <Ptr_StereoBM cv.StereoBM.create [ARG int numDisparities=0, ARG int blockSize=21]>

--- Incoming ---
['class cv.StereoSGBM', ': cv::StereoMatcher', [], [], None]
ok: class CLASS cv::.StereoSGBM : StereoMatcher, name: StereoSGBM, base: StereoMatcher

--- Incoming ---
[   'enum cv.StereoSGBM.<unnamed>',
    '',
    [],
    [   ['const cv.StereoSGBM.MODE_SGBM', '0', [], [], None, ''],
        ['const cv.StereoSGBM.MODE_HH', '1', [], [], None, ''],
        ['const cv.StereoSGBM.MODE_SGBM_3WAY', '2', [], [], None, ''],
        ['const cv.StereoSGBM.MODE_HH4', '3', [], [], None, '']],
    None]
ok: CONST MODE_SGBM=0
ok: CONST MODE_HH=1
ok: CONST MODE_SGBM_3WAY=2
ok: CONST MODE_HH4=3

--- Incoming ---
['cv.StereoSGBM.getPreFilterCap', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getPreFilterCap []>

--- Incoming ---
[   'cv.StereoSGBM.setPreFilterCap',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterCap', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setPreFilterCap [ARG int preFilterCap=]>

--- Incoming ---
['cv.StereoSGBM.getUniquenessRatio', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getUniquenessRatio []>

--- Incoming ---
[   'cv.StereoSGBM.setUniquenessRatio',
    'void',
    ['/V', '/PV'],
    [['int', 'uniquenessRatio', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setUniquenessRatio [ARG int uniquenessRatio=]>

--- Incoming ---
['cv.StereoSGBM.getP1', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getP1 []>

--- Incoming ---
['cv.StereoSGBM.setP1', 'void', ['/V', '/PV'], [['int', 'P1', '', []]], 'void']
ok: FUNC <void cv.StereoSGBM.setP1 [ARG int P1=]>

--- Incoming ---
['cv.StereoSGBM.getP2', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getP2 []>

--- Incoming ---
['cv.StereoSGBM.setP2', 'void', ['/V', '/PV'], [['int', 'P2', '', []]], 'void']
ok: FUNC <void cv.StereoSGBM.setP2 [ARG int P2=]>

--- Incoming ---
['cv.StereoSGBM.getMode', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getMode []>

--- Incoming ---
[   'cv.StereoSGBM.setMode',
    'void',
    ['/V', '/PV'],
    [['int', 'mode', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setMode [ARG int mode=]>

--- Incoming ---
[   'cv.StereoSGBM.create',
    'Ptr_StereoSGBM',
    ['/S'],
    [   ['int', 'minDisparity', '0', []],
        ['int', 'numDisparities', '16', []],
        ['int', 'blockSize', '3', []],
        ['int', 'P1', '0', []],
        ['int', 'P2', '0', []],
        ['int', 'disp12MaxDiff', '0', []],
        ['int', 'preFilterCap', '0', []],
        ['int', 'uniquenessRatio', '0', []],
        ['int', 'speckleWindowSize', '0', []],
        ['int', 'speckleRange', '0', []],
        ['int', 'mode', 'StereoSGBM::MODE_SGBM', []]],
    'Ptr<StereoSGBM>']
ok: FUNC <Ptr_StereoSGBM cv.StereoSGBM.create [ARG int minDisparity=0, ARG int numDisparities=16, ARG int blockSize=3, ARG int P1=0, ARG int P2=0, ARG int disp12MaxDiff=0, ARG int preFilterCap=0, ARG int uniquenessRatio=0, ARG int speckleWindowSize=0, ARG int speckleRange=0, ARG int mode=StereoSGBM::MODE_SGBM]>

--- Incoming ---
[   'enum cv.UndistortTypes',
    '',
    [],
    [   ['const cv.PROJ_SPHERICAL_ORTHO', '0', [], [], None, ''],
        ['const cv.PROJ_SPHERICAL_EQRECT', '1', [], [], None, '']],
    None]
ok: CONST PROJ_SPHERICAL_ORTHO=0
ok: CONST PROJ_SPHERICAL_EQRECT=1

--- Incoming ---
[   'cv.undistort',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'newCameraMatrix', 'Mat()', []]],
    'void']
ok: FUNC <void cv..undistort [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat newCameraMatrix=Mat()]>

--- Incoming ---
[   'cv.initUndistortRectifyMap',
    'void',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'newCameraMatrix', '', []],
        ['Size', 'size', '', []],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']]],
    'void']
ok: FUNC <void cv..initUndistortRectifyMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>

--- Incoming ---
[   'cv.initInverseRectificationMap',
    'void',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'newCameraMatrix', '', []],
        ['Size', 'size', '', ['/C', '/Ref']],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']]],
    'void']
ok: FUNC <void cv..initInverseRectificationMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>

--- Incoming ---
[   'cv.getDefaultNewCameraMatrix',
    'Mat',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Size', 'imgsize', 'Size()', []],
        ['bool', 'centerPrincipalPoint', 'false', []]],
    'Mat']
ok: FUNC <Mat cv..getDefaultNewCameraMatrix [ARG Mat cameraMatrix=, ARG Size imgsize=Size(), ARG bool centerPrincipalPoint=false]>

--- Incoming ---
[   'cv.undistortPoints',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', 'Mat()', []],
        ['Mat', 'P', 'Mat()', []]],
    'void']
ok: FUNC <void cv..undistortPoints [ARG vector_Point2f src=, ARG vector_Point2f dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=Mat(), ARG Mat P=Mat()]>

--- Incoming ---
[   'cv.undistortPoints',
    'void',
    ['=undistortPointsIter'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', []],
        ['TermCriteria', 'criteria', '', []]],
    'void']
ok: FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat P=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.undistortImagePoints',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        [   'TermCriteria',
            'arg1',
            'TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01)',
            []]],
    'void']
ok: FUNC <void cv..undistortImagePoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01)]>

--- Incoming ---
[   'enum cv.fisheye.<unnamed>',
    '',
    [],
    [   [   'const cv.fisheye.CALIB_USE_INTRINSIC_GUESS',
            '1 << 0',
            [],
            [],
            None,
            ''],
        [   'const cv.fisheye.CALIB_RECOMPUTE_EXTRINSIC',
            '1 << 1',
            [],
            [],
            None,
            ''],
        ['const cv.fisheye.CALIB_CHECK_COND', '1 << 2', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_SKEW', '1 << 3', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_K1', '1 << 4', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_K2', '1 << 5', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_K3', '1 << 6', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_K4', '1 << 7', [], [], None, ''],
        ['const cv.fisheye.CALIB_FIX_INTRINSIC', '1 << 8', [], [], None, ''],
        [   'const cv.fisheye.CALIB_FIX_PRINCIPAL_POINT',
            '1 << 9',
            [],
            [],
            None,
            ''],
        ['const cv.fisheye.CALIB_ZERO_DISPARITY', '1 << 10', [], [], None, ''],
        [   'const cv.fisheye.CALIB_FIX_FOCAL_LENGTH',
            '1 << 11',
            [],
            [],
            None,
            '']],
    None]
ok: CONST fisheye_CALIB_USE_INTRINSIC_GUESS=1 << 0
ok: CONST fisheye_CALIB_RECOMPUTE_EXTRINSIC=1 << 1
ok: CONST fisheye_CALIB_CHECK_COND=1 << 2
ok: CONST fisheye_CALIB_FIX_SKEW=1 << 3
ok: CONST fisheye_CALIB_FIX_K1=1 << 4
ok: CONST fisheye_CALIB_FIX_K2=1 << 5
ok: CONST fisheye_CALIB_FIX_K3=1 << 6
ok: CONST fisheye_CALIB_FIX_K4=1 << 7
ok: CONST fisheye_CALIB_FIX_INTRINSIC=1 << 8
ok: CONST fisheye_CALIB_FIX_PRINCIPAL_POINT=1 << 9
ok: CONST fisheye_CALIB_ZERO_DISPARITY=1 << 10
ok: CONST fisheye_CALIB_FIX_FOCAL_LENGTH=1 << 11

--- Incoming ---
[   'cv.fisheye.projectPoints',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', ['/O']],
        ['Mat', 'rvec', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['double', 'alpha', '0', []],
        ['Mat', 'jacobian', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.fisheye..projectPoints [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat K=, ARG Mat D=, ARG double alpha=0, ARG Mat jacobian=Mat()]>

--- Incoming ---
[   'cv.fisheye.distortPoints',
    'void',
    [],
    [   ['Mat', 'undistorted', '', []],
        ['Mat', 'distorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['double', 'alpha', '0', []]],
    'void']
ok: FUNC <void cv.fisheye..distortPoints [ARG Mat undistorted=, ARG Mat distorted=, ARG Mat K=, ARG Mat D=, ARG double alpha=0]>

--- Incoming ---
[   'cv.fisheye.undistortPoints',
    'void',
    [],
    [   ['Mat', 'distorted', '', []],
        ['Mat', 'undistorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'R', 'Mat()', []],
        ['Mat', 'P', 'Mat()', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, '
            '1e-8)',
            []]],
    'void']
ok: FUNC <void cv.fisheye..undistortPoints [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat R=Mat(), ARG Mat P=Mat(), ARG TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8)]>

--- Incoming ---
[   'cv.fisheye.initUndistortRectifyMap',
    'void',
    [],
    [   ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', []],
        ['Size', 'size', '', ['/C', '/Ref']],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']]],
    'void']
ok: FUNC <void cv.fisheye..initUndistortRectifyMap [ARG Mat K=, ARG Mat D=, ARG Mat R=, ARG Mat P=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>

--- Incoming ---
[   'cv.fisheye.undistortImage',
    'void',
    [],
    [   ['Mat', 'distorted', '', []],
        ['Mat', 'undistorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'Knew', 'cv::Mat()', []],
        ['Size', 'new_size', 'Size()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.fisheye..undistortImage [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat Knew=cv::Mat(), ARG Size new_size=Size()]>

--- Incoming ---
[   'cv.fisheye.estimateNewCameraMatrixForUndistortRectify',
    'void',
    [],
    [   ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Size', 'image_size', '', ['/C', '/Ref']],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', ['/O']],
        ['double', 'balance', '0.0', []],
        ['Size', 'new_size', 'Size()', ['/C', '/Ref']],
        ['double', 'fov_scale', '1.0', []]],
    'void']
ok: FUNC <void cv.fisheye..estimateNewCameraMatrixForUndistortRectify [ARG Mat K=, ARG Mat D=, ARG Size image_size=, ARG Mat R=, ARG Mat P=, ARG double balance=0.0, ARG Size new_size=Size(), ARG double fov_scale=1.0]>

--- Incoming ---
[   'cv.fisheye.calibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'image_size', '', ['/C', '/Ref']],
        ['Mat', 'K', '', ['/IO']],
        ['Mat', 'D', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv.fisheye..calibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size image_size=, ARG Mat K=, ARG Mat D=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>

--- Incoming ---
[   'cv.fisheye.stereoRectify',
    'void',
    [],
    [   ['Mat', 'K1', '', []],
        ['Mat', 'D1', '', []],
        ['Mat', 'K2', '', []],
        ['Mat', 'D2', '', []],
        ['Size', 'imageSize', '', ['/C', '/Ref']],
        ['Mat', 'R', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['int', 'flags', '', []],
        ['Size', 'newImageSize', 'Size()', ['/C', '/Ref']],
        ['double', 'balance', '0.0', []],
        ['double', 'fov_scale', '1.0', []]],
    'void']
ok: FUNC <void cv.fisheye..stereoRectify [ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat tvec=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=, ARG Size newImageSize=Size(), ARG double balance=0.0, ARG double fov_scale=1.0]>

--- Incoming ---
[   'cv.fisheye.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'K1', '', ['/IO']],
        ['Mat', 'D1', '', ['/IO']],
        ['Mat', 'K2', '', ['/IO']],
        ['Mat', 'D2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 'T', '', ['/O']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', 'fisheye::CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>

--- Incoming ---
[   'cv.fisheye.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'K1', '', ['/IO']],
        ['Mat', 'D1', '', ['/IO']],
        ['Mat', 'K2', '', ['/IO']],
        ['Mat', 'D2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 'T', '', ['/O']],
        ['int', 'flags', 'fisheye::CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>

--- Incoming ---
[   'cv.fisheye.solvePnP',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['int', 'flags', 'SOLVEPNP_ITERATIVE', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, '
            '1e-8)',
            []]],
    'bool']
ok: FUNC <bool cv.fisheye..solvePnP [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE, ARG TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8)]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp =====
Namespaces: ['', 'cv', 'cv.fisheye']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/calib3d/include/opencv2/calib3d/calib3d.hpp


===== Generating... =====
CLASS cv::.Calib3d : 
[CONST CV_ITERATIVE=0, CONST CV_EPNP=1, CONST CV_P3P=2, CONST CV_DLS=3, CONST CvLevMarq_DONE=0, CONST CvLevMarq_STARTED=1, CONST CvLevMarq_CALC_J=2, CONST CvLevMarq_CHECK_ERR=3, CONST LMEDS=4, CONST RANSAC=8, CONST RHO=16, CONST USAC_DEFAULT=32, CONST USAC_PARALLEL=33, CONST USAC_FM_8PTS=34, CONST USAC_FAST=35, CONST USAC_ACCURATE=36, CONST USAC_PROSAC=37, CONST USAC_MAGSAC=38, CONST CALIB_CB_ADAPTIVE_THRESH=1, CONST CALIB_CB_NORMALIZE_IMAGE=2, CONST CALIB_CB_FILTER_QUADS=4, CONST CALIB_CB_FAST_CHECK=8, CONST CALIB_CB_EXHAUSTIVE=16, CONST CALIB_CB_ACCURACY=32, CONST CALIB_CB_LARGER=64, CONST CALIB_CB_MARKER=128, CONST CALIB_CB_PLAIN=256, CONST CALIB_CB_SYMMETRIC_GRID=1, CONST CALIB_CB_ASYMMETRIC_GRID=2, CONST CALIB_CB_CLUSTERING=4, CONST CALIB_NINTRINSIC=18, CONST CALIB_USE_INTRINSIC_GUESS=0x00001, CONST CALIB_FIX_ASPECT_RATIO=0x00002, CONST CALIB_FIX_PRINCIPAL_POINT=0x00004, CONST CALIB_ZERO_TANGENT_DIST=0x00008, CONST CALIB_FIX_FOCAL_LENGTH=0x00010, CONST CALIB_FIX_K1=0x00020, CONST CALIB_FIX_K2=0x00040, CONST CALIB_FIX_K3=0x00080, CONST CALIB_FIX_K4=0x00800, CONST CALIB_FIX_K5=0x01000, CONST CALIB_FIX_K6=0x02000, CONST CALIB_RATIONAL_MODEL=0x04000, CONST CALIB_THIN_PRISM_MODEL=0x08000, CONST CALIB_FIX_S1_S2_S3_S4=0x10000, CONST CALIB_TILTED_MODEL=0x40000, CONST CALIB_FIX_TAUX_TAUY=0x80000, CONST CALIB_USE_QR=0x100000, CONST CALIB_FIX_TANGENT_DIST=0x200000, CONST CALIB_FIX_INTRINSIC=0x00100, CONST CALIB_SAME_FOCAL_LENGTH=0x00200, CONST CALIB_ZERO_DISPARITY=0x00400, CONST CALIB_USE_LU=(1 << 17), CONST CALIB_USE_EXTRINSIC_GUESS=(1 << 22), CONST FM_7POINT=1, CONST FM_8POINT=2, CONST FM_LMEDS=4, CONST FM_RANSAC=8, CONST fisheye_CALIB_USE_INTRINSIC_GUESS=1 << 0, CONST fisheye_CALIB_RECOMPUTE_EXTRINSIC=1 << 1, CONST fisheye_CALIB_CHECK_COND=1 << 2, CONST fisheye_CALIB_FIX_SKEW=1 << 3, CONST fisheye_CALIB_FIX_K1=1 << 4, CONST fisheye_CALIB_FIX_K2=1 << 5, CONST fisheye_CALIB_FIX_K3=1 << 6, CONST fisheye_CALIB_FIX_K4=1 << 7, CONST fisheye_CALIB_FIX_INTRINSIC=1 << 8, CONST fisheye_CALIB_FIX_PRINCIPAL_POINT=1 << 9, CONST fisheye_CALIB_ZERO_DISPARITY=1 << 10, CONST fisheye_CALIB_FIX_FOCAL_LENGTH=1 << 11]
[CONST CirclesGridFinderParameters_SYMMETRIC_GRID=0, CONST CirclesGridFinderParameters_ASYMMETRIC_GRID=1]
[CONST CALIB_HAND_EYE_TSAI=0, CONST CALIB_HAND_EYE_PARK=1, CONST CALIB_HAND_EYE_HORAUD=2, CONST CALIB_HAND_EYE_ANDREFF=3, CONST CALIB_HAND_EYE_DANIILIDIS=4]
[CONST LOCAL_OPTIM_NULL=0, CONST LOCAL_OPTIM_INNER_LO=1, CONST LOCAL_OPTIM_INNER_AND_ITER_LO=2, CONST LOCAL_OPTIM_GC=3, CONST LOCAL_OPTIM_SIGMA=4]
[CONST NEIGH_FLANN_KNN=0, CONST NEIGH_GRID=1, CONST NEIGH_FLANN_RADIUS=2]
[CONST NONE_POLISHER=0, CONST LSQ_POLISHER=1, CONST MAGSAC=2, CONST COV_POLISHER=3]
[CONST CALIB_ROBOT_WORLD_HAND_EYE_SHAH=0, CONST CALIB_ROBOT_WORLD_HAND_EYE_LI=1]
[CONST SAMPLING_UNIFORM=0, CONST SAMPLING_PROGRESSIVE_NAPSAC=1, CONST SAMPLING_NAPSAC=2, CONST SAMPLING_PROSAC=3]
[CONST SCORE_METHOD_RANSAC=0, CONST SCORE_METHOD_MSAC=1, CONST SCORE_METHOD_MAGSAC=2, CONST SCORE_METHOD_LMEDS=3]
[CONST SOLVEPNP_ITERATIVE=0, CONST SOLVEPNP_EPNP=1, CONST SOLVEPNP_P3P=2, CONST SOLVEPNP_DLS=3, CONST SOLVEPNP_UPNP=4, CONST SOLVEPNP_AP3P=5, CONST SOLVEPNP_IPPE=6, CONST SOLVEPNP_IPPE_SQUARE=7, CONST SOLVEPNP_SQPNP=8, CONST SOLVEPNP_MAX_COUNT=8+1]
[CONST PROJ_SPHERICAL_ORTHO=0, CONST PROJ_SPHERICAL_EQRECT=1]
FUNC <void cv..Rodrigues [ARG Mat src=, ARG Mat dst=, ARG Mat jacobian=Mat()]>
java: void Rodrigues(Mat src, Mat dst, Mat jacobian)
java: void Rodrigues(Mat src, Mat dst)
FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG int method=0, ARG double ransacReprojThreshold=3, ARG Mat mask=Mat(), ARG int maxIters=2000, ARG double confidence=0.995]>
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask, int maxIters, double confidence)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask, int maxIters)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints)
FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG Mat mask=, ARG UsacParams params=]>
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, Mat mask, UsacParams params)
FUNC <Vec3d cv..RQDecomp3x3 [ARG Mat src=, ARG Mat mtxR=, ARG Mat mtxQ=, ARG Mat Qx=Mat(), ARG Mat Qy=Mat(), ARG Mat Qz=Mat()]>
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx, Mat Qy, Mat Qz)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx, Mat Qy)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ)
FUNC <void cv..decomposeProjectionMatrix [ARG Mat projMatrix=, ARG Mat cameraMatrix=, ARG Mat rotMatrix=, ARG Mat transVect=, ARG Mat rotMatrixX=Mat(), ARG Mat rotMatrixY=Mat(), ARG Mat rotMatrixZ=Mat(), ARG Mat eulerAngles=Mat()]>
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY, Mat rotMatrixZ, Mat eulerAngles)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY, Mat rotMatrixZ)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect)
FUNC <void cv..matMulDeriv [ARG Mat A=, ARG Mat B=, ARG Mat dABdA=, ARG Mat dABdB=]>
java: void matMulDeriv(Mat A, Mat B, Mat dABdA, Mat dABdB)
FUNC <void cv..composeRT [ARG Mat rvec1=, ARG Mat tvec1=, ARG Mat rvec2=, ARG Mat tvec2=, ARG Mat rvec3=, ARG Mat tvec3=, ARG Mat dr3dr1=Mat(), ARG Mat dr3dt1=Mat(), ARG Mat dr3dr2=Mat(), ARG Mat dr3dt2=Mat(), ARG Mat dt3dr1=Mat(), ARG Mat dt3dt1=Mat(), ARG Mat dt3dr2=Mat(), ARG Mat dt3dt2=Mat()]>
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1, Mat dt3dr2, Mat dt3dt2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1, Mat dt3dr2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3)
FUNC <void cv..projectPoints [ARG vector_Point3f objectPoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG vector_Point2f imagePoints=, ARG Mat jacobian=Mat(), ARG double aspectRatio=0]>
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints, Mat jacobian, double aspectRatio)
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints, Mat jacobian)
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints)
FUNC <bool cv..solvePnP [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE]>
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int flags)
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess)
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec)
FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int iterationsCount=100, ARG float reprojectionError=8.0, ARG double confidence=0.99, ARG Mat inliers=Mat(), ARG int flags=SOLVEPNP_ITERATIVE]>
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, Mat inliers, int flags)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, Mat inliers)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec)
FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat inliers=, ARG UsacParams params=UsacParams()]>
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, Mat inliers, UsacParams params)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, Mat inliers)
FUNC <int cv..solveP3P [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=]>
java: int solveP3P(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags)
FUNC <void cv..solvePnPRefineLM [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON)]>
java: void solvePnPRefineLM(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, TermCriteria criteria)
java: void solvePnPRefineLM(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec)
FUNC <void cv..solvePnPRefineVVS [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG TermCriteria criteria=TermCriteria(TermCriteria::EPS + TermCriteria::COUNT, 20, FLT_EPSILON), ARG double VVSlambda=1]>
java: void solvePnPRefineVVS(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, TermCriteria criteria, double VVSlambda)
java: void solvePnPRefineVVS(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, TermCriteria criteria)
java: void solvePnPRefineVVS(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec)
FUNC <int cv..solvePnPGeneric [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG bool useExtrinsicGuess=false, ARG SolvePnPMethod flags=SOLVEPNP_ITERATIVE, ARG Mat rvec=Mat(), ARG Mat tvec=Mat(), ARG Mat reprojectionError=Mat()]>
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, boolean useExtrinsicGuess, int flags, Mat rvec, Mat tvec, Mat reprojectionError)
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, boolean useExtrinsicGuess, int flags, Mat rvec, Mat tvec)
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, boolean useExtrinsicGuess, int flags, Mat rvec)
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, boolean useExtrinsicGuess, int flags)
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, boolean useExtrinsicGuess)
java: int solvePnPGeneric(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs)
FUNC <Mat cv..initCameraMatrix2D [ARG vector_vector_Point3f objectPoints=, ARG vector_vector_Point2f imagePoints=, ARG Size imageSize=, ARG double aspectRatio=1.0]>
java: Mat initCameraMatrix2D(List<MatOfPoint3f> objectPoints, List<MatOfPoint2f> imagePoints, Size imageSize, double aspectRatio)
java: Mat initCameraMatrix2D(List<MatOfPoint3f> objectPoints, List<MatOfPoint2f> imagePoints, Size imageSize)
FUNC <bool cv..findChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE]>
java: boolean findChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners, int flags)
java: boolean findChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners)
FUNC <bool cv..checkChessboard [ARG Mat img=, ARG Size size=]>
java: boolean checkChessboard(Mat img, Size size)
FUNC <bool cv..findChessboardCornersSB [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG int flags=, ARG Mat meta=]>
java: boolean findChessboardCornersSBWithMeta(Mat image, Size patternSize, Mat corners, int flags, Mat meta)
FUNC <bool cv..findChessboardCornersSB [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG int flags=0]>
java: boolean findChessboardCornersSB(Mat image, Size patternSize, Mat corners, int flags)
java: boolean findChessboardCornersSB(Mat image, Size patternSize, Mat corners)
FUNC <Scalar cv..estimateChessboardSharpness [ARG Mat image=, ARG Size patternSize=, ARG Mat corners=, ARG float rise_distance=0.8F, ARG bool vertical=false, ARG Mat sharpness=Mat()]>
java: Scalar estimateChessboardSharpness(Mat image, Size patternSize, Mat corners, float rise_distance, boolean vertical, Mat sharpness)
java: Scalar estimateChessboardSharpness(Mat image, Size patternSize, Mat corners, float rise_distance, boolean vertical)
java: Scalar estimateChessboardSharpness(Mat image, Size patternSize, Mat corners, float rise_distance)
java: Scalar estimateChessboardSharpness(Mat image, Size patternSize, Mat corners)
FUNC <bool cv..find4QuadCornerSubpix [ARG Mat img=, ARG Mat corners=, ARG Size region_size=]>
java: boolean find4QuadCornerSubpix(Mat img, Mat corners, Size region_size)
FUNC <void cv..drawChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG bool patternWasFound=]>
java: void drawChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners, boolean patternWasFound)
FUNC <void cv..drawFrameAxes [ARG Mat image=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG float length=, ARG int thickness=3]>
java: void drawFrameAxes(Mat image, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, float length, int thickness)
java: void drawFrameAxes(Mat image, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, float length)
FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=, ARG Ptr_FeatureDetector blobDetector=, ARG CirclesGridFinderParameters parameters=]>
SKIP:bool cv::findCirclesGrid(Mat image, Size patternSize, Mat& centers, int flags, Ptr_FeatureDetector blobDetector, CirclesGridFinderParameters parameters)	 due to ARG type Ptr_FeatureDetector/I
FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=CALIB_CB_SYMMETRIC_GRID, ARG Ptr_FeatureDetector blobDetector=SimpleBlobDetector::create()]>
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers, int flags)
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers, int flags)
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers)
FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors, int flags, TermCriteria criteria)
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors, int flags)
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors)
FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags, TermCriteria criteria)
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags)
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs)
FUNC <double cv..calibrateCameraRO [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG int iFixedPoint=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat newObjPoints=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat stdDeviationsObjPoints=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCameraROExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat stdDeviationsObjPoints, Mat perViewErrors, int flags, TermCriteria criteria)
java: double calibrateCameraROExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat stdDeviationsObjPoints, Mat perViewErrors, int flags)
java: double calibrateCameraROExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat stdDeviationsObjPoints, Mat perViewErrors)
FUNC <double cv..calibrateCameraRO [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG int iFixedPoint=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat newObjPoints=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCameraRO(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints, int flags, TermCriteria criteria)
java: double calibrateCameraRO(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints, int flags)
java: double calibrateCameraRO(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, int iFixedPoint, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat newObjPoints)
FUNC <void cv..calibrationMatrixValues [ARG Mat cameraMatrix=, ARG Size imageSize=, ARG double apertureWidth=, ARG double apertureHeight=, ARG double fovx=, ARG double fovy=, ARG double focalLength=, ARG Point2d principalPoint=, ARG double aspectRatio=]>
java: void calibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double[] fovx, double[] fovy, double[] focalLength, Point principalPoint, double[] aspectRatio)
FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, List<Mat> rvecs, List<Mat> tvecs, Mat perViewErrors, int flags, TermCriteria criteria)
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, List<Mat> rvecs, List<Mat> tvecs, Mat perViewErrors, int flags)
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, List<Mat> rvecs, List<Mat> tvecs, Mat perViewErrors)
FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, int flags, TermCriteria criteria)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, int flags)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F)
FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors, int flags, TermCriteria criteria)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors, int flags)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors)
FUNC <void cv..stereoRectify [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=CALIB_ZERO_DISPARITY, ARG double alpha=-1, ARG Size newImageSize=Size(), ARG Rect * validPixROI1=0, ARG Rect * validPixROI2=0]>
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize, Rect validPixROI1, Rect validPixROI2)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize, Rect validPixROI1)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q)
FUNC <bool cv..stereoRectifyUncalibrated [ARG Mat points1=, ARG Mat points2=, ARG Mat F=, ARG Size imgSize=, ARG Mat H1=, ARG Mat H2=, ARG double threshold=5]>
java: boolean stereoRectifyUncalibrated(Mat points1, Mat points2, Mat F, Size imgSize, Mat H1, Mat H2, double threshold)
java: boolean stereoRectifyUncalibrated(Mat points1, Mat points2, Mat F, Size imgSize, Mat H1, Mat H2)
FUNC <float cv..rectify3Collinear [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat cameraMatrix3=, ARG Mat distCoeffs3=, ARG vector_Mat imgpt1=, ARG vector_Mat imgpt3=, ARG Size imageSize=, ARG Mat R12=, ARG Mat T12=, ARG Mat R13=, ARG Mat T13=, ARG Mat R1=, ARG Mat R2=, ARG Mat R3=, ARG Mat P1=, ARG Mat P2=, ARG Mat P3=, ARG Mat Q=, ARG double alpha=, ARG Size newImgSize=, ARG Rect * roi1=, ARG Rect * roi2=, ARG int flags=]>
java: float rectify3Collinear(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat cameraMatrix3, Mat distCoeffs3, List<Mat> imgpt1, List<Mat> imgpt3, Size imageSize, Mat R12, Mat T12, Mat R13, Mat T13, Mat R1, Mat R2, Mat R3, Mat P1, Mat P2, Mat P3, Mat Q, double alpha, Size newImgSize, Rect roi1, Rect roi2, int flags)
FUNC <Mat cv..getOptimalNewCameraMatrix [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG double alpha=, ARG Size newImgSize=Size(), ARG Rect * validPixROI=0, ARG bool centerPrincipalPoint=false]>
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize, Rect validPixROI, boolean centerPrincipalPoint)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize, Rect validPixROI)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha)
FUNC <void cv..calibrateHandEye [ARG vector_Mat R_gripper2base=, ARG vector_Mat t_gripper2base=, ARG vector_Mat R_target2cam=, ARG vector_Mat t_target2cam=, ARG Mat R_cam2gripper=, ARG Mat t_cam2gripper=, ARG HandEyeCalibrationMethod method=CALIB_HAND_EYE_TSAI]>
java: void calibrateHandEye(List<Mat> R_gripper2base, List<Mat> t_gripper2base, List<Mat> R_target2cam, List<Mat> t_target2cam, Mat R_cam2gripper, Mat t_cam2gripper, int method)
java: void calibrateHandEye(List<Mat> R_gripper2base, List<Mat> t_gripper2base, List<Mat> R_target2cam, List<Mat> t_target2cam, Mat R_cam2gripper, Mat t_cam2gripper)
FUNC <void cv..calibrateRobotWorldHandEye [ARG vector_Mat R_world2cam=, ARG vector_Mat t_world2cam=, ARG vector_Mat R_base2gripper=, ARG vector_Mat t_base2gripper=, ARG Mat R_base2world=, ARG Mat t_base2world=, ARG Mat R_gripper2cam=, ARG Mat t_gripper2cam=, ARG RobotWorldHandEyeCalibrationMethod method=CALIB_ROBOT_WORLD_HAND_EYE_SHAH]>
java: void calibrateRobotWorldHandEye(List<Mat> R_world2cam, List<Mat> t_world2cam, List<Mat> R_base2gripper, List<Mat> t_base2gripper, Mat R_base2world, Mat t_base2world, Mat R_gripper2cam, Mat t_gripper2cam, int method)
java: void calibrateRobotWorldHandEye(List<Mat> R_world2cam, List<Mat> t_world2cam, List<Mat> R_base2gripper, List<Mat> t_base2gripper, Mat R_base2world, Mat t_base2world, Mat R_gripper2cam, Mat t_gripper2cam)
FUNC <void cv..convertPointsToHomogeneous [ARG Mat src=, ARG Mat dst=]>
java: void convertPointsToHomogeneous(Mat src, Mat dst)
FUNC <void cv..convertPointsFromHomogeneous [ARG Mat src=, ARG Mat dst=]>
java: void convertPointsFromHomogeneous(Mat src, Mat dst)
FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=, ARG double ransacReprojThreshold=, ARG double confidence=, ARG int maxIters=, ARG Mat mask=Mat()]>
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence, int maxIters, Mat mask)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence, int maxIters)
FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=FM_RANSAC, ARG double ransacReprojThreshold=3., ARG double confidence=0.99, ARG Mat mask=Mat()]>
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence, Mat mask)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2)
FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG Mat mask=, ARG UsacParams params=]>
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, Mat mask, UsacParams params)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG int maxIters=1000, ARG Mat mask=Mat()]>
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob, double threshold, int maxIters, Mat mask)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob, double threshold, int maxIters)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob, double threshold)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG int maxIters=1000, ARG Mat mask=Mat()]>
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob, double threshold, int maxIters, Mat mask)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob, double threshold, int maxIters)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob, double threshold)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal)
java: Mat findEssentialMat(Mat points1, Mat points2)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, int method, double prob, double threshold, Mat mask)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, int method, double prob, double threshold)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, int method, double prob)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, int method)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat cameraMatrix2=, ARG Mat dist_coeff1=, ARG Mat dist_coeff2=, ARG Mat mask=, ARG UsacParams params=]>
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix1, Mat cameraMatrix2, Mat dist_coeff1, Mat dist_coeff2, Mat mask, UsacParams params)
FUNC <void cv..decomposeEssentialMat [ARG Mat E=, ARG Mat R1=, ARG Mat R2=, ARG Mat t=]>
java: void decomposeEssentialMat(Mat E, Mat R1, Mat R2, Mat t)
FUNC <int cv..recoverPose [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat E=, ARG Mat R=, ARG Mat t=, ARG int method=cv::RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>
java: int recoverPose(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat E, Mat R, Mat t, int method, double prob, double threshold, Mat mask)
java: int recoverPose(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat E, Mat R, Mat t, int method, double prob, double threshold)
java: int recoverPose(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat E, Mat R, Mat t, int method, double prob)
java: int recoverPose(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat E, Mat R, Mat t, int method)
java: int recoverPose(Mat points1, Mat points2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat E, Mat R, Mat t)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG Mat mask=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat R=, ARG Mat t=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG Mat mask=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal, Point pp, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal, Point pp)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG double distanceThresh=, ARG Mat mask=Mat(), ARG Mat triangulatedPoints=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh, Mat mask, Mat triangulatedPoints)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh)
FUNC <void cv..computeCorrespondEpilines [ARG Mat points=, ARG int whichImage=, ARG Mat F=, ARG Mat lines=]>
java: void computeCorrespondEpilines(Mat points, int whichImage, Mat F, Mat lines)
FUNC <void cv..triangulatePoints [ARG Mat projMatr1=, ARG Mat projMatr2=, ARG Mat projPoints1=, ARG Mat projPoints2=, ARG Mat points4D=]>
java: void triangulatePoints(Mat projMatr1, Mat projMatr2, Mat projPoints1, Mat projPoints2, Mat points4D)
FUNC <void cv..correctMatches [ARG Mat F=, ARG Mat points1=, ARG Mat points2=, ARG Mat newPoints1=, ARG Mat newPoints2=]>
java: void correctMatches(Mat F, Mat points1, Mat points2, Mat newPoints1, Mat newPoints2)
FUNC <void cv..filterSpeckles [ARG Mat img=, ARG double newVal=, ARG int maxSpeckleSize=, ARG double maxDiff=, ARG Mat buf=Mat()]>
java: void filterSpeckles(Mat img, double newVal, int maxSpeckleSize, double maxDiff, Mat buf)
java: void filterSpeckles(Mat img, double newVal, int maxSpeckleSize, double maxDiff)
FUNC <Rect cv..getValidDisparityROI [ARG Rect roi1=, ARG Rect roi2=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int blockSize=]>
java: Rect getValidDisparityROI(Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int blockSize)
FUNC <void cv..validateDisparity [ARG Mat disparity=, ARG Mat cost=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int disp12MaxDisp=1]>
java: void validateDisparity(Mat disparity, Mat cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp)
java: void validateDisparity(Mat disparity, Mat cost, int minDisparity, int numberOfDisparities)
FUNC <void cv..reprojectImageTo3D [ARG Mat disparity=, ARG Mat _3dImage=, ARG Mat Q=, ARG bool handleMissingValues=false, ARG int ddepth=-1]>
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q, boolean handleMissingValues, int ddepth)
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q, boolean handleMissingValues)
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q)
FUNC <double cv..sampsonDistance [ARG Mat pt1=, ARG Mat pt2=, ARG Mat F=]>
java: double sampsonDistance(Mat pt1, Mat pt2, Mat F)
FUNC <int cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold, double confidence)
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold)
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers)
FUNC <Mat cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG double * scale=nullptr, ARG bool force_rotation=true]>
java: Mat estimateAffine3D(Mat src, Mat dst, double[] scale, boolean force_rotation)
java: Mat estimateAffine3D(Mat src, Mat dst, double[] scale)
java: Mat estimateAffine3D(Mat src, Mat dst)
FUNC <int cv..estimateTranslation3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>
java: int estimateTranslation3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold, double confidence)
java: int estimateTranslation3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold)
java: int estimateTranslation3D(Mat src, Mat dst, Mat out, Mat inliers)
FUNC <Mat cv..estimateAffine2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence, long refineIters)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers)
java: Mat estimateAffine2D(Mat from, Mat to)
FUNC <Mat cv..estimateAffine2D [ARG Mat pts1=, ARG Mat pts2=, ARG Mat inliers=, ARG UsacParams params=]>
java: Mat estimateAffine2D(Mat pts1, Mat pts2, Mat inliers, UsacParams params)
FUNC <Mat cv..estimateAffinePartial2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence, long refineIters)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers)
java: Mat estimateAffinePartial2D(Mat from, Mat to)
FUNC <int cv..decomposeHomographyMat [ARG Mat H=, ARG Mat K=, ARG vector_Mat rotations=, ARG vector_Mat translations=, ARG vector_Mat normals=]>
java: int decomposeHomographyMat(Mat H, Mat K, List<Mat> rotations, List<Mat> translations, List<Mat> normals)
FUNC <void cv..filterHomographyDecompByVisibleRefpoints [ARG vector_Mat rotations=, ARG vector_Mat normals=, ARG Mat beforePoints=, ARG Mat afterPoints=, ARG Mat possibleSolutions=, ARG Mat pointsMask=Mat()]>
java: void filterHomographyDecompByVisibleRefpoints(List<Mat> rotations, List<Mat> normals, Mat beforePoints, Mat afterPoints, Mat possibleSolutions, Mat pointsMask)
java: void filterHomographyDecompByVisibleRefpoints(List<Mat> rotations, List<Mat> normals, Mat beforePoints, Mat afterPoints, Mat possibleSolutions)
FUNC <void cv..undistort [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat newCameraMatrix=Mat()]>
java: void undistort(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat newCameraMatrix)
java: void undistort(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs)
FUNC <void cv..initUndistortRectifyMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>
java: void initUndistortRectifyMap(Mat cameraMatrix, Mat distCoeffs, Mat R, Mat newCameraMatrix, Size size, int m1type, Mat map1, Mat map2)
FUNC <void cv..initInverseRectificationMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>
java: void initInverseRectificationMap(Mat cameraMatrix, Mat distCoeffs, Mat R, Mat newCameraMatrix, Size size, int m1type, Mat map1, Mat map2)
FUNC <Mat cv..getDefaultNewCameraMatrix [ARG Mat cameraMatrix=, ARG Size imgsize=Size(), ARG bool centerPrincipalPoint=false]>
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix, Size imgsize, boolean centerPrincipalPoint)
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix, Size imgsize)
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix)
FUNC <void cv..undistortPoints [ARG vector_Point2f src=, ARG vector_Point2f dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=Mat(), ARG Mat P=Mat()]>
java: void undistortPoints(MatOfPoint2f src, MatOfPoint2f dst, Mat cameraMatrix, Mat distCoeffs, Mat R, Mat P)
java: void undistortPoints(MatOfPoint2f src, MatOfPoint2f dst, Mat cameraMatrix, Mat distCoeffs, Mat R)
java: void undistortPoints(MatOfPoint2f src, MatOfPoint2f dst, Mat cameraMatrix, Mat distCoeffs)
FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat P=, ARG TermCriteria criteria=]>
java: void undistortPointsIter(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat R, Mat P, TermCriteria criteria)
FUNC <void cv..undistortImagePoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG TermCriteria arg1=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 5, 0.01)]>
java: void undistortImagePoints(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, TermCriteria arg1)
java: void undistortImagePoints(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs)
FUNC <void cv.fisheye..projectPoints [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat K=, ARG Mat D=, ARG double alpha=0, ARG Mat jacobian=Mat()]>
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D, double alpha, Mat jacobian)
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D, double alpha)
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D)
FUNC <void cv.fisheye..distortPoints [ARG Mat undistorted=, ARG Mat distorted=, ARG Mat K=, ARG Mat D=, ARG double alpha=0]>
java: void fisheye_distortPoints(Mat undistorted, Mat distorted, Mat K, Mat D, double alpha)
java: void fisheye_distortPoints(Mat undistorted, Mat distorted, Mat K, Mat D)
FUNC <void cv.fisheye..undistortPoints [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat R=Mat(), ARG Mat P=Mat(), ARG TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8)]>
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D, Mat R, Mat P, TermCriteria criteria)
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D, Mat R, Mat P)
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D, Mat R)
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D)
FUNC <void cv.fisheye..initUndistortRectifyMap [ARG Mat K=, ARG Mat D=, ARG Mat R=, ARG Mat P=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>
java: void fisheye_initUndistortRectifyMap(Mat K, Mat D, Mat R, Mat P, Size size, int m1type, Mat map1, Mat map2)
FUNC <void cv.fisheye..undistortImage [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat Knew=cv::Mat(), ARG Size new_size=Size()]>
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D, Mat Knew, Size new_size)
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D, Mat Knew)
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D)
FUNC <void cv.fisheye..estimateNewCameraMatrixForUndistortRectify [ARG Mat K=, ARG Mat D=, ARG Size image_size=, ARG Mat R=, ARG Mat P=, ARG double balance=0.0, ARG Size new_size=Size(), ARG double fov_scale=1.0]>
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance, Size new_size, double fov_scale)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance, Size new_size)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P)
FUNC <double cv.fisheye..calibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size image_size=, ARG Mat K=, ARG Mat D=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs, int flags, TermCriteria criteria)
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs, int flags)
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs)
FUNC <void cv.fisheye..stereoRectify [ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat tvec=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=, ARG Size newImageSize=Size(), ARG double balance=0.0, ARG double fov_scale=1.0]>
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize, double balance, double fov_scale)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize, double balance)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags)
FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, List<Mat> rvecs, List<Mat> tvecs, int flags, TermCriteria criteria)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, List<Mat> rvecs, List<Mat> tvecs, int flags)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, List<Mat> rvecs, List<Mat> tvecs)
FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, int flags, TermCriteria criteria)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, int flags)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T)
FUNC <bool cv.fisheye..solvePnP [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE, ARG TermCriteria criteria=TermCriteria(TermCriteria::MAX_ITER + TermCriteria::EPS, 10, 1e-8)]>
java: boolean fisheye_solvePnP(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int flags, TermCriteria criteria)
java: boolean fisheye_solvePnP(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int flags)
java: boolean fisheye_solvePnP(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess)
java: boolean fisheye_solvePnP(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, Mat rvec, Mat tvec)
CLASS cv::.StereoBM : StereoMatcher
[CONST PREFILTER_NORMALIZED_RESPONSE=0, CONST PREFILTER_XSOBEL=1]
FUNC <int cv.StereoBM.getPreFilterType []>
java: int getPreFilterType()
FUNC <void cv.StereoBM.setPreFilterType [ARG int preFilterType=]>
java: void setPreFilterType(int preFilterType)
FUNC <int cv.StereoBM.getPreFilterSize []>
java: int getPreFilterSize()
FUNC <void cv.StereoBM.setPreFilterSize [ARG int preFilterSize=]>
java: void setPreFilterSize(int preFilterSize)
FUNC <int cv.StereoBM.getPreFilterCap []>
java: int getPreFilterCap()
FUNC <void cv.StereoBM.setPreFilterCap [ARG int preFilterCap=]>
java: void setPreFilterCap(int preFilterCap)
FUNC <int cv.StereoBM.getTextureThreshold []>
java: int getTextureThreshold()
FUNC <void cv.StereoBM.setTextureThreshold [ARG int textureThreshold=]>
java: void setTextureThreshold(int textureThreshold)
FUNC <int cv.StereoBM.getUniquenessRatio []>
java: int getUniquenessRatio()
FUNC <void cv.StereoBM.setUniquenessRatio [ARG int uniquenessRatio=]>
java: void setUniquenessRatio(int uniquenessRatio)
FUNC <int cv.StereoBM.getSmallerBlockSize []>
java: int getSmallerBlockSize()
FUNC <void cv.StereoBM.setSmallerBlockSize [ARG int blockSize=]>
java: void setSmallerBlockSize(int blockSize)
FUNC <Rect cv.StereoBM.getROI1 []>
java: Rect getROI1()
FUNC <void cv.StereoBM.setROI1 [ARG Rect roi1=]>
java: void setROI1(Rect roi1)
FUNC <Rect cv.StereoBM.getROI2 []>
java: Rect getROI2()
FUNC <void cv.StereoBM.setROI2 [ARG Rect roi2=]>
java: void setROI2(Rect roi2)
FUNC <Ptr_StereoBM cv.StereoBM.create [ARG int numDisparities=0, ARG int blockSize=21]>
java: StereoBM create(int numDisparities, int blockSize)
java: StereoBM create(int numDisparities)
java: StereoBM create()
CLASS cv::.StereoMatcher : Algorithm
[CONST DISP_SHIFT=4, CONST DISP_SCALE=(1 << DISP_SHIFT)]
FUNC <void cv.StereoMatcher.compute [ARG Mat left=, ARG Mat right=, ARG Mat disparity=]>
java: void compute(Mat left, Mat right, Mat disparity)
FUNC <int cv.StereoMatcher.getMinDisparity []>
java: int getMinDisparity()
FUNC <void cv.StereoMatcher.setMinDisparity [ARG int minDisparity=]>
java: void setMinDisparity(int minDisparity)
FUNC <int cv.StereoMatcher.getNumDisparities []>
java: int getNumDisparities()
FUNC <void cv.StereoMatcher.setNumDisparities [ARG int numDisparities=]>
java: void setNumDisparities(int numDisparities)
FUNC <int cv.StereoMatcher.getBlockSize []>
java: int getBlockSize()
FUNC <void cv.StereoMatcher.setBlockSize [ARG int blockSize=]>
java: void setBlockSize(int blockSize)
FUNC <int cv.StereoMatcher.getSpeckleWindowSize []>
java: int getSpeckleWindowSize()
FUNC <void cv.StereoMatcher.setSpeckleWindowSize [ARG int speckleWindowSize=]>
java: void setSpeckleWindowSize(int speckleWindowSize)
FUNC <int cv.StereoMatcher.getSpeckleRange []>
java: int getSpeckleRange()
FUNC <void cv.StereoMatcher.setSpeckleRange [ARG int speckleRange=]>
java: void setSpeckleRange(int speckleRange)
FUNC <int cv.StereoMatcher.getDisp12MaxDiff []>
java: int getDisp12MaxDiff()
FUNC <void cv.StereoMatcher.setDisp12MaxDiff [ARG int disp12MaxDiff=]>
java: void setDisp12MaxDiff(int disp12MaxDiff)
CLASS cv::.StereoSGBM : StereoMatcher
[CONST MODE_SGBM=0, CONST MODE_HH=1, CONST MODE_SGBM_3WAY=2, CONST MODE_HH4=3]
FUNC <int cv.StereoSGBM.getPreFilterCap []>
java: int getPreFilterCap()
FUNC <void cv.StereoSGBM.setPreFilterCap [ARG int preFilterCap=]>
java: void setPreFilterCap(int preFilterCap)
FUNC <int cv.StereoSGBM.getUniquenessRatio []>
java: int getUniquenessRatio()
FUNC <void cv.StereoSGBM.setUniquenessRatio [ARG int uniquenessRatio=]>
java: void setUniquenessRatio(int uniquenessRatio)
FUNC <int cv.StereoSGBM.getP1 []>
java: int getP1()
FUNC <void cv.StereoSGBM.setP1 [ARG int P1=]>
java: void setP1(int P1)
FUNC <int cv.StereoSGBM.getP2 []>
java: int getP2()
FUNC <void cv.StereoSGBM.setP2 [ARG int P2=]>
java: void setP2(int P2)
FUNC <int cv.StereoSGBM.getMode []>
java: int getMode()
FUNC <void cv.StereoSGBM.setMode [ARG int mode=]>
java: void setMode(int mode)
FUNC <Ptr_StereoSGBM cv.StereoSGBM.create [ARG int minDisparity=0, ARG int numDisparities=16, ARG int blockSize=3, ARG int P1=0, ARG int P2=0, ARG int disp12MaxDiff=0, ARG int preFilterCap=0, ARG int uniquenessRatio=0, ARG int speckleWindowSize=0, ARG int speckleRange=0, ARG int mode=StereoSGBM::MODE_SGBM]>
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange, int mode)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize)
java: StereoSGBM create(int minDisparity, int numDisparities)
java: StereoSGBM create(int minDisparity)
java: StereoSGBM create()
CLASS cv::.UsacParams : 
FUNC < cv.UsacParams.UsacParams []>
java:  UsacParams()
FUNC <double cv.UsacParams.get_confidence []>
java: double get_confidence()
FUNC <void cv.UsacParams.set_confidence [ARG double confidence=]>
java: void set_confidence(double confidence)
FUNC <bool cv.UsacParams.get_isParallel []>
java: boolean get_isParallel()
FUNC <void cv.UsacParams.set_isParallel [ARG bool isParallel=]>
java: void set_isParallel(boolean isParallel)
FUNC <int cv.UsacParams.get_loIterations []>
java: int get_loIterations()
FUNC <void cv.UsacParams.set_loIterations [ARG int loIterations=]>
java: void set_loIterations(int loIterations)
FUNC <LocalOptimMethod cv.UsacParams.get_loMethod []>
java: int get_loMethod()
FUNC <void cv.UsacParams.set_loMethod [ARG LocalOptimMethod loMethod=]>
java: void set_loMethod(int loMethod)
FUNC <int cv.UsacParams.get_loSampleSize []>
java: int get_loSampleSize()
FUNC <void cv.UsacParams.set_loSampleSize [ARG int loSampleSize=]>
java: void set_loSampleSize(int loSampleSize)
FUNC <int cv.UsacParams.get_maxIterations []>
java: int get_maxIterations()
FUNC <void cv.UsacParams.set_maxIterations [ARG int maxIterations=]>
java: void set_maxIterations(int maxIterations)
FUNC <NeighborSearchMethod cv.UsacParams.get_neighborsSearch []>
java: int get_neighborsSearch()
FUNC <void cv.UsacParams.set_neighborsSearch [ARG NeighborSearchMethod neighborsSearch=]>
java: void set_neighborsSearch(int neighborsSearch)
FUNC <int cv.UsacParams.get_randomGeneratorState []>
java: int get_randomGeneratorState()
FUNC <void cv.UsacParams.set_randomGeneratorState [ARG int randomGeneratorState=]>
java: void set_randomGeneratorState(int randomGeneratorState)
FUNC <SamplingMethod cv.UsacParams.get_sampler []>
java: int get_sampler()
FUNC <void cv.UsacParams.set_sampler [ARG SamplingMethod sampler=]>
java: void set_sampler(int sampler)
FUNC <ScoreMethod cv.UsacParams.get_score []>
java: int get_score()
FUNC <void cv.UsacParams.set_score [ARG ScoreMethod score=]>
java: void set_score(int score)
FUNC <double cv.UsacParams.get_threshold []>
java: double get_threshold()
FUNC <void cv.UsacParams.set_threshold [ARG double threshold=]>
java: void set_threshold(double threshold)
FUNC <PolishingMethod cv.UsacParams.get_final_polisher []>
java: int get_final_polisher()
FUNC <void cv.UsacParams.set_final_polisher [ARG PolishingMethod final_polisher=]>
java: void set_final_polisher(int final_polisher)
FUNC <int cv.UsacParams.get_final_polisher_iterations []>
java: int get_final_polisher_iterations()
FUNC <void cv.UsacParams.set_final_polisher_iterations [ARG int final_polisher_iterations=]>
java: void set_final_polisher_iterations(int final_polisher_iterations)

=== MODULE: highgui (/home/adminlab/franka_ros2_ws/src/opencv/modules/highgui) ===


Files (0):
[]

Common headers (0):
[]
No generated code for module: highgui

=== MODULE: objdetect (/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect) ===


Files (10):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/face.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_detector.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/charuco_detector.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/graphical_code_detector.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_dictionary.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_board.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/barcode.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Objdetect : , name: Objdetect, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect.hpp =====
Namespaces: ['cv']

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['vector_Rect', 'rectList', '', ['/IO', '/Ref']],
        ['vector_int', 'weights', '', ['/O', '/Ref']],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '0.2', []]],
    'void']
ok: FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.CASCADE_DO_CANNY_PRUNING', '1', [], [], None, ''],
        ['const cv.CASCADE_SCALE_IMAGE', '2', [], [], None, ''],
        ['const cv.CASCADE_FIND_BIGGEST_OBJECT', '4', [], [], None, ''],
        ['const cv.CASCADE_DO_ROUGH_SEARCH', '8', [], [], None, '']],
    None]
ok: CONST CASCADE_DO_CANNY_PRUNING=1
ok: CONST CASCADE_SCALE_IMAGE=2
ok: CONST CASCADE_FIND_BIGGEST_OBJECT=4
ok: CONST CASCADE_DO_ROUGH_SEARCH=8

--- Incoming ---
['class cv.BaseCascadeClassifier', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.BaseCascadeClassifier : Algorithm, name: BaseCascadeClassifier, base: Algorithm

--- Incoming ---
['class cv.CascadeClassifier', '', [], [], None]
ok: class CLASS cv::.CascadeClassifier : , name: CascadeClassifier, base: 

--- Incoming ---
['cv.CascadeClassifier.CascadeClassifier', '', [], [], None]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier []>

--- Incoming ---
[   'cv.CascadeClassifier.CascadeClassifier',
    '',
    [],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    None]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>

--- Incoming ---
['cv.CascadeClassifier.empty', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.CascadeClassifier.empty []>

--- Incoming ---
[   'cv.CascadeClassifier.load',
    'bool',
    [],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>

--- Incoming ---
[   'cv.CascadeClassifier.read',
    'bool',
    [],
    [['FileNode', 'node', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    ['=detectMultiScale2'],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['vector_int', 'numDetections', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    ['=detectMultiScale3'],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['vector_int', 'rejectLevels', '', ['/O', '/Ref']],
        ['vector_double', 'levelWeights', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []],
        ['bool', 'outputRejectLevels', 'false', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>

--- Incoming ---
['cv.CascadeClassifier.isOldFormatCascade', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>

--- Incoming ---
['cv.CascadeClassifier.getOriginalWindowSize', 'Size', ['/C'], [], 'Size']
ok: FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>

--- Incoming ---
['cv.CascadeClassifier.getFeatureType', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.CascadeClassifier.getFeatureType []>

--- Incoming ---
[   'cv.CascadeClassifier.convert',
    'bool',
    ['/S'],
    [   ['String', 'oldcascade', '', ['/C', '/Ref']],
        ['String', 'newcascade', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>

--- Incoming ---
[   'struct cv.HOGDescriptor',
    '',
    [],
    [   ['Size', 'winSize', '', []],
        ['Size', 'blockSize', '', []],
        ['Size', 'blockStride', '', []],
        ['Size', 'cellSize', '', []],
        ['int', 'nbins', '', []],
        ['int', 'derivAperture', '', []],
        ['double', 'winSigma', '', []],
        ['HOGDescriptor_HistogramNormType', 'histogramNormType', '', []],
        ['double', 'L2HysThreshold', '', []],
        ['bool', 'gammaCorrection', '', []],
        ['vector_float', 'svmDetector', '', []],
        ['int', 'nlevels', '', []],
        ['bool', 'signedGradient', '', []]],
    None]
ok: class CLASS cv::.HOGDescriptor : , name: HOGDescriptor, base: 

--- Incoming ---
[   'enum cv.HOGDescriptor.HistogramNormType',
    '',
    [],
    [['const cv.HOGDescriptor.L2Hys', '0', [], [], None, '']],
    None]
ok: CONST L2Hys=0

--- Incoming ---
[   'enum cv.HOGDescriptor.<unnamed>',
    '',
    [],
    [['const cv.HOGDescriptor.DEFAULT_NLEVELS', '64', [], [], None, '']],
    None]
ok: CONST DEFAULT_NLEVELS=64

--- Incoming ---
[   'enum cv.HOGDescriptor.DescriptorStorageFormat',
    '',
    [],
    [   [   'const cv.HOGDescriptor.DESCR_FORMAT_COL_BY_COL',
            '0',
            [],
            [],
            None,
            ''],
        [   'const cv.HOGDescriptor.DESCR_FORMAT_ROW_BY_ROW',
            '1',
            [],
            [],
            None,
            '']],
    None]
ok: CONST DESCR_FORMAT_COL_BY_COL=0
ok: CONST DESCR_FORMAT_ROW_BY_ROW=1

--- Incoming ---
['cv.HOGDescriptor.HOGDescriptor', '', [], [], None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor []>

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [   ['Size', '_winSize', '', []],
        ['Size', '_blockSize', '', []],
        ['Size', '_blockStride', '', []],
        ['Size', '_cellSize', '', []],
        ['int', '_nbins', '', []],
        ['int', '_derivAperture', '1', []],
        ['double', '_winSigma', '-1', []],
        [   'HOGDescriptor_HistogramNormType',
            '_histogramNormType',
            'HOGDescriptor::L2Hys',
            []],
        ['double', '_L2HysThreshold', '0.2', []],
        ['bool', '_gammaCorrection', 'false', []],
        ['int', '_nlevels', 'HOGDescriptor::DEFAULT_NLEVELS', []],
        ['bool', '_signedGradient', 'false', []]],
    None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG HOGDescriptor_HistogramNormType _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [['String', 'filename', '', ['/C', '/Ref', '/PATH']]],
    None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>

--- Incoming ---
['cv.HOGDescriptor.getDescriptorSize', 'size_t', ['/C'], [], 'size_t']
ok: FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>

--- Incoming ---
['cv.HOGDescriptor.checkDetectorSize', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.HOGDescriptor.checkDetectorSize []>

--- Incoming ---
['cv.HOGDescriptor.getWinSigma', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.HOGDescriptor.getWinSigma []>

--- Incoming ---
[   'cv.HOGDescriptor.setSVMDetector',
    'void',
    ['/V'],
    [['Mat', 'svmdetector', '', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat svmdetector=]>

--- Incoming ---
[   'cv.HOGDescriptor.load',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['String', 'objname', 'String()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   'cv.HOGDescriptor.save',
    'void',
    ['/C', '/V'],
    [   ['String', 'filename', '', ['/C', '/Ref', '/PATH']],
        ['String', 'objname', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   'cv.HOGDescriptor.compute',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['vector_float', 'descriptors', '', ['/O', '/Ref']],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['vector_Point', 'locations', 'std::vector<Point>()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>

--- Incoming ---
[   'cv.HOGDescriptor.detect',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['vector_Point', 'foundLocations', '', ['/O', '/Ref']],
        ['vector_double', 'weights', '', ['/O', '/Ref']],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        [   'vector_Point',
            'searchLocations',
            'std::vector<Point>()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>

--- Incoming ---
[   'cv.HOGDescriptor.detectMultiScale',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['vector_Rect', 'foundLocations', '', ['/O', '/Ref']],
        ['vector_double', 'foundWeights', '', ['/O', '/Ref']],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['double', 'scale', '1.05', []],
        ['double', 'groupThreshold', '2.0', []],
        ['bool', 'useMeanshiftGrouping', 'false', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double groupThreshold=2.0, ARG bool useMeanshiftGrouping=false]>

--- Incoming ---
[   'cv.HOGDescriptor.computeGradient',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'grad', '', ['/IO']],
        ['Mat', 'angleOfs', '', ['/IO']],
        ['Size', 'paddingTL', 'Size()', []],
        ['Size', 'paddingBR', 'Size()', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>

--- Incoming ---
[   'cv.HOGDescriptor.getDefaultPeopleDetector',
    'vector_float',
    ['/S'],
    [],
    'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>

--- Incoming ---
[   'cv.HOGDescriptor.getDaimlerPeopleDetector',
    'vector_float',
    ['/S'],
    [],
    'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>

--- Incoming ---
['class cv.QRCodeEncoder', '', [], [], None]
ok: class CLASS cv::.QRCodeEncoder : , name: QRCodeEncoder, base: 

--- Incoming ---
[   'enum cv.QRCodeEncoder.EncodeMode',
    '',
    [],
    [   ['const cv.QRCodeEncoder.MODE_AUTO', '-1', [], [], None, ''],
        ['const cv.QRCodeEncoder.MODE_NUMERIC', '1', [], [], None, ''],
        ['const cv.QRCodeEncoder.MODE_ALPHANUMERIC', '2', [], [], None, ''],
        ['const cv.QRCodeEncoder.MODE_BYTE', '4', [], [], None, ''],
        ['const cv.QRCodeEncoder.MODE_ECI', '7', [], [], None, ''],
        ['const cv.QRCodeEncoder.MODE_KANJI', '8', [], [], None, ''],
        [   'const cv.QRCodeEncoder.MODE_STRUCTURED_APPEND',
            '3',
            [],
            [],
            None,
            '']],
    None]
ok: CONST MODE_AUTO=-1
ok: CONST MODE_NUMERIC=1
ok: CONST MODE_ALPHANUMERIC=2
ok: CONST MODE_BYTE=4
ok: CONST MODE_ECI=7
ok: CONST MODE_KANJI=8
ok: CONST MODE_STRUCTURED_APPEND=3

--- Incoming ---
[   'enum cv.QRCodeEncoder.CorrectionLevel',
    '',
    [],
    [   ['const cv.QRCodeEncoder.CORRECT_LEVEL_L', '0', [], [], None, ''],
        ['const cv.QRCodeEncoder.CORRECT_LEVEL_M', '1', [], [], None, ''],
        ['const cv.QRCodeEncoder.CORRECT_LEVEL_Q', '2', [], [], None, ''],
        ['const cv.QRCodeEncoder.CORRECT_LEVEL_H', '3', [], [], None, '']],
    None]
ok: CONST CORRECT_LEVEL_L=0
ok: CONST CORRECT_LEVEL_M=1
ok: CONST CORRECT_LEVEL_Q=2
ok: CONST CORRECT_LEVEL_H=3

--- Incoming ---
[   'enum cv.QRCodeEncoder.ECIEncodings',
    '',
    [],
    [['const cv.QRCodeEncoder.ECI_UTF8', '26', [], [], None, '']],
    None]
ok: CONST ECI_UTF8=26

--- Incoming ---
[   'struct cv.QRCodeEncoder.Params',
    '',
    ['/Simple'],
    [   ['int', 'version', '', ['/RW']],
        ['CorrectionLevel', 'correction_level', '', ['/RW']],
        ['EncodeMode', 'mode', '', ['/RW']],
        ['int', 'structure_number', '', ['/RW']]],
    None]
ok: class CLASS cv::QRCodeEncoder.QRCodeEncoder_Params : , name: QRCodeEncoder_Params, base: 

--- Incoming ---
['cv.QRCodeEncoder.Params.Params', '', [], [], None]
ok: FUNC < cv.QRCodeEncoder.Params.QRCodeEncoder_Params []>

--- Incoming ---
[   'cv.QRCodeEncoder.create',
    'Ptr_QRCodeEncoder',
    ['/S'],
    [   [   'QRCodeEncoder_Params',
            'parameters',
            'QRCodeEncoder::Params()',
            ['/C', '/Ref']]],
    'Ptr<QRCodeEncoder>']
ok: FUNC <Ptr_QRCodeEncoder cv.QRCodeEncoder.create [ARG QRCodeEncoder_Params parameters=QRCodeEncoder::Params()]>

--- Incoming ---
[   'cv.QRCodeEncoder.encode',
    'void',
    ['/V', '/PV'],
    [   ['String', 'encoded_info', '', ['/C', '/Ref']],
        ['Mat', 'qrcode', '', ['/O']]],
    'void']
ok: FUNC <void cv.QRCodeEncoder.encode [ARG String encoded_info=, ARG Mat qrcode=]>

--- Incoming ---
[   'cv.QRCodeEncoder.encodeStructuredAppend',
    'void',
    ['/V', '/PV'],
    [   ['String', 'encoded_info', '', ['/C', '/Ref']],
        ['vector_Mat', 'qrcodes', '', ['/O']]],
    'void']
ok: FUNC <void cv.QRCodeEncoder.encodeStructuredAppend [ARG String encoded_info=, ARG vector_Mat qrcodes=]>

--- Incoming ---
[   'class cv.QRCodeDetector',
    ': cv::GraphicalCodeDetector',
    ['/Simple'],
    [],
    None]
ok: class CLASS cv::.QRCodeDetector : GraphicalCodeDetector, name: QRCodeDetector, base: GraphicalCodeDetector

--- Incoming ---
['cv.QRCodeDetector.QRCodeDetector', '', [], [], None]
ok: FUNC < cv.QRCodeDetector.QRCodeDetector []>

--- Incoming ---
[   'cv.QRCodeDetector.setEpsX',
    'QRCodeDetector',
    [],
    [['double', 'epsX', '', []]],
    'QRCodeDetector']
ok: FUNC <QRCodeDetector cv.QRCodeDetector.setEpsX [ARG double epsX=]>

--- Incoming ---
[   'cv.QRCodeDetector.setEpsY',
    'QRCodeDetector',
    [],
    [['double', 'epsY', '', []]],
    'QRCodeDetector']
ok: FUNC <QRCodeDetector cv.QRCodeDetector.setEpsY [ARG double epsY=]>

--- Incoming ---
[   'cv.QRCodeDetector.setUseAlignmentMarkers',
    'QRCodeDetector',
    [],
    [['bool', 'useAlignmentMarkers', '', []]],
    'QRCodeDetector']
ok: FUNC <QRCodeDetector cv.QRCodeDetector.setUseAlignmentMarkers [ARG bool useAlignmentMarkers=]>

--- Incoming ---
[   'cv.QRCodeDetector.decodeCurved',
    'String',
    [],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', '', []],
        ['Mat', 'straight_qrcode', 'Mat()', ['/O']]],
    'cv::String']
ok: FUNC <String cv.QRCodeDetector.decodeCurved [ARG Mat img=, ARG Mat points=, ARG Mat straight_qrcode=Mat()]>

--- Incoming ---
[   'cv.QRCodeDetector.detectAndDecodeCurved',
    'string',
    [],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', 'Mat()', ['/O']],
        ['Mat', 'straight_qrcode', 'Mat()', ['/O']]],
    'std::string']
ok: FUNC <string cv.QRCodeDetector.detectAndDecodeCurved [ARG Mat img=, ARG Mat points=Mat(), ARG Mat straight_qrcode=Mat()]>

--- Incoming ---
[   'class cv.QRCodeDetectorAruco',
    ': cv::GraphicalCodeDetector',
    ['/Simple'],
    [],
    None]
ok: class CLASS cv::.QRCodeDetectorAruco : GraphicalCodeDetector, name: QRCodeDetectorAruco, base: GraphicalCodeDetector

--- Incoming ---
['cv.QRCodeDetectorAruco.QRCodeDetectorAruco', '', [], [], None]
ok: FUNC < cv.QRCodeDetectorAruco.QRCodeDetectorAruco []>

--- Incoming ---
[   'struct cv.QRCodeDetectorAruco.Params',
    '',
    ['/Simple'],
    [   ['float', 'minModuleSizeInPyramid', '', ['/RW']],
        ['float', 'maxRotation', '', ['/RW']],
        ['float', 'maxModuleSizeMismatch', '', ['/RW']],
        ['float', 'maxTimingPatternMismatch', '', ['/RW']],
        ['float', 'maxPenalties', '', ['/RW']],
        ['float', 'maxColorsMismatch', '', ['/RW']],
        ['float', 'scaleTimingPatternScore', '', ['/RW']]],
    None]
ok: class CLASS cv::QRCodeDetectorAruco.QRCodeDetectorAruco_Params : , name: QRCodeDetectorAruco_Params, base: 

--- Incoming ---
['cv.QRCodeDetectorAruco.Params.Params', '', [], [], None]
ok: FUNC < cv.QRCodeDetectorAruco.Params.QRCodeDetectorAruco_Params []>

--- Incoming ---
[   'cv.QRCodeDetectorAruco.QRCodeDetectorAruco',
    '',
    [],
    [['QRCodeDetectorAruco_Params', 'params', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.QRCodeDetectorAruco.QRCodeDetectorAruco [ARG QRCodeDetectorAruco_Params params=]>

--- Incoming ---
[   'cv.QRCodeDetectorAruco.getDetectorParameters',
    'QRCodeDetectorAruco_Params',
    ['/C'],
    [],
    'QRCodeDetectorAruco::Params']
ok: FUNC <QRCodeDetectorAruco_Params cv.QRCodeDetectorAruco.getDetectorParameters []>

--- Incoming ---
[   'cv.QRCodeDetectorAruco.setDetectorParameters',
    'QRCodeDetectorAruco',
    [],
    [['QRCodeDetectorAruco_Params', 'params', '', ['/C', '/Ref']]],
    'QRCodeDetectorAruco']
ok: FUNC <QRCodeDetectorAruco cv.QRCodeDetectorAruco.setDetectorParameters [ARG QRCodeDetectorAruco_Params params=]>

--- Incoming ---
[   'cv.QRCodeDetectorAruco.getArucoParameters',
    'aruco_DetectorParameters',
    ['/C'],
    [],
    'aruco::DetectorParameters']
ok: FUNC <aruco_DetectorParameters cv.QRCodeDetectorAruco.getArucoParameters []>

--- Incoming ---
[   'cv.QRCodeDetectorAruco.setArucoParameters',
    'void',
    [],
    [['aruco_DetectorParameters', 'params', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.QRCodeDetectorAruco.setArucoParameters [ARG aruco_DetectorParameters params=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/face.hpp =====
Namespaces: ['cv']

--- Incoming ---
['class cv.FaceDetectorYN', '', [], [], None]
ok: class CLASS cv::.FaceDetectorYN : , name: FaceDetectorYN, base: 

--- Incoming ---
[   'cv.FaceDetectorYN.setInputSize',
    'void',
    ['/V', '/PV'],
    [['Size', 'input_size', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.FaceDetectorYN.setInputSize [ARG Size input_size=]>

--- Incoming ---
['cv.FaceDetectorYN.getInputSize', 'Size', ['/V', '/PV'], [], 'Size']
ok: FUNC <Size cv.FaceDetectorYN.getInputSize []>

--- Incoming ---
[   'cv.FaceDetectorYN.setScoreThreshold',
    'void',
    ['/V', '/PV'],
    [['float', 'score_threshold', '', []]],
    'void']
ok: FUNC <void cv.FaceDetectorYN.setScoreThreshold [ARG float score_threshold=]>

--- Incoming ---
['cv.FaceDetectorYN.getScoreThreshold', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.FaceDetectorYN.getScoreThreshold []>

--- Incoming ---
[   'cv.FaceDetectorYN.setNMSThreshold',
    'void',
    ['/V', '/PV'],
    [['float', 'nms_threshold', '', []]],
    'void']
ok: FUNC <void cv.FaceDetectorYN.setNMSThreshold [ARG float nms_threshold=]>

--- Incoming ---
['cv.FaceDetectorYN.getNMSThreshold', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.FaceDetectorYN.getNMSThreshold []>

--- Incoming ---
[   'cv.FaceDetectorYN.setTopK',
    'void',
    ['/V', '/PV'],
    [['int', 'top_k', '', []]],
    'void']
ok: FUNC <void cv.FaceDetectorYN.setTopK [ARG int top_k=]>

--- Incoming ---
['cv.FaceDetectorYN.getTopK', 'int', ['/V', '/PV'], [], 'int']
ok: FUNC <int cv.FaceDetectorYN.getTopK []>

--- Incoming ---
[   'cv.FaceDetectorYN.detect',
    'int',
    ['/V', '/PV'],
    [['Mat', 'image', '', []], ['Mat', 'faces', '', ['/O']]],
    'int']
ok: FUNC <int cv.FaceDetectorYN.detect [ARG Mat image=, ARG Mat faces=]>

--- Incoming ---
[   'cv.FaceDetectorYN.create',
    'Ptr_FaceDetectorYN',
    ['/S'],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '', ['/PATH', '/C', '/Ref']],
        ['Size', 'input_size', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '0.9f', []],
        ['float', 'nms_threshold', '0.3f', []],
        ['int', 'top_k', '5000', []],
        ['int', 'backend_id', '0', []],
        ['int', 'target_id', '0', []]],
    'Ptr<FaceDetectorYN>']
ok: FUNC <Ptr_FaceDetectorYN cv.FaceDetectorYN.create [ARG String model=, ARG String config=, ARG Size input_size=, ARG float score_threshold=0.9f, ARG float nms_threshold=0.3f, ARG int top_k=5000, ARG int backend_id=0, ARG int target_id=0]>

--- Incoming ---
[   'cv.FaceDetectorYN.create',
    'Ptr_FaceDetectorYN',
    ['/S'],
    [   ['String', 'framework', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferModel', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferConfig', '', ['/C', '/Ref']],
        ['Size', 'input_size', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '0.9f', []],
        ['float', 'nms_threshold', '0.3f', []],
        ['int', 'top_k', '5000', []],
        ['int', 'backend_id', '0', []],
        ['int', 'target_id', '0', []]],
    'Ptr<FaceDetectorYN>']
ok: FUNC <Ptr_FaceDetectorYN cv.FaceDetectorYN.create [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=, ARG Size input_size=, ARG float score_threshold=0.9f, ARG float nms_threshold=0.3f, ARG int top_k=5000, ARG int backend_id=0, ARG int target_id=0]>

--- Incoming ---
['class cv.FaceRecognizerSF', '', [], [], None]
ok: class CLASS cv::.FaceRecognizerSF : , name: FaceRecognizerSF, base: 

--- Incoming ---
[   'enum cv.FaceRecognizerSF.DisType',
    '',
    [],
    [   ['const cv.FaceRecognizerSF.FR_COSINE', '0', [], [], None, ''],
        ['const cv.FaceRecognizerSF.FR_NORM_L2', '1', [], [], None, '']],
    None]
ok: CONST FR_COSINE=0
ok: CONST FR_NORM_L2=1

--- Incoming ---
[   'cv.FaceRecognizerSF.alignCrop',
    'void',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'src_img', '', []],
        ['Mat', 'face_box', '', []],
        ['Mat', 'aligned_img', '', ['/O']]],
    'void']
ok: FUNC <void cv.FaceRecognizerSF.alignCrop [ARG Mat src_img=, ARG Mat face_box=, ARG Mat aligned_img=]>

--- Incoming ---
[   'cv.FaceRecognizerSF.feature',
    'void',
    ['/V', '/PV'],
    [['Mat', 'aligned_img', '', []], ['Mat', 'face_feature', '', ['/O']]],
    'void']
ok: FUNC <void cv.FaceRecognizerSF.feature [ARG Mat aligned_img=, ARG Mat face_feature=]>

--- Incoming ---
[   'cv.FaceRecognizerSF.match',
    'double',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'face_feature1', '', []],
        ['Mat', 'face_feature2', '', []],
        ['int', 'dis_type', 'FaceRecognizerSF::FR_COSINE', []]],
    'double']
ok: FUNC <double cv.FaceRecognizerSF.match [ARG Mat face_feature1=, ARG Mat face_feature2=, ARG int dis_type=FaceRecognizerSF::FR_COSINE]>

--- Incoming ---
[   'cv.FaceRecognizerSF.create',
    'Ptr_FaceRecognizerSF',
    ['/S'],
    [   ['String', 'model', '', ['/PATH', '/C', '/Ref']],
        ['String', 'config', '', ['/PATH', '/C', '/Ref']],
        ['int', 'backend_id', '0', []],
        ['int', 'target_id', '0', []]],
    'Ptr<FaceRecognizerSF>']
ok: FUNC <Ptr_FaceRecognizerSF cv.FaceRecognizerSF.create [ARG String model=, ARG String config=, ARG int backend_id=0, ARG int target_id=0]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_detector.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
[   'enum cv.aruco.CornerRefineMethod',
    '',
    [],
    [   ['const cv.aruco.CORNER_REFINE_NONE', '0', [], [], None, ''],
        ['const cv.aruco.CORNER_REFINE_SUBPIX', '1', [], [], None, ''],
        ['const cv.aruco.CORNER_REFINE_CONTOUR', '2', [], [], None, ''],
        ['const cv.aruco.CORNER_REFINE_APRILTAG', '3', [], [], None, '']],
    None]
ok: CONST CORNER_REFINE_NONE=0
ok: CONST CORNER_REFINE_SUBPIX=1
ok: CONST CORNER_REFINE_CONTOUR=2
ok: CONST CORNER_REFINE_APRILTAG=3

--- Incoming ---
[   'struct cv.aruco.DetectorParameters',
    '',
    ['/Simple'],
    [   ['int', 'adaptiveThreshWinSizeMin', '', ['/RW']],
        ['int', 'adaptiveThreshWinSizeMax', '', ['/RW']],
        ['int', 'adaptiveThreshWinSizeStep', '', ['/RW']],
        ['double', 'adaptiveThreshConstant', '', ['/RW']],
        ['double', 'minMarkerPerimeterRate', '', ['/RW']],
        ['double', 'maxMarkerPerimeterRate', '', ['/RW']],
        ['double', 'polygonalApproxAccuracyRate', '', ['/RW']],
        ['double', 'minCornerDistanceRate', '', ['/RW']],
        ['int', 'minDistanceToBorder', '', ['/RW']],
        ['double', 'minMarkerDistanceRate', '', ['/RW']],
        ['float', 'minGroupDistance', ' 0.21f', ['/RW']],
        ['int', 'cornerRefinementMethod', '', ['/RW']],
        ['int', 'cornerRefinementWinSize', '', ['/RW']],
        ['float', 'relativeCornerRefinmentWinSize', '', ['/RW']],
        ['int', 'cornerRefinementMaxIterations', '', ['/RW']],
        ['double', 'cornerRefinementMinAccuracy', '', ['/RW']],
        ['int', 'markerBorderBits', '', ['/RW']],
        ['int', 'perspectiveRemovePixelPerCell', '', ['/RW']],
        ['double', 'perspectiveRemoveIgnoredMarginPerCell', '', ['/RW']],
        ['double', 'maxErroneousBitsInBorderRate', '', ['/RW']],
        ['double', 'minOtsuStdDev', '', ['/RW']],
        ['double', 'errorCorrectionRate', '', ['/RW']],
        ['float', 'aprilTagQuadDecimate', '', ['/RW']],
        ['float', 'aprilTagQuadSigma', '', ['/RW']],
        ['int', 'aprilTagMinClusterPixels', '', ['/RW']],
        ['int', 'aprilTagMaxNmaxima', '', ['/RW']],
        ['float', 'aprilTagCriticalRad', '', ['/RW']],
        ['float', 'aprilTagMaxLineFitMse', '', ['/RW']],
        ['int', 'aprilTagMinWhiteBlackDiff', '', ['/RW']],
        ['int', 'aprilTagDeglitch', '', ['/RW']],
        ['bool', 'detectInvertedMarker', '', ['/RW']],
        ['bool', 'useAruco3Detection', '', ['/RW']],
        ['int', 'minSideLengthCanonicalImg', '', ['/RW']],
        ['float', 'minMarkerLengthRatioOriginalImg', '', ['/RW']]],
    None]
ok: class CLASS cv.aruco::.DetectorParameters : , name: DetectorParameters, base: 

--- Incoming ---
['cv.aruco.DetectorParameters.DetectorParameters', '', [], [], None]
ok: FUNC < cv.aruco.DetectorParameters.DetectorParameters []>

--- Incoming ---
[   'cv.aruco.DetectorParameters.readDetectorParameters',
    'bool',
    [],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.aruco.DetectorParameters.readDetectorParameters [ARG FileNode fn=]>

--- Incoming ---
[   'cv.aruco.DetectorParameters.writeDetectorParameters',
    'bool',
    [],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.aruco.DetectorParameters.writeDetectorParameters [ARG FileStorage fs=, ARG String name=String()]>

--- Incoming ---
[   'struct cv.aruco.RefineParameters',
    '',
    ['/Simple'],
    [   ['float', 'minRepDistance', '', ['/RW']],
        ['float', 'errorCorrectionRate', '', ['/RW']],
        ['bool', 'checkAllOrders', '', ['/RW']]],
    None]
ok: class CLASS cv.aruco::.RefineParameters : , name: RefineParameters, base: 

--- Incoming ---
[   'cv.aruco.RefineParameters.RefineParameters',
    '',
    [],
    [   ['float', 'minRepDistance', '10.f', []],
        ['float', 'errorCorrectionRate', '3.f', []],
        ['bool', 'checkAllOrders', 'true', []]],
    None]
ok: FUNC < cv.aruco.RefineParameters.RefineParameters [ARG float minRepDistance=10.f, ARG float errorCorrectionRate=3.f, ARG bool checkAllOrders=true]>

--- Incoming ---
[   'cv.aruco.RefineParameters.readRefineParameters',
    'bool',
    [],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.aruco.RefineParameters.readRefineParameters [ARG FileNode fn=]>

--- Incoming ---
[   'cv.aruco.RefineParameters.writeRefineParameters',
    'bool',
    [],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.aruco.RefineParameters.writeRefineParameters [ARG FileStorage fs=, ARG String name=String()]>

--- Incoming ---
['class cv.aruco.ArucoDetector', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.aruco::.ArucoDetector : Algorithm, name: ArucoDetector, base: Algorithm

--- Incoming ---
[   'cv.aruco.ArucoDetector.ArucoDetector',
    '',
    [],
    [   [   'Dictionary',
            'dictionary',
            'getPredefinedDictionary(cv::aruco::DICT_4X4_50)',
            ['/C', '/Ref']],
        [   'DetectorParameters',
            'detectorParams',
            'DetectorParameters()',
            ['/C', '/Ref']],
        [   'RefineParameters',
            'refineParams',
            'RefineParameters()',
            ['/C', '/Ref']]],
    None]
ok: FUNC < cv.aruco.ArucoDetector.ArucoDetector [ARG Dictionary dictionary=getPredefinedDictionary(cv::aruco::DICT_4X4_50), ARG DetectorParameters detectorParams=DetectorParameters(), ARG RefineParameters refineParams=RefineParameters()]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.detectMarkers',
    'void',
    ['/C'],
    [   ['Mat', 'image', '', []],
        ['vector_Mat', 'corners', '', ['/O']],
        ['Mat', 'ids', '', ['/O']],
        ['vector_Mat', 'rejectedImgPoints', 'vector_Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.detectMarkers [ARG Mat image=, ARG vector_Mat corners=, ARG Mat ids=, ARG vector_Mat rejectedImgPoints=vector_Mat()]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.refineDetectedMarkers',
    'void',
    ['/C'],
    [   ['Mat', 'image', '', []],
        ['Board', 'board', '', ['/C', '/Ref']],
        ['vector_Mat', 'detectedCorners', '', ['/IO']],
        ['Mat', 'detectedIds', '', ['/IO']],
        ['vector_Mat', 'rejectedCorners', '', ['/IO']],
        ['Mat', 'cameraMatrix', 'Mat()', []],
        ['Mat', 'distCoeffs', 'Mat()', []],
        ['Mat', 'recoveredIdxs', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.refineDetectedMarkers [ARG Mat image=, ARG Board board=, ARG vector_Mat detectedCorners=, ARG Mat detectedIds=, ARG vector_Mat rejectedCorners=, ARG Mat cameraMatrix=Mat(), ARG Mat distCoeffs=Mat(), ARG Mat recoveredIdxs=Mat()]>

--- Incoming ---
['cv.aruco.ArucoDetector.getDictionary', 'Dictionary', ['/C'], [], 'Dictionary']
ok: FUNC <Dictionary cv.aruco.ArucoDetector.getDictionary []>

--- Incoming ---
[   'cv.aruco.ArucoDetector.setDictionary',
    'void',
    [],
    [['Dictionary', 'dictionary', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.setDictionary [ARG Dictionary dictionary=]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.getDetectorParameters',
    'DetectorParameters',
    ['/C'],
    [],
    'DetectorParameters']
ok: FUNC <DetectorParameters cv.aruco.ArucoDetector.getDetectorParameters []>

--- Incoming ---
[   'cv.aruco.ArucoDetector.setDetectorParameters',
    'void',
    [],
    [['DetectorParameters', 'detectorParameters', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.setDetectorParameters [ARG DetectorParameters detectorParameters=]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.getRefineParameters',
    'RefineParameters',
    ['/C'],
    [],
    'RefineParameters']
ok: FUNC <RefineParameters cv.aruco.ArucoDetector.getRefineParameters []>

--- Incoming ---
[   'cv.aruco.ArucoDetector.setRefineParameters',
    'void',
    [],
    [['RefineParameters', 'refineParameters', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.setRefineParameters [ARG RefineParameters refineParameters=]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.write',
    'void',
    [],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.write [ARG FileStorage fs=, ARG String name=]>

--- Incoming ---
[   'cv.aruco.ArucoDetector.read',
    'void',
    ['/V'],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.ArucoDetector.read [ARG FileNode fn=]>

--- Incoming ---
[   'cv.aruco.drawDetectedMarkers',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['vector_Mat', 'corners', '', []],
        ['Mat', 'ids', 'Mat()', []],
        ['Scalar', 'borderColor', 'Scalar(0, 255, 0)', []]],
    'void']
ok: FUNC <void cv.aruco..drawDetectedMarkers [ARG Mat image=, ARG vector_Mat corners=, ARG Mat ids=Mat(), ARG Scalar borderColor=Scalar(0, 255, 0)]>

--- Incoming ---
[   'cv.aruco.generateImageMarker',
    'void',
    [],
    [   ['Dictionary', 'dictionary', '', ['/C', '/Ref']],
        ['int', 'id', '', []],
        ['int', 'sidePixels', '', []],
        ['Mat', 'img', '', ['/O']],
        ['int', 'borderBits', '1', []]],
    'void']
ok: FUNC <void cv.aruco..generateImageMarker [ARG Dictionary dictionary=, ARG int id=, ARG int sidePixels=, ARG Mat img=, ARG int borderBits=1]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
[   'enum cv.DetectionBasedTracker.ObjectStatus',
    '',
    [],
    [   [   'const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET',
            '0',
            [],
            [],
            None,
            ''],
        ['const cv.DetectionBasedTracker.DETECTED', '1', [], [], None, ''],
        [   'const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST',
            '2',
            [],
            [],
            None,
            ''],
        ['const cv.DetectionBasedTracker.WRONG_OBJECT', '3', [], [], None, '']],
    None]
class not found: CONST DETECTED_NOT_SHOWN_YET=0
ok: CONST DetectionBasedTracker_DETECTED_NOT_SHOWN_YET=0
class not found: CONST DETECTED=1
ok: CONST DetectionBasedTracker_DETECTED=1
class not found: CONST DETECTED_TEMPORARY_LOST=2
ok: CONST DetectionBasedTracker_DETECTED_TEMPORARY_LOST=2
class not found: CONST WRONG_OBJECT=3
ok: CONST DetectionBasedTracker_WRONG_OBJECT=3


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/charuco_detector.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
[   'struct cv.aruco.CharucoParameters',
    '',
    ['/Simple'],
    [   ['Mat', 'cameraMatrix', '', ['/RW']],
        ['Mat', 'distCoeffs', '', ['/RW']],
        ['int', 'minMarkers', '', ['/RW']],
        ['bool', 'tryRefineMarkers', '', ['/RW']]],
    None]
ok: class CLASS cv.aruco::.CharucoParameters : , name: CharucoParameters, base: 

--- Incoming ---
['cv.aruco.CharucoParameters.CharucoParameters', '', [], [], None]
ok: FUNC < cv.aruco.CharucoParameters.CharucoParameters []>

--- Incoming ---
['class cv.aruco.CharucoDetector', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.aruco::.CharucoDetector : Algorithm, name: CharucoDetector, base: Algorithm

--- Incoming ---
[   'cv.aruco.CharucoDetector.CharucoDetector',
    '',
    [],
    [   ['CharucoBoard', 'board', '', ['/C', '/Ref']],
        [   'CharucoParameters',
            'charucoParams',
            'CharucoParameters()',
            ['/C', '/Ref']],
        [   'DetectorParameters',
            'detectorParams',
            'DetectorParameters()',
            ['/C', '/Ref']],
        [   'RefineParameters',
            'refineParams',
            'RefineParameters()',
            ['/C', '/Ref']]],
    None]
ok: FUNC < cv.aruco.CharucoDetector.CharucoDetector [ARG CharucoBoard board=, ARG CharucoParameters charucoParams=CharucoParameters(), ARG DetectorParameters detectorParams=DetectorParameters(), ARG RefineParameters refineParams=RefineParameters()]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.getBoard',
    'CharucoBoard',
    ['/C'],
    [],
    'CharucoBoard']
ok: FUNC <CharucoBoard cv.aruco.CharucoDetector.getBoard []>

--- Incoming ---
[   'cv.aruco.CharucoDetector.setBoard',
    'void',
    [],
    [['CharucoBoard', 'board', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.setBoard [ARG CharucoBoard board=]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.getCharucoParameters',
    'CharucoParameters',
    ['/C'],
    [],
    'CharucoParameters']
ok: FUNC <CharucoParameters cv.aruco.CharucoDetector.getCharucoParameters []>

--- Incoming ---
[   'cv.aruco.CharucoDetector.setCharucoParameters',
    'void',
    [],
    [['CharucoParameters', 'charucoParameters', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.setCharucoParameters [ARG CharucoParameters charucoParameters=]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.getDetectorParameters',
    'DetectorParameters',
    ['/C'],
    [],
    'DetectorParameters']
ok: FUNC <DetectorParameters cv.aruco.CharucoDetector.getDetectorParameters []>

--- Incoming ---
[   'cv.aruco.CharucoDetector.setDetectorParameters',
    'void',
    [],
    [['DetectorParameters', 'detectorParameters', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.setDetectorParameters [ARG DetectorParameters detectorParameters=]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.getRefineParameters',
    'RefineParameters',
    ['/C'],
    [],
    'RefineParameters']
ok: FUNC <RefineParameters cv.aruco.CharucoDetector.getRefineParameters []>

--- Incoming ---
[   'cv.aruco.CharucoDetector.setRefineParameters',
    'void',
    [],
    [['RefineParameters', 'refineParameters', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.setRefineParameters [ARG RefineParameters refineParameters=]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.detectBoard',
    'void',
    ['/C'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'charucoCorners', '', ['/O']],
        ['Mat', 'charucoIds', '', ['/O']],
        ['vector_Mat', 'markerCorners', 'vector_Mat()', ['/IO']],
        ['Mat', 'markerIds', 'Mat()', ['/IO']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.detectBoard [ARG Mat image=, ARG Mat charucoCorners=, ARG Mat charucoIds=, ARG vector_Mat markerCorners=vector_Mat(), ARG Mat markerIds=Mat()]>

--- Incoming ---
[   'cv.aruco.CharucoDetector.detectDiamonds',
    'void',
    ['/C'],
    [   ['Mat', 'image', '', []],
        ['vector_Mat', 'diamondCorners', '', ['/O']],
        ['Mat', 'diamondIds', '', ['/O']],
        ['vector_Mat', 'markerCorners', 'vector_Mat()', ['/IO']],
        ['Mat', 'markerIds', 'Mat()', ['/IO']]],
    'void']
ok: FUNC <void cv.aruco.CharucoDetector.detectDiamonds [ARG Mat image=, ARG vector_Mat diamondCorners=, ARG Mat diamondIds=, ARG vector_Mat markerCorners=vector_Mat(), ARG Mat markerIds=Mat()]>

--- Incoming ---
[   'cv.aruco.drawDetectedCornersCharuco',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Mat', 'charucoCorners', '', []],
        ['Mat', 'charucoIds', 'Mat()', []],
        ['Scalar', 'cornerColor', 'Scalar(255, 0, 0)', []]],
    'void']
ok: FUNC <void cv.aruco..drawDetectedCornersCharuco [ARG Mat image=, ARG Mat charucoCorners=, ARG Mat charucoIds=Mat(), ARG Scalar cornerColor=Scalar(255, 0, 0)]>

--- Incoming ---
[   'cv.aruco.drawDetectedDiamonds',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['vector_Mat', 'diamondCorners', '', []],
        ['Mat', 'diamondIds', 'Mat()', []],
        ['Scalar', 'borderColor', 'Scalar(0, 0, 255)', []]],
    'void']
ok: FUNC <void cv.aruco..drawDetectedDiamonds [ARG Mat image=, ARG vector_Mat diamondCorners=, ARG Mat diamondIds=Mat(), ARG Scalar borderColor=Scalar(0, 0, 255)]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/graphical_code_detector.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
['class cv.GraphicalCodeDetector', '', ['/Simple'], [], None]
ok: class CLASS cv::.GraphicalCodeDetector : , name: GraphicalCodeDetector, base: 

--- Incoming ---
[   'cv.GraphicalCodeDetector.detect',
    'bool',
    ['/C'],
    [['Mat', 'img', '', []], ['Mat', 'points', '', ['/O']]],
    'bool']
ok: FUNC <bool cv.GraphicalCodeDetector.detect [ARG Mat img=, ARG Mat points=]>

--- Incoming ---
[   'cv.GraphicalCodeDetector.decode',
    'string',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', '', []],
        ['Mat', 'straight_code', 'Mat()', ['/O']]],
    'std::string']
ok: FUNC <string cv.GraphicalCodeDetector.decode [ARG Mat img=, ARG Mat points=, ARG Mat straight_code=Mat()]>

--- Incoming ---
[   'cv.GraphicalCodeDetector.detectAndDecode',
    'string',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', 'Mat()', ['/O']],
        ['Mat', 'straight_code', 'Mat()', ['/O']]],
    'std::string']
ok: FUNC <string cv.GraphicalCodeDetector.detectAndDecode [ARG Mat img=, ARG Mat points=Mat(), ARG Mat straight_code=Mat()]>

--- Incoming ---
[   'cv.GraphicalCodeDetector.detectMulti',
    'bool',
    ['/C'],
    [['Mat', 'img', '', []], ['Mat', 'points', '', ['/O']]],
    'bool']
ok: FUNC <bool cv.GraphicalCodeDetector.detectMulti [ARG Mat img=, ARG Mat points=]>

--- Incoming ---
[   'cv.GraphicalCodeDetector.decodeMulti',
    'bool',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', '', []],
        ['vector_string', 'decoded_info', '', ['/O', '/Ref']],
        ['vector_Mat', 'straight_code', 'vector_Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.GraphicalCodeDetector.decodeMulti [ARG Mat img=, ARG Mat points=, ARG vector_string decoded_info=, ARG vector_Mat straight_code=vector_Mat()]>

--- Incoming ---
[   'cv.GraphicalCodeDetector.detectAndDecodeMulti',
    'bool',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['vector_string', 'decoded_info', '', ['/O', '/Ref']],
        ['Mat', 'points', 'Mat()', ['/O']],
        ['vector_Mat', 'straight_code', 'vector_Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.GraphicalCodeDetector.detectAndDecodeMulti [ARG Mat img=, ARG vector_string decoded_info=, ARG Mat points=Mat(), ARG vector_Mat straight_code=vector_Mat()]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_dictionary.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
[   'class cv.aruco.Dictionary',
    '',
    ['/Simple'],
    [   ['Mat', 'bytesList', '', ['/RW']],
        ['int', 'markerSize', '', ['/RW']],
        ['int', 'maxCorrectionBits', '', ['/RW']]],
    None]
ok: class CLASS cv.aruco::.Dictionary : , name: Dictionary, base: 

--- Incoming ---
['cv.aruco.Dictionary.Dictionary', '', [], [], None]
ok: FUNC < cv.aruco.Dictionary.Dictionary []>

--- Incoming ---
[   'cv.aruco.Dictionary.Dictionary',
    '',
    [],
    [   ['Mat', 'bytesList', '', ['/C', '/Ref']],
        ['int', '_markerSize', '', []],
        ['int', 'maxcorr', '0', []]],
    None]
ok: FUNC < cv.aruco.Dictionary.Dictionary [ARG Mat bytesList=, ARG int _markerSize=, ARG int maxcorr=0]>

--- Incoming ---
[   'cv.aruco.Dictionary.readDictionary',
    'bool',
    [],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.aruco.Dictionary.readDictionary [ARG FileNode fn=]>

--- Incoming ---
[   'cv.aruco.Dictionary.writeDictionary',
    'void',
    [],
    [   ['FileStorage', 'fs', '', ['/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.aruco.Dictionary.writeDictionary [ARG FileStorage fs=, ARG String name=String()]>

--- Incoming ---
[   'cv.aruco.Dictionary.identify',
    'bool',
    ['/C'],
    [   ['Mat', 'onlyBits', '', ['/C', '/Ref']],
        ['int', 'idx', '', ['/O', '/Ref']],
        ['int', 'rotation', '', ['/O', '/Ref']],
        ['double', 'maxCorrectionRate', '', []]],
    'bool']
ok: FUNC <bool cv.aruco.Dictionary.identify [ARG Mat onlyBits=, ARG int idx=, ARG int rotation=, ARG double maxCorrectionRate=]>

--- Incoming ---
[   'cv.aruco.Dictionary.getDistanceToId',
    'int',
    ['/C'],
    [   ['Mat', 'bits', '', []],
        ['int', 'id', '', []],
        ['bool', 'allRotations', 'true', []]],
    'int']
ok: FUNC <int cv.aruco.Dictionary.getDistanceToId [ARG Mat bits=, ARG int id=, ARG bool allRotations=true]>

--- Incoming ---
[   'cv.aruco.Dictionary.generateImageMarker',
    'void',
    ['/C'],
    [   ['int', 'id', '', []],
        ['int', 'sidePixels', '', []],
        ['Mat', '_img', '', ['/O']],
        ['int', 'borderBits', '1', []]],
    'void']
ok: FUNC <void cv.aruco.Dictionary.generateImageMarker [ARG int id=, ARG int sidePixels=, ARG Mat _img=, ARG int borderBits=1]>

--- Incoming ---
[   'cv.aruco.Dictionary.getByteListFromBits',
    'Mat',
    ['/S'],
    [['Mat', 'bits', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.aruco.Dictionary.getByteListFromBits [ARG Mat bits=]>

--- Incoming ---
[   'cv.aruco.Dictionary.getBitsFromByteList',
    'Mat',
    ['/S'],
    [['Mat', 'byteList', '', ['/C', '/Ref']], ['int', 'markerSize', '', []]],
    'Mat']
ok: FUNC <Mat cv.aruco.Dictionary.getBitsFromByteList [ARG Mat byteList=, ARG int markerSize=]>

--- Incoming ---
[   'enum cv.aruco.PredefinedDictionaryType',
    '',
    [],
    [   ['const cv.aruco.DICT_4X4_50', '0', [], [], None, ''],
        ['const cv.aruco.DICT_4X4_100', '0+1', [], [], None, ''],
        ['const cv.aruco.DICT_4X4_250', '0+2', [], [], None, ''],
        ['const cv.aruco.DICT_4X4_1000', '0+3', [], [], None, ''],
        ['const cv.aruco.DICT_5X5_50', '0+4', [], [], None, ''],
        ['const cv.aruco.DICT_5X5_100', '0+5', [], [], None, ''],
        ['const cv.aruco.DICT_5X5_250', '0+6', [], [], None, ''],
        ['const cv.aruco.DICT_5X5_1000', '0+7', [], [], None, ''],
        ['const cv.aruco.DICT_6X6_50', '0+8', [], [], None, ''],
        ['const cv.aruco.DICT_6X6_100', '0+9', [], [], None, ''],
        ['const cv.aruco.DICT_6X6_250', '0+10', [], [], None, ''],
        ['const cv.aruco.DICT_6X6_1000', '0+11', [], [], None, ''],
        ['const cv.aruco.DICT_7X7_50', '0+12', [], [], None, ''],
        ['const cv.aruco.DICT_7X7_100', '0+13', [], [], None, ''],
        ['const cv.aruco.DICT_7X7_250', '0+14', [], [], None, ''],
        ['const cv.aruco.DICT_7X7_1000', '0+15', [], [], None, ''],
        ['const cv.aruco.DICT_ARUCO_ORIGINAL', '0+16', [], [], None, ''],
        ['const cv.aruco.DICT_APRILTAG_16h5', '0+17', [], [], None, ''],
        ['const cv.aruco.DICT_APRILTAG_25h9', '0+18', [], [], None, ''],
        ['const cv.aruco.DICT_APRILTAG_36h10', '0+19', [], [], None, ''],
        ['const cv.aruco.DICT_APRILTAG_36h11', '0+20', [], [], None, ''],
        ['const cv.aruco.DICT_ARUCO_MIP_36h12', '0+21', [], [], None, '']],
    None]
ok: CONST DICT_4X4_50=0
ok: CONST DICT_4X4_100=0+1
ok: CONST DICT_4X4_250=0+2
ok: CONST DICT_4X4_1000=0+3
ok: CONST DICT_5X5_50=0+4
ok: CONST DICT_5X5_100=0+5
ok: CONST DICT_5X5_250=0+6
ok: CONST DICT_5X5_1000=0+7
ok: CONST DICT_6X6_50=0+8
ok: CONST DICT_6X6_100=0+9
ok: CONST DICT_6X6_250=0+10
ok: CONST DICT_6X6_1000=0+11
ok: CONST DICT_7X7_50=0+12
ok: CONST DICT_7X7_100=0+13
ok: CONST DICT_7X7_250=0+14
ok: CONST DICT_7X7_1000=0+15
ok: CONST DICT_ARUCO_ORIGINAL=0+16
ok: CONST DICT_APRILTAG_16h5=0+17
ok: CONST DICT_APRILTAG_25h9=0+18
ok: CONST DICT_APRILTAG_36h10=0+19
ok: CONST DICT_APRILTAG_36h11=0+20
ok: CONST DICT_ARUCO_MIP_36h12=0+21

--- Incoming ---
[   'cv.aruco.getPredefinedDictionary',
    'Dictionary',
    [],
    [['int', 'dict', '', []]],
    'Dictionary']
ok: FUNC <Dictionary cv.aruco..getPredefinedDictionary [ARG int dict=]>

--- Incoming ---
[   'cv.aruco.extendDictionary',
    'Dictionary',
    [],
    [   ['int', 'nMarkers', '', []],
        ['int', 'markerSize', '', []],
        ['Dictionary', 'baseDictionary', 'Dictionary()', ['/C', '/Ref']],
        ['int', 'randomSeed', '0', []]],
    'Dictionary']
ok: FUNC <Dictionary cv.aruco..extendDictionary [ARG int nMarkers=, ARG int markerSize=, ARG Dictionary baseDictionary=Dictionary(), ARG int randomSeed=0]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/aruco_board.hpp =====
Namespaces: ['cv', 'cv.aruco']

--- Incoming ---
['class cv.aruco.Board', '', ['/Simple'], [], None]
ok: class CLASS cv.aruco::.Board : , name: Board, base: 

--- Incoming ---
[   'cv.aruco.Board.Board',
    '',
    [],
    [   ['vector_Mat', 'objPoints', '', []],
        ['Dictionary', 'dictionary', '', ['/C', '/Ref']],
        ['Mat', 'ids', '', []]],
    None]
ok: FUNC < cv.aruco.Board.Board [ARG vector_Mat objPoints=, ARG Dictionary dictionary=, ARG Mat ids=]>

--- Incoming ---
['cv.aruco.Board.getDictionary', 'Dictionary', ['/C'], [], 'Dictionary']
ok: FUNC <Dictionary cv.aruco.Board.getDictionary []>

--- Incoming ---
[   'cv.aruco.Board.getObjPoints',
    'vector_vector_Point3f',
    ['/C'],
    [],
    'std::vector<std::vector<Point3f> >']
ok: FUNC <vector_vector_Point3f cv.aruco.Board.getObjPoints []>

--- Incoming ---
['cv.aruco.Board.getIds', 'vector_int', ['/C'], [], 'std::vector<int>']
ok: FUNC <vector_int cv.aruco.Board.getIds []>

--- Incoming ---
['cv.aruco.Board.getRightBottomCorner', 'Point3f', ['/C'], [], 'Point3f']
ok: FUNC <Point3f cv.aruco.Board.getRightBottomCorner []>

--- Incoming ---
[   'cv.aruco.Board.matchImagePoints',
    'void',
    ['/C'],
    [   ['vector_Mat', 'detectedCorners', '', []],
        ['Mat', 'detectedIds', '', []],
        ['Mat', 'objPoints', '', ['/O']],
        ['Mat', 'imgPoints', '', ['/O']]],
    'void']
ok: FUNC <void cv.aruco.Board.matchImagePoints [ARG vector_Mat detectedCorners=, ARG Mat detectedIds=, ARG Mat objPoints=, ARG Mat imgPoints=]>

--- Incoming ---
[   'cv.aruco.Board.generateImage',
    'void',
    ['/C'],
    [   ['Size', 'outSize', '', []],
        ['Mat', 'img', '', ['/O']],
        ['int', 'marginSize', '0', []],
        ['int', 'borderBits', '1', []]],
    'void']
ok: FUNC <void cv.aruco.Board.generateImage [ARG Size outSize=, ARG Mat img=, ARG int marginSize=0, ARG int borderBits=1]>

--- Incoming ---
['class cv.aruco.GridBoard', ': cv::aruco::Board', ['/Simple'], [], None]
ok: class CLASS cv.aruco::.GridBoard : Board, name: GridBoard, base: Board

--- Incoming ---
[   'cv.aruco.GridBoard.GridBoard',
    '',
    [],
    [   ['Size', 'size', '', ['/C', '/Ref']],
        ['float', 'markerLength', '', []],
        ['float', 'markerSeparation', '', []],
        ['Dictionary', 'dictionary', '', ['/C', '/Ref']],
        ['Mat', 'ids', 'Mat()', []]],
    None]
ok: FUNC < cv.aruco.GridBoard.GridBoard [ARG Size size=, ARG float markerLength=, ARG float markerSeparation=, ARG Dictionary dictionary=, ARG Mat ids=Mat()]>

--- Incoming ---
['cv.aruco.GridBoard.getGridSize', 'Size', ['/C'], [], 'Size']
ok: FUNC <Size cv.aruco.GridBoard.getGridSize []>

--- Incoming ---
['cv.aruco.GridBoard.getMarkerLength', 'float', ['/C'], [], 'float']
ok: FUNC <float cv.aruco.GridBoard.getMarkerLength []>

--- Incoming ---
['cv.aruco.GridBoard.getMarkerSeparation', 'float', ['/C'], [], 'float']
ok: FUNC <float cv.aruco.GridBoard.getMarkerSeparation []>

--- Incoming ---
['class cv.aruco.CharucoBoard', ': cv::aruco::Board', ['/Simple'], [], None]
ok: class CLASS cv.aruco::.CharucoBoard : Board, name: CharucoBoard, base: Board

--- Incoming ---
[   'cv.aruco.CharucoBoard.CharucoBoard',
    '',
    [],
    [   ['Size', 'size', '', ['/C', '/Ref']],
        ['float', 'squareLength', '', []],
        ['float', 'markerLength', '', []],
        ['Dictionary', 'dictionary', '', ['/C', '/Ref']],
        ['Mat', 'ids', 'Mat()', []]],
    None]
ok: FUNC < cv.aruco.CharucoBoard.CharucoBoard [ARG Size size=, ARG float squareLength=, ARG float markerLength=, ARG Dictionary dictionary=, ARG Mat ids=Mat()]>

--- Incoming ---
[   'cv.aruco.CharucoBoard.setLegacyPattern',
    'void',
    [],
    [['bool', 'legacyPattern', '', []]],
    'void']
ok: FUNC <void cv.aruco.CharucoBoard.setLegacyPattern [ARG bool legacyPattern=]>

--- Incoming ---
['cv.aruco.CharucoBoard.getLegacyPattern', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.aruco.CharucoBoard.getLegacyPattern []>

--- Incoming ---
['cv.aruco.CharucoBoard.getChessboardSize', 'Size', ['/C'], [], 'Size']
ok: FUNC <Size cv.aruco.CharucoBoard.getChessboardSize []>

--- Incoming ---
['cv.aruco.CharucoBoard.getSquareLength', 'float', ['/C'], [], 'float']
ok: FUNC <float cv.aruco.CharucoBoard.getSquareLength []>

--- Incoming ---
['cv.aruco.CharucoBoard.getMarkerLength', 'float', ['/C'], [], 'float']
ok: FUNC <float cv.aruco.CharucoBoard.getMarkerLength []>

--- Incoming ---
[   'cv.aruco.CharucoBoard.getChessboardCorners',
    'vector_Point3f',
    ['/C'],
    [],
    'std::vector<Point3f>']
ok: FUNC <vector_Point3f cv.aruco.CharucoBoard.getChessboardCorners []>

--- Incoming ---
[   'cv.aruco.CharucoBoard.checkCharucoCornersCollinear',
    'bool',
    ['/C'],
    [['Mat', 'charucoIds', '', []]],
    'bool']
ok: FUNC <bool cv.aruco.CharucoBoard.checkCharucoCornersCollinear [ARG Mat charucoIds=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/barcode.hpp =====
Namespaces: ['cv', 'cv.aruco', 'cv.barcode']

--- Incoming ---
[   'class cv.barcode.BarcodeDetector',
    ': cv::GraphicalCodeDetector',
    ['/Simple'],
    [],
    None]
ok: class CLASS cv.barcode::.BarcodeDetector : GraphicalCodeDetector, name: BarcodeDetector, base: GraphicalCodeDetector

--- Incoming ---
['cv.barcode.BarcodeDetector.BarcodeDetector', '', [], [], None]
ok: FUNC < cv.barcode.BarcodeDetector.BarcodeDetector []>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.BarcodeDetector',
    '',
    [],
    [   ['string', 'prototxt_path', '', ['/PATH', '/C', '/Ref']],
        ['string', 'model_path', '', ['/PATH', '/C', '/Ref']]],
    None]
ok: FUNC < cv.barcode.BarcodeDetector.BarcodeDetector [ARG string prototxt_path=, ARG string model_path=]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.decodeWithType',
    'bool',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'points', '', []],
        ['vector_string', 'decoded_info', '', ['/O', '/Ref']],
        ['vector_string', 'decoded_type', '', ['/O', '/Ref']]],
    'bool']
ok: FUNC <bool cv.barcode.BarcodeDetector.decodeWithType [ARG Mat img=, ARG Mat points=, ARG vector_string decoded_info=, ARG vector_string decoded_type=]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.detectAndDecodeWithType',
    'bool',
    ['/C'],
    [   ['Mat', 'img', '', []],
        ['vector_string', 'decoded_info', '', ['/O', '/Ref']],
        ['vector_string', 'decoded_type', '', ['/O', '/Ref']],
        ['Mat', 'points', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.barcode.BarcodeDetector.detectAndDecodeWithType [ARG Mat img=, ARG vector_string decoded_info=, ARG vector_string decoded_type=, ARG Mat points=Mat()]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.getDownsamplingThreshold',
    'double',
    ['/C'],
    [],
    'double']
ok: FUNC <double cv.barcode.BarcodeDetector.getDownsamplingThreshold []>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.setDownsamplingThreshold',
    'BarcodeDetector',
    [],
    [['double', 'thresh', '', []]],
    'BarcodeDetector']
ok: FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setDownsamplingThreshold [ARG double thresh=]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.getDetectorScales',
    'void',
    ['/C'],
    [['vector_float', 'sizes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.barcode.BarcodeDetector.getDetectorScales [ARG vector_float sizes=]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.setDetectorScales',
    'BarcodeDetector',
    [],
    [['vector_float', 'sizes', '', ['/C', '/Ref']]],
    'BarcodeDetector']
ok: FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setDetectorScales [ARG vector_float sizes=]>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.getGradientThreshold',
    'double',
    ['/C'],
    [],
    'double']
ok: FUNC <double cv.barcode.BarcodeDetector.getGradientThreshold []>

--- Incoming ---
[   'cv.barcode.BarcodeDetector.setGradientThreshold',
    'BarcodeDetector',
    [],
    [['double', 'thresh', '', []]],
    'BarcodeDetector']
ok: FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setGradientThreshold [ARG double thresh=]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp =====
Namespaces: ['cv', 'cv.aruco', 'cv.barcode']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/objdetect/include/opencv2/objdetect/objdetect.hpp


===== Generating... =====
CLASS cv::.BaseCascadeClassifier : Algorithm
CLASS cv::.CascadeClassifier : 
FUNC < cv.CascadeClassifier.CascadeClassifier []>
java:  CascadeClassifier()
FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>
java:  CascadeClassifier(String filename)
FUNC <bool cv.CascadeClassifier.empty []>
java: boolean empty()
FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>
java: boolean load(String filename)
FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>
SKIP:bool cv::CascadeClassifier::read(FileNode node)	 due to ARG type FileNode/I
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor)
java: void detectMultiScale(Mat image, MatOfRect objects)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize, boolean outputRejectLevels)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights)
FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>
java: boolean isOldFormatCascade()
FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>
java: Size getOriginalWindowSize()
FUNC <int cv.CascadeClassifier.getFeatureType []>
java: int getFeatureType()
FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>
java: boolean convert(String oldcascade, String newcascade)
CLASS cv::.FaceDetectorYN : 
FUNC <void cv.FaceDetectorYN.setInputSize [ARG Size input_size=]>
java: void setInputSize(Size input_size)
FUNC <Size cv.FaceDetectorYN.getInputSize []>
java: Size getInputSize()
FUNC <void cv.FaceDetectorYN.setScoreThreshold [ARG float score_threshold=]>
java: void setScoreThreshold(float score_threshold)
FUNC <float cv.FaceDetectorYN.getScoreThreshold []>
java: float getScoreThreshold()
FUNC <void cv.FaceDetectorYN.setNMSThreshold [ARG float nms_threshold=]>
java: void setNMSThreshold(float nms_threshold)
FUNC <float cv.FaceDetectorYN.getNMSThreshold []>
java: float getNMSThreshold()
FUNC <void cv.FaceDetectorYN.setTopK [ARG int top_k=]>
java: void setTopK(int top_k)
FUNC <int cv.FaceDetectorYN.getTopK []>
java: int getTopK()
FUNC <int cv.FaceDetectorYN.detect [ARG Mat image=, ARG Mat faces=]>
java: int detect(Mat image, Mat faces)
FUNC <Ptr_FaceDetectorYN cv.FaceDetectorYN.create [ARG String model=, ARG String config=, ARG Size input_size=, ARG float score_threshold=0.9f, ARG float nms_threshold=0.3f, ARG int top_k=5000, ARG int backend_id=0, ARG int target_id=0]>
java: FaceDetectorYN create(String model, String config, Size input_size, float score_threshold, float nms_threshold, int top_k, int backend_id, int target_id)
java: FaceDetectorYN create(String model, String config, Size input_size, float score_threshold, float nms_threshold, int top_k, int backend_id)
java: FaceDetectorYN create(String model, String config, Size input_size, float score_threshold, float nms_threshold, int top_k)
java: FaceDetectorYN create(String model, String config, Size input_size, float score_threshold, float nms_threshold)
java: FaceDetectorYN create(String model, String config, Size input_size, float score_threshold)
java: FaceDetectorYN create(String model, String config, Size input_size)
FUNC <Ptr_FaceDetectorYN cv.FaceDetectorYN.create [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=, ARG Size input_size=, ARG float score_threshold=0.9f, ARG float nms_threshold=0.3f, ARG int top_k=5000, ARG int backend_id=0, ARG int target_id=0]>
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size, float score_threshold, float nms_threshold, int top_k, int backend_id, int target_id)
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size, float score_threshold, float nms_threshold, int top_k, int backend_id)
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size, float score_threshold, float nms_threshold, int top_k)
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size, float score_threshold, float nms_threshold)
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size, float score_threshold)
java: FaceDetectorYN create(String framework, MatOfByte bufferModel, MatOfByte bufferConfig, Size input_size)
CLASS cv::.FaceRecognizerSF : 
[CONST FR_COSINE=0, CONST FR_NORM_L2=1]
FUNC <void cv.FaceRecognizerSF.alignCrop [ARG Mat src_img=, ARG Mat face_box=, ARG Mat aligned_img=]>
java: void alignCrop(Mat src_img, Mat face_box, Mat aligned_img)
FUNC <void cv.FaceRecognizerSF.feature [ARG Mat aligned_img=, ARG Mat face_feature=]>
java: void feature(Mat aligned_img, Mat face_feature)
FUNC <double cv.FaceRecognizerSF.match [ARG Mat face_feature1=, ARG Mat face_feature2=, ARG int dis_type=FaceRecognizerSF::FR_COSINE]>
java: double match(Mat face_feature1, Mat face_feature2, int dis_type)
java: double match(Mat face_feature1, Mat face_feature2)
FUNC <Ptr_FaceRecognizerSF cv.FaceRecognizerSF.create [ARG String model=, ARG String config=, ARG int backend_id=0, ARG int target_id=0]>
java: FaceRecognizerSF create(String model, String config, int backend_id, int target_id)
java: FaceRecognizerSF create(String model, String config, int backend_id)
java: FaceRecognizerSF create(String model, String config)
CLASS cv::.GraphicalCodeDetector : 
FUNC <bool cv.GraphicalCodeDetector.detect [ARG Mat img=, ARG Mat points=]>
java: boolean detect(Mat img, Mat points)
FUNC <string cv.GraphicalCodeDetector.decode [ARG Mat img=, ARG Mat points=, ARG Mat straight_code=Mat()]>
java: String decode(Mat img, Mat points, Mat straight_code)
java: String decode(Mat img, Mat points)
FUNC <string cv.GraphicalCodeDetector.detectAndDecode [ARG Mat img=, ARG Mat points=Mat(), ARG Mat straight_code=Mat()]>
java: String detectAndDecode(Mat img, Mat points, Mat straight_code)
java: String detectAndDecode(Mat img, Mat points)
java: String detectAndDecode(Mat img)
FUNC <bool cv.GraphicalCodeDetector.detectMulti [ARG Mat img=, ARG Mat points=]>
java: boolean detectMulti(Mat img, Mat points)
FUNC <bool cv.GraphicalCodeDetector.decodeMulti [ARG Mat img=, ARG Mat points=, ARG vector_string decoded_info=, ARG vector_Mat straight_code=vector_Mat()]>
java: boolean decodeMulti(Mat img, Mat points, List<String> decoded_info, List<Mat> straight_code)
java: boolean decodeMulti(Mat img, Mat points, List<String> decoded_info)
FUNC <bool cv.GraphicalCodeDetector.detectAndDecodeMulti [ARG Mat img=, ARG vector_string decoded_info=, ARG Mat points=Mat(), ARG vector_Mat straight_code=vector_Mat()]>
java: boolean detectAndDecodeMulti(Mat img, List<String> decoded_info, Mat points, List<Mat> straight_code)
java: boolean detectAndDecodeMulti(Mat img, List<String> decoded_info, Mat points)
java: boolean detectAndDecodeMulti(Mat img, List<String> decoded_info)
CLASS cv::.HOGDescriptor : 
[CONST DEFAULT_NLEVELS=64]
[CONST DESCR_FORMAT_COL_BY_COL=0, CONST DESCR_FORMAT_ROW_BY_ROW=1]
[CONST L2Hys=0]
FUNC < cv.HOGDescriptor.HOGDescriptor []>
java:  HOGDescriptor()
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG HOGDescriptor_HistogramNormType _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection, int _nlevels, boolean _signedGradient)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection, int _nlevels)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins)
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>
java:  HOGDescriptor(String filename)
FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>
java: long getDescriptorSize()
FUNC <bool cv.HOGDescriptor.checkDetectorSize []>
java: boolean checkDetectorSize()
FUNC <double cv.HOGDescriptor.getWinSigma []>
java: double getWinSigma()
FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat svmdetector=]>
java: void setSVMDetector(Mat svmdetector)
FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>
java: boolean load(String filename, String objname)
java: boolean load(String filename)
FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>
java: void save(String filename, String objname)
java: void save(String filename)
FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>
java: void compute(Mat img, MatOfFloat descriptors, Size winStride, Size padding, MatOfPoint locations)
java: void compute(Mat img, MatOfFloat descriptors, Size winStride, Size padding)
java: void compute(Mat img, MatOfFloat descriptors, Size winStride)
java: void compute(Mat img, MatOfFloat descriptors)
FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride, Size padding, MatOfPoint searchLocations)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride, Size padding)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights)
FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double groupThreshold=2.0, ARG bool useMeanshiftGrouping=false]>
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale, double groupThreshold, boolean useMeanshiftGrouping)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale, double groupThreshold)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights)
FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>
java: void computeGradient(Mat img, Mat grad, Mat angleOfs, Size paddingTL, Size paddingBR)
java: void computeGradient(Mat img, Mat grad, Mat angleOfs, Size paddingTL)
java: void computeGradient(Mat img, Mat grad, Mat angleOfs)
FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>
java: MatOfFloat getDefaultPeopleDetector()
FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>
java: MatOfFloat getDaimlerPeopleDetector()
FUNC <Size cv.HOGDescriptor.get_winSize []>
java: Size get_winSize()
FUNC <Size cv.HOGDescriptor.get_blockSize []>
java: Size get_blockSize()
FUNC <Size cv.HOGDescriptor.get_blockStride []>
java: Size get_blockStride()
FUNC <Size cv.HOGDescriptor.get_cellSize []>
java: Size get_cellSize()
FUNC <int cv.HOGDescriptor.get_nbins []>
java: int get_nbins()
FUNC <int cv.HOGDescriptor.get_derivAperture []>
java: int get_derivAperture()
FUNC <double cv.HOGDescriptor.get_winSigma []>
java: double get_winSigma()
FUNC <HOGDescriptor_HistogramNormType cv.HOGDescriptor.get_histogramNormType []>
java: int get_histogramNormType()
FUNC <double cv.HOGDescriptor.get_L2HysThreshold []>
java: double get_L2HysThreshold()
FUNC <bool cv.HOGDescriptor.get_gammaCorrection []>
java: boolean get_gammaCorrection()
FUNC <vector_float cv.HOGDescriptor.get_svmDetector []>
java: MatOfFloat get_svmDetector()
FUNC <int cv.HOGDescriptor.get_nlevels []>
java: int get_nlevels()
FUNC <bool cv.HOGDescriptor.get_signedGradient []>
java: boolean get_signedGradient()
CLASS cv::.Objdetect : 
[CONST CASCADE_DO_CANNY_PRUNING=1, CONST CASCADE_SCALE_IMAGE=2, CONST CASCADE_FIND_BIGGEST_OBJECT=4, CONST CASCADE_DO_ROUGH_SEARCH=8]
[CONST DetectionBasedTracker_DETECTED_NOT_SHOWN_YET=0, CONST DetectionBasedTracker_DETECTED=1, CONST DetectionBasedTracker_DETECTED_TEMPORARY_LOST=2, CONST DetectionBasedTracker_WRONG_OBJECT=3]
[CONST CORNER_REFINE_NONE=0, CONST CORNER_REFINE_SUBPIX=1, CONST CORNER_REFINE_CONTOUR=2, CONST CORNER_REFINE_APRILTAG=3]
[CONST DICT_4X4_50=0, CONST DICT_4X4_100=0+1, CONST DICT_4X4_250=0+2, CONST DICT_4X4_1000=0+3, CONST DICT_5X5_50=0+4, CONST DICT_5X5_100=0+5, CONST DICT_5X5_250=0+6, CONST DICT_5X5_1000=0+7, CONST DICT_6X6_50=0+8, CONST DICT_6X6_100=0+9, CONST DICT_6X6_250=0+10, CONST DICT_6X6_1000=0+11, CONST DICT_7X7_50=0+12, CONST DICT_7X7_100=0+13, CONST DICT_7X7_250=0+14, CONST DICT_7X7_1000=0+15, CONST DICT_ARUCO_ORIGINAL=0+16, CONST DICT_APRILTAG_16h5=0+17, CONST DICT_APRILTAG_25h9=0+18, CONST DICT_APRILTAG_36h10=0+19, CONST DICT_APRILTAG_36h11=0+20, CONST DICT_ARUCO_MIP_36h12=0+21]
FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold, double eps)
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold)
FUNC <void cv.aruco..drawDetectedMarkers [ARG Mat image=, ARG vector_Mat corners=, ARG Mat ids=Mat(), ARG Scalar borderColor=Scalar(0, 255, 0)]>
java: void drawDetectedMarkers(Mat image, List<Mat> corners, Mat ids, Scalar borderColor)
java: void drawDetectedMarkers(Mat image, List<Mat> corners, Mat ids)
java: void drawDetectedMarkers(Mat image, List<Mat> corners)
FUNC <void cv.aruco..generateImageMarker [ARG Dictionary dictionary=, ARG int id=, ARG int sidePixels=, ARG Mat img=, ARG int borderBits=1]>
java: void generateImageMarker(Dictionary dictionary, int id, int sidePixels, Mat img, int borderBits)
java: void generateImageMarker(Dictionary dictionary, int id, int sidePixels, Mat img)
FUNC <void cv.aruco..drawDetectedCornersCharuco [ARG Mat image=, ARG Mat charucoCorners=, ARG Mat charucoIds=Mat(), ARG Scalar cornerColor=Scalar(255, 0, 0)]>
java: void drawDetectedCornersCharuco(Mat image, Mat charucoCorners, Mat charucoIds, Scalar cornerColor)
java: void drawDetectedCornersCharuco(Mat image, Mat charucoCorners, Mat charucoIds)
java: void drawDetectedCornersCharuco(Mat image, Mat charucoCorners)
FUNC <void cv.aruco..drawDetectedDiamonds [ARG Mat image=, ARG vector_Mat diamondCorners=, ARG Mat diamondIds=Mat(), ARG Scalar borderColor=Scalar(0, 0, 255)]>
java: void drawDetectedDiamonds(Mat image, List<Mat> diamondCorners, Mat diamondIds, Scalar borderColor)
java: void drawDetectedDiamonds(Mat image, List<Mat> diamondCorners, Mat diamondIds)
java: void drawDetectedDiamonds(Mat image, List<Mat> diamondCorners)
FUNC <Dictionary cv.aruco..getPredefinedDictionary [ARG int dict=]>
java: Dictionary getPredefinedDictionary(int dict)
FUNC <Dictionary cv.aruco..extendDictionary [ARG int nMarkers=, ARG int markerSize=, ARG Dictionary baseDictionary=Dictionary(), ARG int randomSeed=0]>
java: Dictionary extendDictionary(int nMarkers, int markerSize, Dictionary baseDictionary, int randomSeed)
java: Dictionary extendDictionary(int nMarkers, int markerSize, Dictionary baseDictionary)
java: Dictionary extendDictionary(int nMarkers, int markerSize)
CLASS cv::.QRCodeDetector : GraphicalCodeDetector
FUNC < cv.QRCodeDetector.QRCodeDetector []>
java:  QRCodeDetector()
FUNC <QRCodeDetector cv.QRCodeDetector.setEpsX [ARG double epsX=]>
java: QRCodeDetector setEpsX(double epsX)
FUNC <QRCodeDetector cv.QRCodeDetector.setEpsY [ARG double epsY=]>
java: QRCodeDetector setEpsY(double epsY)
FUNC <QRCodeDetector cv.QRCodeDetector.setUseAlignmentMarkers [ARG bool useAlignmentMarkers=]>
java: QRCodeDetector setUseAlignmentMarkers(boolean useAlignmentMarkers)
FUNC <String cv.QRCodeDetector.decodeCurved [ARG Mat img=, ARG Mat points=, ARG Mat straight_qrcode=Mat()]>
java: String decodeCurved(Mat img, Mat points, Mat straight_qrcode)
java: String decodeCurved(Mat img, Mat points)
FUNC <string cv.QRCodeDetector.detectAndDecodeCurved [ARG Mat img=, ARG Mat points=Mat(), ARG Mat straight_qrcode=Mat()]>
java: String detectAndDecodeCurved(Mat img, Mat points, Mat straight_qrcode)
java: String detectAndDecodeCurved(Mat img, Mat points)
java: String detectAndDecodeCurved(Mat img)
CLASS cv::.QRCodeDetectorAruco : GraphicalCodeDetector
FUNC < cv.QRCodeDetectorAruco.QRCodeDetectorAruco []>
java:  QRCodeDetectorAruco()
FUNC < cv.QRCodeDetectorAruco.QRCodeDetectorAruco [ARG QRCodeDetectorAruco_Params params=]>
java:  QRCodeDetectorAruco(QRCodeDetectorAruco_Params params)
FUNC <QRCodeDetectorAruco_Params cv.QRCodeDetectorAruco.getDetectorParameters []>
java: QRCodeDetectorAruco_Params getDetectorParameters()
FUNC <QRCodeDetectorAruco cv.QRCodeDetectorAruco.setDetectorParameters [ARG QRCodeDetectorAruco_Params params=]>
java: QRCodeDetectorAruco setDetectorParameters(QRCodeDetectorAruco_Params params)
FUNC <aruco_DetectorParameters cv.QRCodeDetectorAruco.getArucoParameters []>
SKIP:aruco_DetectorParameters cv::QRCodeDetectorAruco::getArucoParameters()	 due to RET type aruco_DetectorParameters
FUNC <void cv.QRCodeDetectorAruco.setArucoParameters [ARG aruco_DetectorParameters params=]>
SKIP:void cv::QRCodeDetectorAruco::setArucoParameters(aruco_DetectorParameters params)	 due to ARG type aruco_DetectorParameters/I
CLASS cv::QRCodeDetectorAruco.QRCodeDetectorAruco_Params : 
FUNC < cv.QRCodeDetectorAruco.Params.QRCodeDetectorAruco_Params []>
java:  QRCodeDetectorAruco_Params()
FUNC <float cv.QRCodeDetectorAruco.Params.get_minModuleSizeInPyramid []>
java: float get_minModuleSizeInPyramid()
FUNC <void cv.QRCodeDetectorAruco.Params.set_minModuleSizeInPyramid [ARG float minModuleSizeInPyramid=]>
java: void set_minModuleSizeInPyramid(float minModuleSizeInPyramid)
FUNC <float cv.QRCodeDetectorAruco.Params.get_maxRotation []>
java: float get_maxRotation()
FUNC <void cv.QRCodeDetectorAruco.Params.set_maxRotation [ARG float maxRotation=]>
java: void set_maxRotation(float maxRotation)
FUNC <float cv.QRCodeDetectorAruco.Params.get_maxModuleSizeMismatch []>
java: float get_maxModuleSizeMismatch()
FUNC <void cv.QRCodeDetectorAruco.Params.set_maxModuleSizeMismatch [ARG float maxModuleSizeMismatch=]>
java: void set_maxModuleSizeMismatch(float maxModuleSizeMismatch)
FUNC <float cv.QRCodeDetectorAruco.Params.get_maxTimingPatternMismatch []>
java: float get_maxTimingPatternMismatch()
FUNC <void cv.QRCodeDetectorAruco.Params.set_maxTimingPatternMismatch [ARG float maxTimingPatternMismatch=]>
java: void set_maxTimingPatternMismatch(float maxTimingPatternMismatch)
FUNC <float cv.QRCodeDetectorAruco.Params.get_maxPenalties []>
java: float get_maxPenalties()
FUNC <void cv.QRCodeDetectorAruco.Params.set_maxPenalties [ARG float maxPenalties=]>
java: void set_maxPenalties(float maxPenalties)
FUNC <float cv.QRCodeDetectorAruco.Params.get_maxColorsMismatch []>
java: float get_maxColorsMismatch()
FUNC <void cv.QRCodeDetectorAruco.Params.set_maxColorsMismatch [ARG float maxColorsMismatch=]>
java: void set_maxColorsMismatch(float maxColorsMismatch)
FUNC <float cv.QRCodeDetectorAruco.Params.get_scaleTimingPatternScore []>
java: float get_scaleTimingPatternScore()
FUNC <void cv.QRCodeDetectorAruco.Params.set_scaleTimingPatternScore [ARG float scaleTimingPatternScore=]>
java: void set_scaleTimingPatternScore(float scaleTimingPatternScore)
CLASS cv::.QRCodeEncoder : 
[CONST CORRECT_LEVEL_L=0, CONST CORRECT_LEVEL_M=1, CONST CORRECT_LEVEL_Q=2, CONST CORRECT_LEVEL_H=3]
[CONST ECI_UTF8=26]
[CONST MODE_AUTO=-1, CONST MODE_NUMERIC=1, CONST MODE_ALPHANUMERIC=2, CONST MODE_BYTE=4, CONST MODE_ECI=7, CONST MODE_KANJI=8, CONST MODE_STRUCTURED_APPEND=3]
FUNC <Ptr_QRCodeEncoder cv.QRCodeEncoder.create [ARG QRCodeEncoder_Params parameters=QRCodeEncoder::Params()]>
java: QRCodeEncoder create(QRCodeEncoder_Params parameters)
java: QRCodeEncoder create()
FUNC <void cv.QRCodeEncoder.encode [ARG String encoded_info=, ARG Mat qrcode=]>
java: void encode(String encoded_info, Mat qrcode)
FUNC <void cv.QRCodeEncoder.encodeStructuredAppend [ARG String encoded_info=, ARG vector_Mat qrcodes=]>
java: void encodeStructuredAppend(String encoded_info, List<Mat> qrcodes)
CLASS cv::QRCodeEncoder.QRCodeEncoder_Params : 
FUNC < cv.QRCodeEncoder.Params.QRCodeEncoder_Params []>
java:  QRCodeEncoder_Params()
FUNC <int cv.QRCodeEncoder.Params.get_version []>
java: int get_version()
FUNC <void cv.QRCodeEncoder.Params.set_version [ARG int version=]>
java: void set_version(int version)
FUNC <CorrectionLevel cv.QRCodeEncoder.Params.get_correction_level []>
SKIP:CorrectionLevel QRCodeEncoder_Params::correction_level	 due to RET type CorrectionLevel
FUNC <void cv.QRCodeEncoder.Params.set_correction_level [ARG CorrectionLevel correction_level=]>
SKIP:void QRCodeEncoder_Params::correction_level	 due to ARG type CorrectionLevel/I
FUNC <EncodeMode cv.QRCodeEncoder.Params.get_mode []>
SKIP:EncodeMode QRCodeEncoder_Params::mode	 due to RET type EncodeMode
FUNC <void cv.QRCodeEncoder.Params.set_mode [ARG EncodeMode mode=]>
SKIP:void QRCodeEncoder_Params::mode	 due to ARG type EncodeMode/I
FUNC <int cv.QRCodeEncoder.Params.get_structure_number []>
java: int get_structure_number()
FUNC <void cv.QRCodeEncoder.Params.set_structure_number [ARG int structure_number=]>
java: void set_structure_number(int structure_number)
CLASS cv.aruco::.ArucoDetector : Algorithm
FUNC < cv.aruco.ArucoDetector.ArucoDetector [ARG Dictionary dictionary=getPredefinedDictionary(cv::aruco::DICT_4X4_50), ARG DetectorParameters detectorParams=DetectorParameters(), ARG RefineParameters refineParams=RefineParameters()]>
java:  ArucoDetector(Dictionary dictionary, DetectorParameters detectorParams, RefineParameters refineParams)
java:  ArucoDetector(Dictionary dictionary, DetectorParameters detectorParams)
java:  ArucoDetector(Dictionary dictionary)
java:  ArucoDetector()
FUNC <void cv.aruco.ArucoDetector.detectMarkers [ARG Mat image=, ARG vector_Mat corners=, ARG Mat ids=, ARG vector_Mat rejectedImgPoints=vector_Mat()]>
java: void detectMarkers(Mat image, List<Mat> corners, Mat ids, List<Mat> rejectedImgPoints)
java: void detectMarkers(Mat image, List<Mat> corners, Mat ids)
FUNC <void cv.aruco.ArucoDetector.refineDetectedMarkers [ARG Mat image=, ARG Board board=, ARG vector_Mat detectedCorners=, ARG Mat detectedIds=, ARG vector_Mat rejectedCorners=, ARG Mat cameraMatrix=Mat(), ARG Mat distCoeffs=Mat(), ARG Mat recoveredIdxs=Mat()]>
java: void refineDetectedMarkers(Mat image, Board board, List<Mat> detectedCorners, Mat detectedIds, List<Mat> rejectedCorners, Mat cameraMatrix, Mat distCoeffs, Mat recoveredIdxs)
java: void refineDetectedMarkers(Mat image, Board board, List<Mat> detectedCorners, Mat detectedIds, List<Mat> rejectedCorners, Mat cameraMatrix, Mat distCoeffs)
java: void refineDetectedMarkers(Mat image, Board board, List<Mat> detectedCorners, Mat detectedIds, List<Mat> rejectedCorners, Mat cameraMatrix)
java: void refineDetectedMarkers(Mat image, Board board, List<Mat> detectedCorners, Mat detectedIds, List<Mat> rejectedCorners)
FUNC <Dictionary cv.aruco.ArucoDetector.getDictionary []>
java: Dictionary getDictionary()
FUNC <void cv.aruco.ArucoDetector.setDictionary [ARG Dictionary dictionary=]>
java: void setDictionary(Dictionary dictionary)
FUNC <DetectorParameters cv.aruco.ArucoDetector.getDetectorParameters []>
java: DetectorParameters getDetectorParameters()
FUNC <void cv.aruco.ArucoDetector.setDetectorParameters [ARG DetectorParameters detectorParameters=]>
java: void setDetectorParameters(DetectorParameters detectorParameters)
FUNC <RefineParameters cv.aruco.ArucoDetector.getRefineParameters []>
java: RefineParameters getRefineParameters()
FUNC <void cv.aruco.ArucoDetector.setRefineParameters [ARG RefineParameters refineParameters=]>
java: void setRefineParameters(RefineParameters refineParameters)
FUNC <void cv.aruco.ArucoDetector.write [ARG FileStorage fs=, ARG String name=]>
SKIP:void cv::aruco::ArucoDetector::write(FileStorage fs, String name)	 due to ARG type FileStorage/I
FUNC <void cv.aruco.ArucoDetector.read [ARG FileNode fn=]>
SKIP:void cv::aruco::ArucoDetector::read(FileNode fn)	 due to ARG type FileNode/I
CLASS cv.aruco::.Board : 
FUNC < cv.aruco.Board.Board [ARG vector_Mat objPoints=, ARG Dictionary dictionary=, ARG Mat ids=]>
java:  Board(List<Mat> objPoints, Dictionary dictionary, Mat ids)
FUNC <Dictionary cv.aruco.Board.getDictionary []>
java: Dictionary getDictionary()
FUNC <vector_vector_Point3f cv.aruco.Board.getObjPoints []>
java: List<MatOfPoint3f> getObjPoints()
FUNC <vector_int cv.aruco.Board.getIds []>
java: MatOfInt getIds()
FUNC <Point3f cv.aruco.Board.getRightBottomCorner []>
java: Point3 getRightBottomCorner()
FUNC <void cv.aruco.Board.matchImagePoints [ARG vector_Mat detectedCorners=, ARG Mat detectedIds=, ARG Mat objPoints=, ARG Mat imgPoints=]>
java: void matchImagePoints(List<Mat> detectedCorners, Mat detectedIds, Mat objPoints, Mat imgPoints)
FUNC <void cv.aruco.Board.generateImage [ARG Size outSize=, ARG Mat img=, ARG int marginSize=0, ARG int borderBits=1]>
java: void generateImage(Size outSize, Mat img, int marginSize, int borderBits)
java: void generateImage(Size outSize, Mat img, int marginSize)
java: void generateImage(Size outSize, Mat img)
CLASS cv.aruco::.CharucoBoard : Board
FUNC < cv.aruco.CharucoBoard.CharucoBoard [ARG Size size=, ARG float squareLength=, ARG float markerLength=, ARG Dictionary dictionary=, ARG Mat ids=Mat()]>
java:  CharucoBoard(Size size, float squareLength, float markerLength, Dictionary dictionary, Mat ids)
java:  CharucoBoard(Size size, float squareLength, float markerLength, Dictionary dictionary)
FUNC <void cv.aruco.CharucoBoard.setLegacyPattern [ARG bool legacyPattern=]>
java: void setLegacyPattern(boolean legacyPattern)
FUNC <bool cv.aruco.CharucoBoard.getLegacyPattern []>
java: boolean getLegacyPattern()
FUNC <Size cv.aruco.CharucoBoard.getChessboardSize []>
java: Size getChessboardSize()
FUNC <float cv.aruco.CharucoBoard.getSquareLength []>
java: float getSquareLength()
FUNC <float cv.aruco.CharucoBoard.getMarkerLength []>
java: float getMarkerLength()
FUNC <vector_Point3f cv.aruco.CharucoBoard.getChessboardCorners []>
java: MatOfPoint3f getChessboardCorners()
FUNC <bool cv.aruco.CharucoBoard.checkCharucoCornersCollinear [ARG Mat charucoIds=]>
java: boolean checkCharucoCornersCollinear(Mat charucoIds)
CLASS cv.aruco::.CharucoDetector : Algorithm
FUNC < cv.aruco.CharucoDetector.CharucoDetector [ARG CharucoBoard board=, ARG CharucoParameters charucoParams=CharucoParameters(), ARG DetectorParameters detectorParams=DetectorParameters(), ARG RefineParameters refineParams=RefineParameters()]>
java:  CharucoDetector(CharucoBoard board, CharucoParameters charucoParams, DetectorParameters detectorParams, RefineParameters refineParams)
java:  CharucoDetector(CharucoBoard board, CharucoParameters charucoParams, DetectorParameters detectorParams)
java:  CharucoDetector(CharucoBoard board, CharucoParameters charucoParams)
java:  CharucoDetector(CharucoBoard board)
FUNC <CharucoBoard cv.aruco.CharucoDetector.getBoard []>
java: CharucoBoard getBoard()
FUNC <void cv.aruco.CharucoDetector.setBoard [ARG CharucoBoard board=]>
java: void setBoard(CharucoBoard board)
FUNC <CharucoParameters cv.aruco.CharucoDetector.getCharucoParameters []>
java: CharucoParameters getCharucoParameters()
FUNC <void cv.aruco.CharucoDetector.setCharucoParameters [ARG CharucoParameters charucoParameters=]>
java: void setCharucoParameters(CharucoParameters charucoParameters)
FUNC <DetectorParameters cv.aruco.CharucoDetector.getDetectorParameters []>
java: DetectorParameters getDetectorParameters()
FUNC <void cv.aruco.CharucoDetector.setDetectorParameters [ARG DetectorParameters detectorParameters=]>
java: void setDetectorParameters(DetectorParameters detectorParameters)
FUNC <RefineParameters cv.aruco.CharucoDetector.getRefineParameters []>
java: RefineParameters getRefineParameters()
FUNC <void cv.aruco.CharucoDetector.setRefineParameters [ARG RefineParameters refineParameters=]>
java: void setRefineParameters(RefineParameters refineParameters)
FUNC <void cv.aruco.CharucoDetector.detectBoard [ARG Mat image=, ARG Mat charucoCorners=, ARG Mat charucoIds=, ARG vector_Mat markerCorners=vector_Mat(), ARG Mat markerIds=Mat()]>
java: void detectBoard(Mat image, Mat charucoCorners, Mat charucoIds, List<Mat> markerCorners, Mat markerIds)
java: void detectBoard(Mat image, Mat charucoCorners, Mat charucoIds, List<Mat> markerCorners)
java: void detectBoard(Mat image, Mat charucoCorners, Mat charucoIds)
FUNC <void cv.aruco.CharucoDetector.detectDiamonds [ARG Mat image=, ARG vector_Mat diamondCorners=, ARG Mat diamondIds=, ARG vector_Mat markerCorners=vector_Mat(), ARG Mat markerIds=Mat()]>
java: void detectDiamonds(Mat image, List<Mat> diamondCorners, Mat diamondIds, List<Mat> markerCorners, Mat markerIds)
java: void detectDiamonds(Mat image, List<Mat> diamondCorners, Mat diamondIds, List<Mat> markerCorners)
java: void detectDiamonds(Mat image, List<Mat> diamondCorners, Mat diamondIds)
CLASS cv.aruco::.CharucoParameters : 
FUNC < cv.aruco.CharucoParameters.CharucoParameters []>
java:  CharucoParameters()
FUNC <Mat cv.aruco.CharucoParameters.get_cameraMatrix []>
java: Mat get_cameraMatrix()
FUNC <void cv.aruco.CharucoParameters.set_cameraMatrix [ARG Mat cameraMatrix=]>
java: void set_cameraMatrix(Mat cameraMatrix)
FUNC <Mat cv.aruco.CharucoParameters.get_distCoeffs []>
java: Mat get_distCoeffs()
FUNC <void cv.aruco.CharucoParameters.set_distCoeffs [ARG Mat distCoeffs=]>
java: void set_distCoeffs(Mat distCoeffs)
FUNC <int cv.aruco.CharucoParameters.get_minMarkers []>
java: int get_minMarkers()
FUNC <void cv.aruco.CharucoParameters.set_minMarkers [ARG int minMarkers=]>
java: void set_minMarkers(int minMarkers)
FUNC <bool cv.aruco.CharucoParameters.get_tryRefineMarkers []>
java: boolean get_tryRefineMarkers()
FUNC <void cv.aruco.CharucoParameters.set_tryRefineMarkers [ARG bool tryRefineMarkers=]>
java: void set_tryRefineMarkers(boolean tryRefineMarkers)
CLASS cv.aruco::.DetectorParameters : 
FUNC < cv.aruco.DetectorParameters.DetectorParameters []>
java:  DetectorParameters()
FUNC <bool cv.aruco.DetectorParameters.readDetectorParameters [ARG FileNode fn=]>
SKIP:bool cv::aruco::DetectorParameters::readDetectorParameters(FileNode fn)	 due to ARG type FileNode/I
FUNC <bool cv.aruco.DetectorParameters.writeDetectorParameters [ARG FileStorage fs=, ARG String name=String()]>
SKIP:bool cv::aruco::DetectorParameters::writeDetectorParameters(FileStorage fs, String name = String())	 due to ARG type FileStorage/I
FUNC <int cv.aruco.DetectorParameters.get_adaptiveThreshWinSizeMin []>
java: int get_adaptiveThreshWinSizeMin()
FUNC <void cv.aruco.DetectorParameters.set_adaptiveThreshWinSizeMin [ARG int adaptiveThreshWinSizeMin=]>
java: void set_adaptiveThreshWinSizeMin(int adaptiveThreshWinSizeMin)
FUNC <int cv.aruco.DetectorParameters.get_adaptiveThreshWinSizeMax []>
java: int get_adaptiveThreshWinSizeMax()
FUNC <void cv.aruco.DetectorParameters.set_adaptiveThreshWinSizeMax [ARG int adaptiveThreshWinSizeMax=]>
java: void set_adaptiveThreshWinSizeMax(int adaptiveThreshWinSizeMax)
FUNC <int cv.aruco.DetectorParameters.get_adaptiveThreshWinSizeStep []>
java: int get_adaptiveThreshWinSizeStep()
FUNC <void cv.aruco.DetectorParameters.set_adaptiveThreshWinSizeStep [ARG int adaptiveThreshWinSizeStep=]>
java: void set_adaptiveThreshWinSizeStep(int adaptiveThreshWinSizeStep)
FUNC <double cv.aruco.DetectorParameters.get_adaptiveThreshConstant []>
java: double get_adaptiveThreshConstant()
FUNC <void cv.aruco.DetectorParameters.set_adaptiveThreshConstant [ARG double adaptiveThreshConstant=]>
java: void set_adaptiveThreshConstant(double adaptiveThreshConstant)
FUNC <double cv.aruco.DetectorParameters.get_minMarkerPerimeterRate []>
java: double get_minMarkerPerimeterRate()
FUNC <void cv.aruco.DetectorParameters.set_minMarkerPerimeterRate [ARG double minMarkerPerimeterRate=]>
java: void set_minMarkerPerimeterRate(double minMarkerPerimeterRate)
FUNC <double cv.aruco.DetectorParameters.get_maxMarkerPerimeterRate []>
java: double get_maxMarkerPerimeterRate()
FUNC <void cv.aruco.DetectorParameters.set_maxMarkerPerimeterRate [ARG double maxMarkerPerimeterRate=]>
java: void set_maxMarkerPerimeterRate(double maxMarkerPerimeterRate)
FUNC <double cv.aruco.DetectorParameters.get_polygonalApproxAccuracyRate []>
java: double get_polygonalApproxAccuracyRate()
FUNC <void cv.aruco.DetectorParameters.set_polygonalApproxAccuracyRate [ARG double polygonalApproxAccuracyRate=]>
java: void set_polygonalApproxAccuracyRate(double polygonalApproxAccuracyRate)
FUNC <double cv.aruco.DetectorParameters.get_minCornerDistanceRate []>
java: double get_minCornerDistanceRate()
FUNC <void cv.aruco.DetectorParameters.set_minCornerDistanceRate [ARG double minCornerDistanceRate=]>
java: void set_minCornerDistanceRate(double minCornerDistanceRate)
FUNC <int cv.aruco.DetectorParameters.get_minDistanceToBorder []>
java: int get_minDistanceToBorder()
FUNC <void cv.aruco.DetectorParameters.set_minDistanceToBorder [ARG int minDistanceToBorder=]>
java: void set_minDistanceToBorder(int minDistanceToBorder)
FUNC <double cv.aruco.DetectorParameters.get_minMarkerDistanceRate []>
java: double get_minMarkerDistanceRate()
FUNC <void cv.aruco.DetectorParameters.set_minMarkerDistanceRate [ARG double minMarkerDistanceRate=]>
java: void set_minMarkerDistanceRate(double minMarkerDistanceRate)
FUNC <float cv.aruco.DetectorParameters.get_minGroupDistance []>
java: float get_minGroupDistance()
FUNC <void cv.aruco.DetectorParameters.set_minGroupDistance [ARG float minGroupDistance=]>
java: void set_minGroupDistance(float minGroupDistance)
FUNC <int cv.aruco.DetectorParameters.get_cornerRefinementMethod []>
java: int get_cornerRefinementMethod()
FUNC <void cv.aruco.DetectorParameters.set_cornerRefinementMethod [ARG int cornerRefinementMethod=]>
java: void set_cornerRefinementMethod(int cornerRefinementMethod)
FUNC <int cv.aruco.DetectorParameters.get_cornerRefinementWinSize []>
java: int get_cornerRefinementWinSize()
FUNC <void cv.aruco.DetectorParameters.set_cornerRefinementWinSize [ARG int cornerRefinementWinSize=]>
java: void set_cornerRefinementWinSize(int cornerRefinementWinSize)
FUNC <float cv.aruco.DetectorParameters.get_relativeCornerRefinmentWinSize []>
java: float get_relativeCornerRefinmentWinSize()
FUNC <void cv.aruco.DetectorParameters.set_relativeCornerRefinmentWinSize [ARG float relativeCornerRefinmentWinSize=]>
java: void set_relativeCornerRefinmentWinSize(float relativeCornerRefinmentWinSize)
FUNC <int cv.aruco.DetectorParameters.get_cornerRefinementMaxIterations []>
java: int get_cornerRefinementMaxIterations()
FUNC <void cv.aruco.DetectorParameters.set_cornerRefinementMaxIterations [ARG int cornerRefinementMaxIterations=]>
java: void set_cornerRefinementMaxIterations(int cornerRefinementMaxIterations)
FUNC <double cv.aruco.DetectorParameters.get_cornerRefinementMinAccuracy []>
java: double get_cornerRefinementMinAccuracy()
FUNC <void cv.aruco.DetectorParameters.set_cornerRefinementMinAccuracy [ARG double cornerRefinementMinAccuracy=]>
java: void set_cornerRefinementMinAccuracy(double cornerRefinementMinAccuracy)
FUNC <int cv.aruco.DetectorParameters.get_markerBorderBits []>
java: int get_markerBorderBits()
FUNC <void cv.aruco.DetectorParameters.set_markerBorderBits [ARG int markerBorderBits=]>
java: void set_markerBorderBits(int markerBorderBits)
FUNC <int cv.aruco.DetectorParameters.get_perspectiveRemovePixelPerCell []>
java: int get_perspectiveRemovePixelPerCell()
FUNC <void cv.aruco.DetectorParameters.set_perspectiveRemovePixelPerCell [ARG int perspectiveRemovePixelPerCell=]>
java: void set_perspectiveRemovePixelPerCell(int perspectiveRemovePixelPerCell)
FUNC <double cv.aruco.DetectorParameters.get_perspectiveRemoveIgnoredMarginPerCell []>
java: double get_perspectiveRemoveIgnoredMarginPerCell()
FUNC <void cv.aruco.DetectorParameters.set_perspectiveRemoveIgnoredMarginPerCell [ARG double perspectiveRemoveIgnoredMarginPerCell=]>
java: void set_perspectiveRemoveIgnoredMarginPerCell(double perspectiveRemoveIgnoredMarginPerCell)
FUNC <double cv.aruco.DetectorParameters.get_maxErroneousBitsInBorderRate []>
java: double get_maxErroneousBitsInBorderRate()
FUNC <void cv.aruco.DetectorParameters.set_maxErroneousBitsInBorderRate [ARG double maxErroneousBitsInBorderRate=]>
java: void set_maxErroneousBitsInBorderRate(double maxErroneousBitsInBorderRate)
FUNC <double cv.aruco.DetectorParameters.get_minOtsuStdDev []>
java: double get_minOtsuStdDev()
FUNC <void cv.aruco.DetectorParameters.set_minOtsuStdDev [ARG double minOtsuStdDev=]>
java: void set_minOtsuStdDev(double minOtsuStdDev)
FUNC <double cv.aruco.DetectorParameters.get_errorCorrectionRate []>
java: double get_errorCorrectionRate()
FUNC <void cv.aruco.DetectorParameters.set_errorCorrectionRate [ARG double errorCorrectionRate=]>
java: void set_errorCorrectionRate(double errorCorrectionRate)
FUNC <float cv.aruco.DetectorParameters.get_aprilTagQuadDecimate []>
java: float get_aprilTagQuadDecimate()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagQuadDecimate [ARG float aprilTagQuadDecimate=]>
java: void set_aprilTagQuadDecimate(float aprilTagQuadDecimate)
FUNC <float cv.aruco.DetectorParameters.get_aprilTagQuadSigma []>
java: float get_aprilTagQuadSigma()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagQuadSigma [ARG float aprilTagQuadSigma=]>
java: void set_aprilTagQuadSigma(float aprilTagQuadSigma)
FUNC <int cv.aruco.DetectorParameters.get_aprilTagMinClusterPixels []>
java: int get_aprilTagMinClusterPixels()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagMinClusterPixels [ARG int aprilTagMinClusterPixels=]>
java: void set_aprilTagMinClusterPixels(int aprilTagMinClusterPixels)
FUNC <int cv.aruco.DetectorParameters.get_aprilTagMaxNmaxima []>
java: int get_aprilTagMaxNmaxima()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagMaxNmaxima [ARG int aprilTagMaxNmaxima=]>
java: void set_aprilTagMaxNmaxima(int aprilTagMaxNmaxima)
FUNC <float cv.aruco.DetectorParameters.get_aprilTagCriticalRad []>
java: float get_aprilTagCriticalRad()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagCriticalRad [ARG float aprilTagCriticalRad=]>
java: void set_aprilTagCriticalRad(float aprilTagCriticalRad)
FUNC <float cv.aruco.DetectorParameters.get_aprilTagMaxLineFitMse []>
java: float get_aprilTagMaxLineFitMse()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagMaxLineFitMse [ARG float aprilTagMaxLineFitMse=]>
java: void set_aprilTagMaxLineFitMse(float aprilTagMaxLineFitMse)
FUNC <int cv.aruco.DetectorParameters.get_aprilTagMinWhiteBlackDiff []>
java: int get_aprilTagMinWhiteBlackDiff()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagMinWhiteBlackDiff [ARG int aprilTagMinWhiteBlackDiff=]>
java: void set_aprilTagMinWhiteBlackDiff(int aprilTagMinWhiteBlackDiff)
FUNC <int cv.aruco.DetectorParameters.get_aprilTagDeglitch []>
java: int get_aprilTagDeglitch()
FUNC <void cv.aruco.DetectorParameters.set_aprilTagDeglitch [ARG int aprilTagDeglitch=]>
java: void set_aprilTagDeglitch(int aprilTagDeglitch)
FUNC <bool cv.aruco.DetectorParameters.get_detectInvertedMarker []>
java: boolean get_detectInvertedMarker()
FUNC <void cv.aruco.DetectorParameters.set_detectInvertedMarker [ARG bool detectInvertedMarker=]>
java: void set_detectInvertedMarker(boolean detectInvertedMarker)
FUNC <bool cv.aruco.DetectorParameters.get_useAruco3Detection []>
java: boolean get_useAruco3Detection()
FUNC <void cv.aruco.DetectorParameters.set_useAruco3Detection [ARG bool useAruco3Detection=]>
java: void set_useAruco3Detection(boolean useAruco3Detection)
FUNC <int cv.aruco.DetectorParameters.get_minSideLengthCanonicalImg []>
java: int get_minSideLengthCanonicalImg()
FUNC <void cv.aruco.DetectorParameters.set_minSideLengthCanonicalImg [ARG int minSideLengthCanonicalImg=]>
java: void set_minSideLengthCanonicalImg(int minSideLengthCanonicalImg)
FUNC <float cv.aruco.DetectorParameters.get_minMarkerLengthRatioOriginalImg []>
java: float get_minMarkerLengthRatioOriginalImg()
FUNC <void cv.aruco.DetectorParameters.set_minMarkerLengthRatioOriginalImg [ARG float minMarkerLengthRatioOriginalImg=]>
java: void set_minMarkerLengthRatioOriginalImg(float minMarkerLengthRatioOriginalImg)
CLASS cv.aruco::.Dictionary : 
FUNC < cv.aruco.Dictionary.Dictionary []>
java:  Dictionary()
FUNC < cv.aruco.Dictionary.Dictionary [ARG Mat bytesList=, ARG int _markerSize=, ARG int maxcorr=0]>
java:  Dictionary(Mat bytesList, int _markerSize, int maxcorr)
java:  Dictionary(Mat bytesList, int _markerSize)
FUNC <bool cv.aruco.Dictionary.readDictionary [ARG FileNode fn=]>
SKIP:bool cv::aruco::Dictionary::readDictionary(FileNode fn)	 due to ARG type FileNode/I
FUNC <void cv.aruco.Dictionary.writeDictionary [ARG FileStorage fs=, ARG String name=String()]>
SKIP:void cv::aruco::Dictionary::writeDictionary(FileStorage fs, String name = String())	 due to ARG type FileStorage/I
FUNC <bool cv.aruco.Dictionary.identify [ARG Mat onlyBits=, ARG int idx=, ARG int rotation=, ARG double maxCorrectionRate=]>
java: boolean identify(Mat onlyBits, int[] idx, int[] rotation, double maxCorrectionRate)
FUNC <int cv.aruco.Dictionary.getDistanceToId [ARG Mat bits=, ARG int id=, ARG bool allRotations=true]>
java: int getDistanceToId(Mat bits, int id, boolean allRotations)
java: int getDistanceToId(Mat bits, int id)
FUNC <void cv.aruco.Dictionary.generateImageMarker [ARG int id=, ARG int sidePixels=, ARG Mat _img=, ARG int borderBits=1]>
java: void generateImageMarker(int id, int sidePixels, Mat _img, int borderBits)
java: void generateImageMarker(int id, int sidePixels, Mat _img)
FUNC <Mat cv.aruco.Dictionary.getByteListFromBits [ARG Mat bits=]>
java: Mat getByteListFromBits(Mat bits)
FUNC <Mat cv.aruco.Dictionary.getBitsFromByteList [ARG Mat byteList=, ARG int markerSize=]>
java: Mat getBitsFromByteList(Mat byteList, int markerSize)
FUNC <Mat cv.aruco.Dictionary.get_bytesList []>
java: Mat get_bytesList()
FUNC <void cv.aruco.Dictionary.set_bytesList [ARG Mat bytesList=]>
java: void set_bytesList(Mat bytesList)
FUNC <int cv.aruco.Dictionary.get_markerSize []>
java: int get_markerSize()
FUNC <void cv.aruco.Dictionary.set_markerSize [ARG int markerSize=]>
java: void set_markerSize(int markerSize)
FUNC <int cv.aruco.Dictionary.get_maxCorrectionBits []>
java: int get_maxCorrectionBits()
FUNC <void cv.aruco.Dictionary.set_maxCorrectionBits [ARG int maxCorrectionBits=]>
java: void set_maxCorrectionBits(int maxCorrectionBits)
CLASS cv.aruco::.GridBoard : Board
FUNC < cv.aruco.GridBoard.GridBoard [ARG Size size=, ARG float markerLength=, ARG float markerSeparation=, ARG Dictionary dictionary=, ARG Mat ids=Mat()]>
java:  GridBoard(Size size, float markerLength, float markerSeparation, Dictionary dictionary, Mat ids)
java:  GridBoard(Size size, float markerLength, float markerSeparation, Dictionary dictionary)
FUNC <Size cv.aruco.GridBoard.getGridSize []>
java: Size getGridSize()
FUNC <float cv.aruco.GridBoard.getMarkerLength []>
java: float getMarkerLength()
FUNC <float cv.aruco.GridBoard.getMarkerSeparation []>
java: float getMarkerSeparation()
CLASS cv.aruco::.RefineParameters : 
FUNC < cv.aruco.RefineParameters.RefineParameters [ARG float minRepDistance=10.f, ARG float errorCorrectionRate=3.f, ARG bool checkAllOrders=true]>
java:  RefineParameters(float minRepDistance, float errorCorrectionRate, boolean checkAllOrders)
java:  RefineParameters(float minRepDistance, float errorCorrectionRate)
java:  RefineParameters(float minRepDistance)
java:  RefineParameters()
FUNC <bool cv.aruco.RefineParameters.readRefineParameters [ARG FileNode fn=]>
SKIP:bool cv::aruco::RefineParameters::readRefineParameters(FileNode fn)	 due to ARG type FileNode/I
FUNC <bool cv.aruco.RefineParameters.writeRefineParameters [ARG FileStorage fs=, ARG String name=String()]>
SKIP:bool cv::aruco::RefineParameters::writeRefineParameters(FileStorage fs, String name = String())	 due to ARG type FileStorage/I
FUNC <float cv.aruco.RefineParameters.get_minRepDistance []>
java: float get_minRepDistance()
FUNC <void cv.aruco.RefineParameters.set_minRepDistance [ARG float minRepDistance=]>
java: void set_minRepDistance(float minRepDistance)
FUNC <float cv.aruco.RefineParameters.get_errorCorrectionRate []>
java: float get_errorCorrectionRate()
FUNC <void cv.aruco.RefineParameters.set_errorCorrectionRate [ARG float errorCorrectionRate=]>
java: void set_errorCorrectionRate(float errorCorrectionRate)
FUNC <bool cv.aruco.RefineParameters.get_checkAllOrders []>
java: boolean get_checkAllOrders()
FUNC <void cv.aruco.RefineParameters.set_checkAllOrders [ARG bool checkAllOrders=]>
java: void set_checkAllOrders(boolean checkAllOrders)
CLASS cv.barcode::.BarcodeDetector : GraphicalCodeDetector
FUNC < cv.barcode.BarcodeDetector.BarcodeDetector []>
java:  BarcodeDetector()
FUNC < cv.barcode.BarcodeDetector.BarcodeDetector [ARG string prototxt_path=, ARG string model_path=]>
java:  BarcodeDetector(String prototxt_path, String model_path)
FUNC <bool cv.barcode.BarcodeDetector.decodeWithType [ARG Mat img=, ARG Mat points=, ARG vector_string decoded_info=, ARG vector_string decoded_type=]>
java: boolean decodeWithType(Mat img, Mat points, List<String> decoded_info, List<String> decoded_type)
FUNC <bool cv.barcode.BarcodeDetector.detectAndDecodeWithType [ARG Mat img=, ARG vector_string decoded_info=, ARG vector_string decoded_type=, ARG Mat points=Mat()]>
java: boolean detectAndDecodeWithType(Mat img, List<String> decoded_info, List<String> decoded_type, Mat points)
java: boolean detectAndDecodeWithType(Mat img, List<String> decoded_info, List<String> decoded_type)
FUNC <double cv.barcode.BarcodeDetector.getDownsamplingThreshold []>
java: double getDownsamplingThreshold()
FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setDownsamplingThreshold [ARG double thresh=]>
java: BarcodeDetector setDownsamplingThreshold(double thresh)
FUNC <void cv.barcode.BarcodeDetector.getDetectorScales [ARG vector_float sizes=]>
java: void getDetectorScales(MatOfFloat sizes)
FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setDetectorScales [ARG vector_float sizes=]>
java: BarcodeDetector setDetectorScales(MatOfFloat sizes)
FUNC <double cv.barcode.BarcodeDetector.getGradientThreshold []>
java: double getGradientThreshold()
FUNC <BarcodeDetector cv.barcode.BarcodeDetector.setGradientThreshold [ARG double thresh=]>
java: BarcodeDetector setGradientThreshold(double thresh)

=== MODULE: video (/home/adminlab/franka_ros2_ws/src/opencv/modules/video) ===


Files (5):
['/home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/tracking.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/video.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/background_segm.hpp',
 '/home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/detail/tracking.detail.hpp']

Common headers (0):
[]
ok: class CLASS cv::.Video : , name: Video, base: 


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video.hpp =====
Namespaces: []
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/tracking.hpp =====
Namespaces: ['cv']

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.OPTFLOW_USE_INITIAL_FLOW', '4', [], [], None, ''],
        ['const cv.OPTFLOW_LK_GET_MIN_EIGENVALS', '8', [], [], None, ''],
        ['const cv.OPTFLOW_FARNEBACK_GAUSSIAN', '256', [], [], None, '']],
    None]
ok: CONST OPTFLOW_USE_INITIAL_FLOW=4
ok: CONST OPTFLOW_LK_GET_MIN_EIGENVALS=8
ok: CONST OPTFLOW_FARNEBACK_GAUSSIAN=256

--- Incoming ---
[   'cv.CamShift',
    'RotatedRect',
    [],
    [   ['Mat', 'probImage', '', []],
        ['Rect', 'window', '', ['/IO', '/Ref']],
        ['TermCriteria', 'criteria', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..CamShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.meanShift',
    'int',
    [],
    [   ['Mat', 'probImage', '', []],
        ['Rect', 'window', '', ['/IO', '/Ref']],
        ['TermCriteria', 'criteria', '', []]],
    'int']
ok: FUNC <int cv..meanShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.buildOpticalFlowPyramid',
    'int',
    [],
    [   ['Mat', 'img', '', []],
        ['vector_Mat', 'pyramid', '', ['/O']],
        ['Size', 'winSize', '', []],
        ['int', 'maxLevel', '', []],
        ['bool', 'withDerivatives', 'true', []],
        ['int', 'pyrBorder', 'BORDER_REFLECT_101', []],
        ['int', 'derivBorder', 'BORDER_CONSTANT', []],
        ['bool', 'tryReuseInputImage', 'true', []]],
    'int']
ok: FUNC <int cv..buildOpticalFlowPyramid [ARG Mat img=, ARG vector_Mat pyramid=, ARG Size winSize=, ARG int maxLevel=, ARG bool withDerivatives=true, ARG int pyrBorder=BORDER_REFLECT_101, ARG int derivBorder=BORDER_CONSTANT, ARG bool tryReuseInputImage=true]>

--- Incoming ---
[   'cv.calcOpticalFlowPyrLK',
    'void',
    [],
    [   ['Mat', 'prevImg', '', []],
        ['Mat', 'nextImg', '', []],
        ['Mat', 'prevPts', '', []],
        ['Mat', 'nextPts', '', ['/IO']],
        ['Mat', 'status', '', ['/O']],
        ['Mat', 'err', '', ['/O']],
        ['Size', 'winSize', 'Size(21,21)', []],
        ['int', 'maxLevel', '3', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)',
            []],
        ['int', 'flags', '0', []],
        ['double', 'minEigThreshold', '1e-4', []]],
    'void']
ok: FUNC <void cv..calcOpticalFlowPyrLK [ARG Mat prevImg=, ARG Mat nextImg=, ARG vector_Point2f prevPts=, ARG vector_Point2f nextPts=, ARG vector_uchar status=, ARG vector_float err=, ARG Size winSize=Size(21,21), ARG int maxLevel=3, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>

--- Incoming ---
[   'cv.calcOpticalFlowFarneback',
    'void',
    [],
    [   ['Mat', 'prev', '', []],
        ['Mat', 'next', '', []],
        ['Mat', 'flow', '', ['/IO']],
        ['double', 'pyr_scale', '', []],
        ['int', 'levels', '', []],
        ['int', 'winsize', '', []],
        ['int', 'iterations', '', []],
        ['int', 'poly_n', '', []],
        ['double', 'poly_sigma', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..calcOpticalFlowFarneback [ARG Mat prev=, ARG Mat next=, ARG Mat flow=, ARG double pyr_scale=, ARG int levels=, ARG int winsize=, ARG int iterations=, ARG int poly_n=, ARG double poly_sigma=, ARG int flags=]>

--- Incoming ---
[   'enum cv.<unnamed>',
    '',
    [],
    [   ['const cv.MOTION_TRANSLATION', '0', [], [], None, ''],
        ['const cv.MOTION_EUCLIDEAN', '1', [], [], None, ''],
        ['const cv.MOTION_AFFINE', '2', [], [], None, ''],
        ['const cv.MOTION_HOMOGRAPHY', '3', [], [], None, '']],
    None]
ok: CONST MOTION_TRANSLATION=0
ok: CONST MOTION_EUCLIDEAN=1
ok: CONST MOTION_AFFINE=2
ok: CONST MOTION_HOMOGRAPHY=3

--- Incoming ---
[   'cv.computeECC',
    'double',
    [],
    [   ['Mat', 'templateImage', '', []],
        ['Mat', 'inputImage', '', []],
        ['Mat', 'inputMask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..computeECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat inputMask=Mat()]>

--- Incoming ---
[   'cv.findTransformECC',
    'double',
    [],
    [   ['Mat', 'templateImage', '', []],
        ['Mat', 'inputImage', '', []],
        ['Mat', 'warpMatrix', '', ['/IO']],
        ['int', 'motionType', '', []],
        ['TermCriteria', 'criteria', '', []],
        ['Mat', 'inputMask', '', []],
        ['int', 'gaussFiltSize', '', []]],
    'double']
ok: FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=, ARG TermCriteria criteria=, ARG Mat inputMask=, ARG int gaussFiltSize=]>

--- Incoming ---
[   'cv.findTransformECC',
    'double',
    [],
    [   ['Mat', 'templateImage', '', []],
        ['Mat', 'inputImage', '', []],
        ['Mat', 'warpMatrix', '', ['/IO']],
        ['int', 'motionType', 'MOTION_AFFINE', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001)',
            []],
        ['Mat', 'inputMask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=MOTION_AFFINE, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), ARG Mat inputMask=Mat()]>

--- Incoming ---
[   'class cv.KalmanFilter',
    '',
    [],
    [   ['Mat', 'statePre', '', ['/RW']],
        ['Mat', 'statePost', '', ['/RW']],
        ['Mat', 'transitionMatrix', '', ['/RW']],
        ['Mat', 'controlMatrix', '', ['/RW']],
        ['Mat', 'measurementMatrix', '', ['/RW']],
        ['Mat', 'processNoiseCov', '', ['/RW']],
        ['Mat', 'measurementNoiseCov', '', ['/RW']],
        ['Mat', 'errorCovPre', '', ['/RW']],
        ['Mat', 'gain', '', ['/RW']],
        ['Mat', 'errorCovPost', '', ['/RW']]],
    None]
ok: class CLASS cv::.KalmanFilter : , name: KalmanFilter, base: 

--- Incoming ---
['cv.KalmanFilter.KalmanFilter', '', [], [], None]
ok: FUNC < cv.KalmanFilter.KalmanFilter []>

--- Incoming ---
[   'cv.KalmanFilter.KalmanFilter',
    '',
    [],
    [   ['int', 'dynamParams', '', []],
        ['int', 'measureParams', '', []],
        ['int', 'controlParams', '0', []],
        ['int', 'type', 'CV_32F', []]],
    None]
ok: FUNC < cv.KalmanFilter.KalmanFilter [ARG int dynamParams=, ARG int measureParams=, ARG int controlParams=0, ARG int type=CV_32F]>

--- Incoming ---
[   'cv.KalmanFilter.predict',
    'Mat',
    [],
    [['Mat', 'control', 'Mat()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.KalmanFilter.predict [ARG Mat control=Mat()]>

--- Incoming ---
[   'cv.KalmanFilter.correct',
    'Mat',
    [],
    [['Mat', 'measurement', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.KalmanFilter.correct [ARG Mat measurement=]>

--- Incoming ---
[   'cv.readOpticalFlow',
    'Mat',
    [],
    [['String', 'path', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv..readOpticalFlow [ARG String path=]>

--- Incoming ---
[   'cv.writeOpticalFlow',
    'bool',
    [],
    [['String', 'path', '', ['/C', '/Ref']], ['Mat', 'flow', '', []]],
    'bool']
ok: FUNC <bool cv..writeOpticalFlow [ARG String path=, ARG Mat flow=]>

--- Incoming ---
['class cv.DenseOpticalFlow', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.DenseOpticalFlow : Algorithm, name: DenseOpticalFlow, base: Algorithm

--- Incoming ---
[   'cv.DenseOpticalFlow.calc',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'I0', '', []],
        ['Mat', 'I1', '', []],
        ['Mat', 'flow', '', ['/IO']]],
    'void']
ok: FUNC <void cv.DenseOpticalFlow.calc [ARG Mat I0=, ARG Mat I1=, ARG Mat flow=]>

--- Incoming ---
['cv.DenseOpticalFlow.collectGarbage', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.DenseOpticalFlow.collectGarbage []>

--- Incoming ---
['class cv.SparseOpticalFlow', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.SparseOpticalFlow : Algorithm, name: SparseOpticalFlow, base: Algorithm

--- Incoming ---
[   'cv.SparseOpticalFlow.calc',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'prevImg', '', []],
        ['Mat', 'nextImg', '', []],
        ['Mat', 'prevPts', '', []],
        ['Mat', 'nextPts', '', ['/IO']],
        ['Mat', 'status', '', ['/O']],
        ['Mat', 'err', 'cv::Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.SparseOpticalFlow.calc [ARG Mat prevImg=, ARG Mat nextImg=, ARG Mat prevPts=, ARG Mat nextPts=, ARG Mat status=, ARG Mat err=cv::Mat()]>

--- Incoming ---
['class cv.FarnebackOpticalFlow', ': cv::DenseOpticalFlow', [], [], None]
ok: class CLASS cv::.FarnebackOpticalFlow : DenseOpticalFlow, name: FarnebackOpticalFlow, base: DenseOpticalFlow

--- Incoming ---
['cv.FarnebackOpticalFlow.getNumLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getNumLevels []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setNumLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'numLevels', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setNumLevels [ARG int numLevels=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getPyrScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.FarnebackOpticalFlow.getPyrScale []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPyrScale',
    'void',
    ['/V', '/PV'],
    [['double', 'pyrScale', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPyrScale [ARG double pyrScale=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getFastPyramids',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.FarnebackOpticalFlow.getFastPyramids []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setFastPyramids',
    'void',
    ['/V', '/PV'],
    [['bool', 'fastPyramids', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setFastPyramids [ARG bool fastPyramids=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getWinSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getWinSize []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setWinSize',
    'void',
    ['/V', '/PV'],
    [['int', 'winSize', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setWinSize [ARG int winSize=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getNumIters', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getNumIters []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setNumIters',
    'void',
    ['/V', '/PV'],
    [['int', 'numIters', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setNumIters [ARG int numIters=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getPolyN', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getPolyN []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPolyN',
    'void',
    ['/V', '/PV'],
    [['int', 'polyN', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPolyN [ARG int polyN=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getPolySigma',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.FarnebackOpticalFlow.getPolySigma []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPolySigma',
    'void',
    ['/V', '/PV'],
    [['double', 'polySigma', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPolySigma [ARG double polySigma=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getFlags', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getFlags []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setFlags',
    'void',
    ['/V', '/PV'],
    [['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setFlags [ARG int flags=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.create',
    'Ptr_FarnebackOpticalFlow',
    ['/S'],
    [   ['int', 'numLevels', '5', []],
        ['double', 'pyrScale', '0.5', []],
        ['bool', 'fastPyramids', 'false', []],
        ['int', 'winSize', '13', []],
        ['int', 'numIters', '10', []],
        ['int', 'polyN', '5', []],
        ['double', 'polySigma', '1.1', []],
        ['int', 'flags', '0', []]],
    'Ptr<FarnebackOpticalFlow>']
ok: FUNC <Ptr_FarnebackOpticalFlow cv.FarnebackOpticalFlow.create [ARG int numLevels=5, ARG double pyrScale=0.5, ARG bool fastPyramids=false, ARG int winSize=13, ARG int numIters=10, ARG int polyN=5, ARG double polySigma=1.1, ARG int flags=0]>

--- Incoming ---
['class cv.VariationalRefinement', ': cv::DenseOpticalFlow', [], [], None]
ok: class CLASS cv::.VariationalRefinement : DenseOpticalFlow, name: VariationalRefinement, base: DenseOpticalFlow

--- Incoming ---
[   'cv.VariationalRefinement.calcUV',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'I0', '', []],
        ['Mat', 'I1', '', []],
        ['Mat', 'flow_u', '', ['/IO']],
        ['Mat', 'flow_v', '', ['/IO']]],
    'void']
ok: FUNC <void cv.VariationalRefinement.calcUV [ARG Mat I0=, ARG Mat I1=, ARG Mat flow_u=, ARG Mat flow_v=]>

--- Incoming ---
[   'cv.VariationalRefinement.getFixedPointIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.VariationalRefinement.getFixedPointIterations []>

--- Incoming ---
[   'cv.VariationalRefinement.setFixedPointIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setFixedPointIterations [ARG int val=]>

--- Incoming ---
[   'cv.VariationalRefinement.getSorIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.VariationalRefinement.getSorIterations []>

--- Incoming ---
[   'cv.VariationalRefinement.setSorIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setSorIterations [ARG int val=]>

--- Incoming ---
['cv.VariationalRefinement.getOmega', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.VariationalRefinement.getOmega []>

--- Incoming ---
[   'cv.VariationalRefinement.setOmega',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setOmega [ARG float val=]>

--- Incoming ---
['cv.VariationalRefinement.getAlpha', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.VariationalRefinement.getAlpha []>

--- Incoming ---
[   'cv.VariationalRefinement.setAlpha',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setAlpha [ARG float val=]>

--- Incoming ---
['cv.VariationalRefinement.getDelta', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.VariationalRefinement.getDelta []>

--- Incoming ---
[   'cv.VariationalRefinement.setDelta',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setDelta [ARG float val=]>

--- Incoming ---
['cv.VariationalRefinement.getGamma', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.VariationalRefinement.getGamma []>

--- Incoming ---
[   'cv.VariationalRefinement.setGamma',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setGamma [ARG float val=]>

--- Incoming ---
[   'cv.VariationalRefinement.getEpsilon',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.VariationalRefinement.getEpsilon []>

--- Incoming ---
[   'cv.VariationalRefinement.setEpsilon',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.VariationalRefinement.setEpsilon [ARG float val=]>

--- Incoming ---
[   'cv.VariationalRefinement.create',
    'Ptr_VariationalRefinement',
    ['/S'],
    [],
    'Ptr<VariationalRefinement>']
ok: FUNC <Ptr_VariationalRefinement cv.VariationalRefinement.create []>

--- Incoming ---
['class cv.DISOpticalFlow', ': cv::DenseOpticalFlow', [], [], None]
ok: class CLASS cv::.DISOpticalFlow : DenseOpticalFlow, name: DISOpticalFlow, base: DenseOpticalFlow

--- Incoming ---
[   'enum cv.DISOpticalFlow.<unnamed>',
    '',
    [],
    [   ['const cv.DISOpticalFlow.PRESET_ULTRAFAST', '0', [], [], None, ''],
        ['const cv.DISOpticalFlow.PRESET_FAST', '1', [], [], None, ''],
        ['const cv.DISOpticalFlow.PRESET_MEDIUM', '2', [], [], None, '']],
    None]
ok: CONST PRESET_ULTRAFAST=0
ok: CONST PRESET_FAST=1
ok: CONST PRESET_MEDIUM=2

--- Incoming ---
['cv.DISOpticalFlow.getFinestScale', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.DISOpticalFlow.getFinestScale []>

--- Incoming ---
[   'cv.DISOpticalFlow.setFinestScale',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setFinestScale [ARG int val=]>

--- Incoming ---
['cv.DISOpticalFlow.getPatchSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.DISOpticalFlow.getPatchSize []>

--- Incoming ---
[   'cv.DISOpticalFlow.setPatchSize',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setPatchSize [ARG int val=]>

--- Incoming ---
['cv.DISOpticalFlow.getPatchStride', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.DISOpticalFlow.getPatchStride []>

--- Incoming ---
[   'cv.DISOpticalFlow.setPatchStride',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setPatchStride [ARG int val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getGradientDescentIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DISOpticalFlow.getGradientDescentIterations []>

--- Incoming ---
[   'cv.DISOpticalFlow.setGradientDescentIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setGradientDescentIterations [ARG int val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getVariationalRefinementIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DISOpticalFlow.getVariationalRefinementIterations []>

--- Incoming ---
[   'cv.DISOpticalFlow.setVariationalRefinementIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setVariationalRefinementIterations [ARG int val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getVariationalRefinementAlpha',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.DISOpticalFlow.getVariationalRefinementAlpha []>

--- Incoming ---
[   'cv.DISOpticalFlow.setVariationalRefinementAlpha',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setVariationalRefinementAlpha [ARG float val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getVariationalRefinementDelta',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.DISOpticalFlow.getVariationalRefinementDelta []>

--- Incoming ---
[   'cv.DISOpticalFlow.setVariationalRefinementDelta',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setVariationalRefinementDelta [ARG float val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getVariationalRefinementGamma',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.DISOpticalFlow.getVariationalRefinementGamma []>

--- Incoming ---
[   'cv.DISOpticalFlow.setVariationalRefinementGamma',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setVariationalRefinementGamma [ARG float val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getVariationalRefinementEpsilon',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.DISOpticalFlow.getVariationalRefinementEpsilon []>

--- Incoming ---
[   'cv.DISOpticalFlow.setVariationalRefinementEpsilon',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setVariationalRefinementEpsilon [ARG float val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getUseMeanNormalization',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.DISOpticalFlow.getUseMeanNormalization []>

--- Incoming ---
[   'cv.DISOpticalFlow.setUseMeanNormalization',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setUseMeanNormalization [ARG bool val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.getUseSpatialPropagation',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.DISOpticalFlow.getUseSpatialPropagation []>

--- Incoming ---
[   'cv.DISOpticalFlow.setUseSpatialPropagation',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.DISOpticalFlow.setUseSpatialPropagation [ARG bool val=]>

--- Incoming ---
[   'cv.DISOpticalFlow.create',
    'Ptr_DISOpticalFlow',
    ['/S'],
    [['int', 'preset', 'DISOpticalFlow::PRESET_FAST', []]],
    'Ptr<DISOpticalFlow>']
ok: FUNC <Ptr_DISOpticalFlow cv.DISOpticalFlow.create [ARG int preset=DISOpticalFlow::PRESET_FAST]>

--- Incoming ---
['class cv.SparsePyrLKOpticalFlow', ': cv::SparseOpticalFlow', [], [], None]
ok: class CLASS cv::.SparsePyrLKOpticalFlow : SparseOpticalFlow, name: SparsePyrLKOpticalFlow, base: SparseOpticalFlow

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getWinSize',
    'Size',
    ['/C', '/V', '/PV'],
    [],
    'Size']
ok: FUNC <Size cv.SparsePyrLKOpticalFlow.getWinSize []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setWinSize',
    'void',
    ['/V', '/PV'],
    [['Size', 'winSize', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setWinSize [ARG Size winSize=]>

--- Incoming ---
['cv.SparsePyrLKOpticalFlow.getMaxLevel', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SparsePyrLKOpticalFlow.getMaxLevel []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setMaxLevel',
    'void',
    ['/V', '/PV'],
    [['int', 'maxLevel', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setMaxLevel [ARG int maxLevel=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.SparsePyrLKOpticalFlow.getTermCriteria []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'crit', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setTermCriteria [ARG TermCriteria crit=]>

--- Incoming ---
['cv.SparsePyrLKOpticalFlow.getFlags', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SparsePyrLKOpticalFlow.getFlags []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setFlags',
    'void',
    ['/V', '/PV'],
    [['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setFlags [ARG int flags=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getMinEigThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.SparsePyrLKOpticalFlow.getMinEigThreshold []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setMinEigThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'minEigThreshold', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setMinEigThreshold [ARG double minEigThreshold=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.create',
    'Ptr_SparsePyrLKOpticalFlow',
    ['/S'],
    [   ['Size', 'winSize', 'Size(21, 21)', []],
        ['int', 'maxLevel', '3', []],
        [   'TermCriteria',
            'crit',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)',
            []],
        ['int', 'flags', '0', []],
        ['double', 'minEigThreshold', '1e-4', []]],
    'Ptr<SparsePyrLKOpticalFlow>']
ok: FUNC <Ptr_SparsePyrLKOpticalFlow cv.SparsePyrLKOpticalFlow.create [ARG Size winSize=Size(21, 21), ARG int maxLevel=3, ARG TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>

--- Incoming ---
['class cv.Tracker', '', [], [], None]
ok: class CLASS cv::.Tracker : , name: Tracker, base: 

--- Incoming ---
[   'cv.Tracker.init',
    'void',
    ['/V', '/PV'],
    [['Mat', 'image', '', []], ['Rect', 'boundingBox', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Tracker.init [ARG Mat image=, ARG Rect boundingBox=]>

--- Incoming ---
[   'cv.Tracker.update',
    'bool',
    ['/V', '/PV'],
    [['Mat', 'image', '', []], ['Rect', 'boundingBox', '', ['/O', '/Ref']]],
    'bool']
ok: FUNC <bool cv.Tracker.update [ARG Mat image=, ARG Rect boundingBox=]>

--- Incoming ---
['class cv.TrackerMIL', ': cv::Tracker', [], [], None]
ok: class CLASS cv::.TrackerMIL : Tracker, name: TrackerMIL, base: Tracker

--- Incoming ---
[   'struct cv.TrackerMIL.Params',
    '',
    ['/Simple'],
    [   ['float', 'samplerInitInRadius', '', ['/RW']],
        ['int', 'samplerInitMaxNegNum', '', ['/RW']],
        ['float', 'samplerSearchWinSize', '', ['/RW']],
        ['float', 'samplerTrackInRadius', '', ['/RW']],
        ['int', 'samplerTrackMaxPosNum', '', ['/RW']],
        ['int', 'samplerTrackMaxNegNum', '', ['/RW']],
        ['int', 'featureSetNumFeatures', '', ['/RW']]],
    None]
ok: class CLASS cv::TrackerMIL.TrackerMIL_Params : , name: TrackerMIL_Params, base: 

--- Incoming ---
['cv.TrackerMIL.Params.Params', '', [], [], None]
ok: FUNC < cv.TrackerMIL.Params.TrackerMIL_Params []>

--- Incoming ---
[   'cv.TrackerMIL.create',
    'Ptr_TrackerMIL',
    ['/S'],
    [   [   'TrackerMIL_Params',
            'parameters',
            'TrackerMIL::Params()',
            ['/C', '/Ref']]],
    'Ptr<TrackerMIL>']
ok: FUNC <Ptr_TrackerMIL cv.TrackerMIL.create [ARG TrackerMIL_Params parameters=TrackerMIL::Params()]>

--- Incoming ---
['class cv.TrackerGOTURN', ': cv::Tracker', [], [], None]
ok: class CLASS cv::.TrackerGOTURN : Tracker, name: TrackerGOTURN, base: Tracker

--- Incoming ---
[   'struct cv.TrackerGOTURN.Params',
    '',
    ['/Simple'],
    [['string', 'modelTxt', '', ['/RW']], ['string', 'modelBin', '', ['/RW']]],
    None]
ok: class CLASS cv::TrackerGOTURN.TrackerGOTURN_Params : , name: TrackerGOTURN_Params, base: 

--- Incoming ---
['cv.TrackerGOTURN.Params.Params', '', [], [], None]
ok: FUNC < cv.TrackerGOTURN.Params.TrackerGOTURN_Params []>

--- Incoming ---
[   'cv.TrackerGOTURN.create',
    'Ptr_TrackerGOTURN',
    ['/S'],
    [   [   'TrackerGOTURN_Params',
            'parameters',
            'TrackerGOTURN::Params()',
            ['/C', '/Ref']]],
    'Ptr<TrackerGOTURN>']
ok: FUNC <Ptr_TrackerGOTURN cv.TrackerGOTURN.create [ARG TrackerGOTURN_Params parameters=TrackerGOTURN::Params()]>

--- Incoming ---
['class cv.TrackerDaSiamRPN', ': cv::Tracker', [], [], None]
ok: class CLASS cv::.TrackerDaSiamRPN : Tracker, name: TrackerDaSiamRPN, base: Tracker

--- Incoming ---
[   'struct cv.TrackerDaSiamRPN.Params',
    '',
    ['/Simple'],
    [   ['string', 'model', '', ['/RW']],
        ['string', 'kernel_cls1', '', ['/RW']],
        ['string', 'kernel_r1', '', ['/RW']],
        ['int', 'backend', '', ['/RW']],
        ['int', 'target', '', ['/RW']]],
    None]
ok: class CLASS cv::TrackerDaSiamRPN.TrackerDaSiamRPN_Params : , name: TrackerDaSiamRPN_Params, base: 

--- Incoming ---
['cv.TrackerDaSiamRPN.Params.Params', '', [], [], None]
ok: FUNC < cv.TrackerDaSiamRPN.Params.TrackerDaSiamRPN_Params []>

--- Incoming ---
[   'cv.TrackerDaSiamRPN.create',
    'Ptr_TrackerDaSiamRPN',
    ['/S'],
    [   [   'TrackerDaSiamRPN_Params',
            'parameters',
            'TrackerDaSiamRPN::Params()',
            ['/C', '/Ref']]],
    'Ptr<TrackerDaSiamRPN>']
ok: FUNC <Ptr_TrackerDaSiamRPN cv.TrackerDaSiamRPN.create [ARG TrackerDaSiamRPN_Params parameters=TrackerDaSiamRPN::Params()]>

--- Incoming ---
['cv.TrackerDaSiamRPN.getTrackingScore', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.TrackerDaSiamRPN.getTrackingScore []>

--- Incoming ---
['class cv.TrackerNano', ': cv::Tracker', [], [], None]
ok: class CLASS cv::.TrackerNano : Tracker, name: TrackerNano, base: Tracker

--- Incoming ---
[   'struct cv.TrackerNano.Params',
    '',
    ['/Simple'],
    [   ['string', 'backbone', '', ['/RW']],
        ['string', 'neckhead', '', ['/RW']],
        ['int', 'backend', '', ['/RW']],
        ['int', 'target', '', ['/RW']]],
    None]
ok: class CLASS cv::TrackerNano.TrackerNano_Params : , name: TrackerNano_Params, base: 

--- Incoming ---
['cv.TrackerNano.Params.Params', '', [], [], None]
ok: FUNC < cv.TrackerNano.Params.TrackerNano_Params []>

--- Incoming ---
[   'cv.TrackerNano.create',
    'Ptr_TrackerNano',
    ['/S'],
    [   [   'TrackerNano_Params',
            'parameters',
            'TrackerNano::Params()',
            ['/C', '/Ref']]],
    'Ptr<TrackerNano>']
ok: FUNC <Ptr_TrackerNano cv.TrackerNano.create [ARG TrackerNano_Params parameters=TrackerNano::Params()]>

--- Incoming ---
['cv.TrackerNano.getTrackingScore', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.TrackerNano.getTrackingScore []>

--- Incoming ---
['class cv.TrackerVit', ': cv::Tracker', [], [], None]
ok: class CLASS cv::.TrackerVit : Tracker, name: TrackerVit, base: Tracker

--- Incoming ---
[   'struct cv.TrackerVit.Params',
    '',
    ['/Simple'],
    [   ['string', 'net', '', ['/RW']],
        ['int', 'backend', '', ['/RW']],
        ['int', 'target', '', ['/RW']],
        ['Scalar', 'meanvalue', '', ['/RW']],
        ['Scalar', 'stdvalue', '', ['/RW']]],
    None]
ok: class CLASS cv::TrackerVit.TrackerVit_Params : , name: TrackerVit_Params, base: 

--- Incoming ---
['cv.TrackerVit.Params.Params', '', [], [], None]
ok: FUNC < cv.TrackerVit.Params.TrackerVit_Params []>

--- Incoming ---
[   'cv.TrackerVit.create',
    'Ptr_TrackerVit',
    ['/S'],
    [   [   'TrackerVit_Params',
            'parameters',
            'TrackerVit::Params()',
            ['/C', '/Ref']]],
    'Ptr<TrackerVit>']
ok: FUNC <Ptr_TrackerVit cv.TrackerVit.create [ARG TrackerVit_Params parameters=TrackerVit::Params()]>

--- Incoming ---
['cv.TrackerVit.getTrackingScore', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.TrackerVit.getTrackingScore []>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/video.hpp =====
Namespaces: ['cv']
Ignore header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/video.hpp


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/background_segm.hpp =====
Namespaces: ['cv']

--- Incoming ---
['class cv.BackgroundSubtractor', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.BackgroundSubtractor : Algorithm, name: BackgroundSubtractor, base: Algorithm

--- Incoming ---
[   'cv.BackgroundSubtractor.apply',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'fgmask', '', ['/O']],
        ['double', 'learningRate', '-1', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractor.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>

--- Incoming ---
[   'cv.BackgroundSubtractor.getBackgroundImage',
    'void',
    ['/C', '/V', '/PV'],
    [['Mat', 'backgroundImage', '', ['/O']]],
    'void']
ok: FUNC <void cv.BackgroundSubtractor.getBackgroundImage [ARG Mat backgroundImage=]>

--- Incoming ---
[   'class cv.BackgroundSubtractorMOG2',
    ': cv::BackgroundSubtractor',
    [],
    [],
    None]
ok: class CLASS cv::.BackgroundSubtractorMOG2 : BackgroundSubtractor, name: BackgroundSubtractorMOG2, base: BackgroundSubtractor

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getHistory',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getHistory []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setHistory',
    'void',
    ['/V', '/PV'],
    [['int', 'history', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setHistory [ARG int history=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getNMixtures',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getNMixtures []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setNMixtures',
    'void',
    ['/V', '/PV'],
    [['int', 'nmixtures', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setNMixtures [ARG int nmixtures=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getBackgroundRatio',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getBackgroundRatio []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setBackgroundRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'ratio', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setBackgroundRatio [ARG double ratio=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'varThreshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarThreshold [ARG double varThreshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarThresholdGen',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarThresholdGen []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarThresholdGen',
    'void',
    ['/V', '/PV'],
    [['double', 'varThresholdGen', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarThresholdGen [ARG double varThresholdGen=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarInit',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarInit []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarInit',
    'void',
    ['/V', '/PV'],
    [['double', 'varInit', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarInit [ARG double varInit=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarMin',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarMin []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarMin',
    'void',
    ['/V', '/PV'],
    [['double', 'varMin', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarMin [ARG double varMin=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarMax',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarMax []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarMax',
    'void',
    ['/V', '/PV'],
    [['double', 'varMax', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarMax [ARG double varMax=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'ct', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold [ARG double ct=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getDetectShadows',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.BackgroundSubtractorMOG2.getDetectShadows []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setDetectShadows',
    'void',
    ['/V', '/PV'],
    [['bool', 'detectShadows', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setDetectShadows [ARG bool detectShadows=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getShadowValue',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getShadowValue []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setShadowValue',
    'void',
    ['/V', '/PV'],
    [['int', 'value', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setShadowValue [ARG int value=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getShadowThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getShadowThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setShadowThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setShadowThreshold [ARG double threshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.apply',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'fgmask', '', ['/O']],
        ['double', 'learningRate', '-1', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>

--- Incoming ---
[   'cv.createBackgroundSubtractorMOG2',
    'Ptr_BackgroundSubtractorMOG2',
    [],
    [   ['int', 'history', '500', []],
        ['double', 'varThreshold', '16', []],
        ['bool', 'detectShadows', 'true', []]],
    'Ptr<BackgroundSubtractorMOG2>']
ok: FUNC <Ptr_BackgroundSubtractorMOG2 cv..createBackgroundSubtractorMOG2 [ARG int history=500, ARG double varThreshold=16, ARG bool detectShadows=true]>

--- Incoming ---
['class cv.BackgroundSubtractorKNN', ': cv::BackgroundSubtractor', [], [], None]
ok: class CLASS cv::.BackgroundSubtractorKNN : BackgroundSubtractor, name: BackgroundSubtractorKNN, base: BackgroundSubtractor

--- Incoming ---
['cv.BackgroundSubtractorKNN.getHistory', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getHistory []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setHistory',
    'void',
    ['/V', '/PV'],
    [['int', 'history', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setHistory [ARG int history=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getNSamples',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getNSamples []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setNSamples',
    'void',
    ['/V', '/PV'],
    [['int', '_nN', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setNSamples [ARG int _nN=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getDist2Threshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorKNN.getDist2Threshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setDist2Threshold',
    'void',
    ['/V', '/PV'],
    [['double', '_dist2Threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setDist2Threshold [ARG double _dist2Threshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getkNNSamples',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getkNNSamples []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setkNNSamples',
    'void',
    ['/V', '/PV'],
    [['int', '_nkNN', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setkNNSamples [ARG int _nkNN=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getDetectShadows',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.BackgroundSubtractorKNN.getDetectShadows []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setDetectShadows',
    'void',
    ['/V', '/PV'],
    [['bool', 'detectShadows', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setDetectShadows [ARG bool detectShadows=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getShadowValue',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getShadowValue []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setShadowValue',
    'void',
    ['/V', '/PV'],
    [['int', 'value', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setShadowValue [ARG int value=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getShadowThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorKNN.getShadowThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setShadowThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setShadowThreshold [ARG double threshold=]>

--- Incoming ---
[   'cv.createBackgroundSubtractorKNN',
    'Ptr_BackgroundSubtractorKNN',
    [],
    [   ['int', 'history', '500', []],
        ['double', 'dist2Threshold', '400.0', []],
        ['bool', 'detectShadows', 'true', []]],
    'Ptr<BackgroundSubtractorKNN>']
ok: FUNC <Ptr_BackgroundSubtractorKNN cv..createBackgroundSubtractorKNN [ARG int history=500, ARG double dist2Threshold=400.0, ARG bool detectShadows=true]>


===== Header: /home/adminlab/franka_ros2_ws/src/opencv/modules/video/include/opencv2/video/detail/tracking.detail.hpp =====
Namespaces: ['cv', 'cv.detail']

--- Incoming ---
[   'enum cv.detail.TrackerSamplerCSC.MODE',
    '',
    [],
    [   [   'const cv.detail.TrackerSamplerCSC.MODE_INIT_POS',
            '1',
            [],
            [],
            None,
            ''],
        [   'const cv.detail.TrackerSamplerCSC.MODE_INIT_NEG',
            '2',
            [],
            [],
            None,
            ''],
        [   'const cv.detail.TrackerSamplerCSC.MODE_TRACK_POS',
            '3',
            [],
            [],
            None,
            ''],
        [   'const cv.detail.TrackerSamplerCSC.MODE_TRACK_NEG',
            '4',
            [],
            [],
            None,
            ''],
        [   'const cv.detail.TrackerSamplerCSC.MODE_DETECT',
            '5',
            [],
            [],
            None,
            '']],
    None]
class not found: CONST MODE_INIT_POS=1
ok: CONST TrackerSamplerCSC_MODE_INIT_POS=1
class not found: CONST MODE_INIT_NEG=2
ok: CONST TrackerSamplerCSC_MODE_INIT_NEG=2
class not found: CONST MODE_TRACK_POS=3
ok: CONST TrackerSamplerCSC_MODE_TRACK_POS=3
class not found: CONST MODE_TRACK_NEG=4
ok: CONST TrackerSamplerCSC_MODE_TRACK_NEG=4
class not found: CONST MODE_DETECT=5
ok: CONST TrackerSamplerCSC_MODE_DETECT=5


===== Generating... =====
CLASS cv::.BackgroundSubtractor : Algorithm
FUNC <void cv.BackgroundSubtractor.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>
java: void apply(Mat image, Mat fgmask, double learningRate)
java: void apply(Mat image, Mat fgmask)
FUNC <void cv.BackgroundSubtractor.getBackgroundImage [ARG Mat backgroundImage=]>
java: void getBackgroundImage(Mat backgroundImage)
CLASS cv::.BackgroundSubtractorKNN : BackgroundSubtractor
FUNC <int cv.BackgroundSubtractorKNN.getHistory []>
java: int getHistory()
FUNC <void cv.BackgroundSubtractorKNN.setHistory [ARG int history=]>
java: void setHistory(int history)
FUNC <int cv.BackgroundSubtractorKNN.getNSamples []>
java: int getNSamples()
FUNC <void cv.BackgroundSubtractorKNN.setNSamples [ARG int _nN=]>
java: void setNSamples(int _nN)
FUNC <double cv.BackgroundSubtractorKNN.getDist2Threshold []>
java: double getDist2Threshold()
FUNC <void cv.BackgroundSubtractorKNN.setDist2Threshold [ARG double _dist2Threshold=]>
java: void setDist2Threshold(double _dist2Threshold)
FUNC <int cv.BackgroundSubtractorKNN.getkNNSamples []>
java: int getkNNSamples()
FUNC <void cv.BackgroundSubtractorKNN.setkNNSamples [ARG int _nkNN=]>
java: void setkNNSamples(int _nkNN)
FUNC <bool cv.BackgroundSubtractorKNN.getDetectShadows []>
java: boolean getDetectShadows()
FUNC <void cv.BackgroundSubtractorKNN.setDetectShadows [ARG bool detectShadows=]>
java: void setDetectShadows(boolean detectShadows)
FUNC <int cv.BackgroundSubtractorKNN.getShadowValue []>
java: int getShadowValue()
FUNC <void cv.BackgroundSubtractorKNN.setShadowValue [ARG int value=]>
java: void setShadowValue(int value)
FUNC <double cv.BackgroundSubtractorKNN.getShadowThreshold []>
java: double getShadowThreshold()
FUNC <void cv.BackgroundSubtractorKNN.setShadowThreshold [ARG double threshold=]>
java: void setShadowThreshold(double threshold)
CLASS cv::.BackgroundSubtractorMOG2 : BackgroundSubtractor
FUNC <int cv.BackgroundSubtractorMOG2.getHistory []>
java: int getHistory()
FUNC <void cv.BackgroundSubtractorMOG2.setHistory [ARG int history=]>
java: void setHistory(int history)
FUNC <int cv.BackgroundSubtractorMOG2.getNMixtures []>
java: int getNMixtures()
FUNC <void cv.BackgroundSubtractorMOG2.setNMixtures [ARG int nmixtures=]>
java: void setNMixtures(int nmixtures)
FUNC <double cv.BackgroundSubtractorMOG2.getBackgroundRatio []>
java: double getBackgroundRatio()
FUNC <void cv.BackgroundSubtractorMOG2.setBackgroundRatio [ARG double ratio=]>
java: void setBackgroundRatio(double ratio)
FUNC <double cv.BackgroundSubtractorMOG2.getVarThreshold []>
java: double getVarThreshold()
FUNC <void cv.BackgroundSubtractorMOG2.setVarThreshold [ARG double varThreshold=]>
java: void setVarThreshold(double varThreshold)
FUNC <double cv.BackgroundSubtractorMOG2.getVarThresholdGen []>
java: double getVarThresholdGen()
FUNC <void cv.BackgroundSubtractorMOG2.setVarThresholdGen [ARG double varThresholdGen=]>
java: void setVarThresholdGen(double varThresholdGen)
FUNC <double cv.BackgroundSubtractorMOG2.getVarInit []>
java: double getVarInit()
FUNC <void cv.BackgroundSubtractorMOG2.setVarInit [ARG double varInit=]>
java: void setVarInit(double varInit)
FUNC <double cv.BackgroundSubtractorMOG2.getVarMin []>
java: double getVarMin()
FUNC <void cv.BackgroundSubtractorMOG2.setVarMin [ARG double varMin=]>
java: void setVarMin(double varMin)
FUNC <double cv.BackgroundSubtractorMOG2.getVarMax []>
java: double getVarMax()
FUNC <void cv.BackgroundSubtractorMOG2.setVarMax [ARG double varMax=]>
java: void setVarMax(double varMax)
FUNC <double cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold []>
java: double getComplexityReductionThreshold()
FUNC <void cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold [ARG double ct=]>
java: void setComplexityReductionThreshold(double ct)
FUNC <bool cv.BackgroundSubtractorMOG2.getDetectShadows []>
java: boolean getDetectShadows()
FUNC <void cv.BackgroundSubtractorMOG2.setDetectShadows [ARG bool detectShadows=]>
java: void setDetectShadows(boolean detectShadows)
FUNC <int cv.BackgroundSubtractorMOG2.getShadowValue []>
java: int getShadowValue()
FUNC <void cv.BackgroundSubtractorMOG2.setShadowValue [ARG int value=]>
java: void setShadowValue(int value)
FUNC <double cv.BackgroundSubtractorMOG2.getShadowThreshold []>
java: double getShadowThreshold()
FUNC <void cv.BackgroundSubtractorMOG2.setShadowThreshold [ARG double threshold=]>
java: void setShadowThreshold(double threshold)
FUNC <void cv.BackgroundSubtractorMOG2.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>
java: void apply(Mat image, Mat fgmask, double learningRate)
java: void apply(Mat image, Mat fgmask)
CLASS cv::.DISOpticalFlow : DenseOpticalFlow
[CONST PRESET_ULTRAFAST=0, CONST PRESET_FAST=1, CONST PRESET_MEDIUM=2]
FUNC <int cv.DISOpticalFlow.getFinestScale []>
java: int getFinestScale()
FUNC <void cv.DISOpticalFlow.setFinestScale [ARG int val=]>
java: void setFinestScale(int val)
FUNC <int cv.DISOpticalFlow.getPatchSize []>
java: int getPatchSize()
FUNC <void cv.DISOpticalFlow.setPatchSize [ARG int val=]>
java: void setPatchSize(int val)
FUNC <int cv.DISOpticalFlow.getPatchStride []>
java: int getPatchStride()
FUNC <void cv.DISOpticalFlow.setPatchStride [ARG int val=]>
java: void setPatchStride(int val)
FUNC <int cv.DISOpticalFlow.getGradientDescentIterations []>
java: int getGradientDescentIterations()
FUNC <void cv.DISOpticalFlow.setGradientDescentIterations [ARG int val=]>
java: void setGradientDescentIterations(int val)
FUNC <int cv.DISOpticalFlow.getVariationalRefinementIterations []>
java: int getVariationalRefinementIterations()
FUNC <void cv.DISOpticalFlow.setVariationalRefinementIterations [ARG int val=]>
java: void setVariationalRefinementIterations(int val)
FUNC <float cv.DISOpticalFlow.getVariationalRefinementAlpha []>
java: float getVariationalRefinementAlpha()
FUNC <void cv.DISOpticalFlow.setVariationalRefinementAlpha [ARG float val=]>
java: void setVariationalRefinementAlpha(float val)
FUNC <float cv.DISOpticalFlow.getVariationalRefinementDelta []>
java: float getVariationalRefinementDelta()
FUNC <void cv.DISOpticalFlow.setVariationalRefinementDelta [ARG float val=]>
java: void setVariationalRefinementDelta(float val)
FUNC <float cv.DISOpticalFlow.getVariationalRefinementGamma []>
java: float getVariationalRefinementGamma()
FUNC <void cv.DISOpticalFlow.setVariationalRefinementGamma [ARG float val=]>
java: void setVariationalRefinementGamma(float val)
FUNC <float cv.DISOpticalFlow.getVariationalRefinementEpsilon []>
java: float getVariationalRefinementEpsilon()
FUNC <void cv.DISOpticalFlow.setVariationalRefinementEpsilon [ARG float val=]>
java: void setVariationalRefinementEpsilon(float val)
FUNC <bool cv.DISOpticalFlow.getUseMeanNormalization []>
java: boolean getUseMeanNormalization()
FUNC <void cv.DISOpticalFlow.setUseMeanNormalization [ARG bool val=]>
java: void setUseMeanNormalization(boolean val)
FUNC <bool cv.DISOpticalFlow.getUseSpatialPropagation []>
java: boolean getUseSpatialPropagation()
FUNC <void cv.DISOpticalFlow.setUseSpatialPropagation [ARG bool val=]>
java: void setUseSpatialPropagation(boolean val)
FUNC <Ptr_DISOpticalFlow cv.DISOpticalFlow.create [ARG int preset=DISOpticalFlow::PRESET_FAST]>
java: DISOpticalFlow create(int preset)
java: DISOpticalFlow create()
CLASS cv::.DenseOpticalFlow : Algorithm
FUNC <void cv.DenseOpticalFlow.calc [ARG Mat I0=, ARG Mat I1=, ARG Mat flow=]>
java: void calc(Mat I0, Mat I1, Mat flow)
FUNC <void cv.DenseOpticalFlow.collectGarbage []>
java: void collectGarbage()
CLASS cv::.FarnebackOpticalFlow : DenseOpticalFlow
FUNC <int cv.FarnebackOpticalFlow.getNumLevels []>
java: int getNumLevels()
FUNC <void cv.FarnebackOpticalFlow.setNumLevels [ARG int numLevels=]>
java: void setNumLevels(int numLevels)
FUNC <double cv.FarnebackOpticalFlow.getPyrScale []>
java: double getPyrScale()
FUNC <void cv.FarnebackOpticalFlow.setPyrScale [ARG double pyrScale=]>
java: void setPyrScale(double pyrScale)
FUNC <bool cv.FarnebackOpticalFlow.getFastPyramids []>
java: boolean getFastPyramids()
FUNC <void cv.FarnebackOpticalFlow.setFastPyramids [ARG bool fastPyramids=]>
java: void setFastPyramids(boolean fastPyramids)
FUNC <int cv.FarnebackOpticalFlow.getWinSize []>
java: int getWinSize()
FUNC <void cv.FarnebackOpticalFlow.setWinSize [ARG int winSize=]>
java: void setWinSize(int winSize)
FUNC <int cv.FarnebackOpticalFlow.getNumIters []>
java: int getNumIters()
FUNC <void cv.FarnebackOpticalFlow.setNumIters [ARG int numIters=]>
java: void setNumIters(int numIters)
FUNC <int cv.FarnebackOpticalFlow.getPolyN []>
java: int getPolyN()
FUNC <void cv.FarnebackOpticalFlow.setPolyN [ARG int polyN=]>
java: void setPolyN(int polyN)
FUNC <double cv.FarnebackOpticalFlow.getPolySigma []>
java: double getPolySigma()
FUNC <void cv.FarnebackOpticalFlow.setPolySigma [ARG double polySigma=]>
java: void setPolySigma(double polySigma)
FUNC <int cv.FarnebackOpticalFlow.getFlags []>
java: int getFlags()
FUNC <void cv.FarnebackOpticalFlow.setFlags [ARG int flags=]>
java: void setFlags(int flags)
FUNC <Ptr_FarnebackOpticalFlow cv.FarnebackOpticalFlow.create [ARG int numLevels=5, ARG double pyrScale=0.5, ARG bool fastPyramids=false, ARG int winSize=13, ARG int numIters=10, ARG int polyN=5, ARG double polySigma=1.1, ARG int flags=0]>
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN, double polySigma, int flags)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN, double polySigma)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale)
java: FarnebackOpticalFlow create(int numLevels)
java: FarnebackOpticalFlow create()
CLASS cv::.KalmanFilter : 
FUNC < cv.KalmanFilter.KalmanFilter []>
java:  KalmanFilter()
FUNC < cv.KalmanFilter.KalmanFilter [ARG int dynamParams=, ARG int measureParams=, ARG int controlParams=0, ARG int type=CV_32F]>
java:  KalmanFilter(int dynamParams, int measureParams, int controlParams, int type)
java:  KalmanFilter(int dynamParams, int measureParams, int controlParams)
java:  KalmanFilter(int dynamParams, int measureParams)
FUNC <Mat cv.KalmanFilter.predict [ARG Mat control=Mat()]>
java: Mat predict(Mat control)
java: Mat predict()
FUNC <Mat cv.KalmanFilter.correct [ARG Mat measurement=]>
java: Mat correct(Mat measurement)
FUNC <Mat cv.KalmanFilter.get_statePre []>
java: Mat get_statePre()
FUNC <void cv.KalmanFilter.set_statePre [ARG Mat statePre=]>
java: void set_statePre(Mat statePre)
FUNC <Mat cv.KalmanFilter.get_statePost []>
java: Mat get_statePost()
FUNC <void cv.KalmanFilter.set_statePost [ARG Mat statePost=]>
java: void set_statePost(Mat statePost)
FUNC <Mat cv.KalmanFilter.get_transitionMatrix []>
java: Mat get_transitionMatrix()
FUNC <void cv.KalmanFilter.set_transitionMatrix [ARG Mat transitionMatrix=]>
java: void set_transitionMatrix(Mat transitionMatrix)
FUNC <Mat cv.KalmanFilter.get_controlMatrix []>
java: Mat get_controlMatrix()
FUNC <void cv.KalmanFilter.set_controlMatrix [ARG Mat controlMatrix=]>
java: void set_controlMatrix(Mat controlMatrix)
FUNC <Mat cv.KalmanFilter.get_measurementMatrix []>
java: Mat get_measurementMatrix()
FUNC <void cv.KalmanFilter.set_measurementMatrix [ARG Mat measurementMatrix=]>
java: void set_measurementMatrix(Mat measurementMatrix)
FUNC <Mat cv.KalmanFilter.get_processNoiseCov []>
java: Mat get_processNoiseCov()
FUNC <void cv.KalmanFilter.set_processNoiseCov [ARG Mat processNoiseCov=]>
java: void set_processNoiseCov(Mat processNoiseCov)
FUNC <Mat cv.KalmanFilter.get_measurementNoiseCov []>
java: Mat get_measurementNoiseCov()
FUNC <void cv.KalmanFilter.set_measurementNoiseCov [ARG Mat measurementNoiseCov=]>
java: void set_measurementNoiseCov(Mat measurementNoiseCov)
FUNC <Mat cv.KalmanFilter.get_errorCovPre []>
java: Mat get_errorCovPre()
FUNC <void cv.KalmanFilter.set_errorCovPre [ARG Mat errorCovPre=]>
java: void set_errorCovPre(Mat errorCovPre)
FUNC <Mat cv.KalmanFilter.get_gain []>
java: Mat get_gain()
FUNC <void cv.KalmanFilter.set_gain [ARG Mat gain=]>
java: void set_gain(Mat gain)
FUNC <Mat cv.KalmanFilter.get_errorCovPost []>
java: Mat get_errorCovPost()
FUNC <void cv.KalmanFilter.set_errorCovPost [ARG Mat errorCovPost=]>
java: void set_errorCovPost(Mat errorCovPost)
CLASS cv::.SparseOpticalFlow : Algorithm
FUNC <void cv.SparseOpticalFlow.calc [ARG Mat prevImg=, ARG Mat nextImg=, ARG Mat prevPts=, ARG Mat nextPts=, ARG Mat status=, ARG Mat err=cv::Mat()]>
java: void calc(Mat prevImg, Mat nextImg, Mat prevPts, Mat nextPts, Mat status, Mat err)
java: void calc(Mat prevImg, Mat nextImg, Mat prevPts, Mat nextPts, Mat status)
CLASS cv::.SparsePyrLKOpticalFlow : SparseOpticalFlow
FUNC <Size cv.SparsePyrLKOpticalFlow.getWinSize []>
java: Size getWinSize()
FUNC <void cv.SparsePyrLKOpticalFlow.setWinSize [ARG Size winSize=]>
java: void setWinSize(Size winSize)
FUNC <int cv.SparsePyrLKOpticalFlow.getMaxLevel []>
java: int getMaxLevel()
FUNC <void cv.SparsePyrLKOpticalFlow.setMaxLevel [ARG int maxLevel=]>
java: void setMaxLevel(int maxLevel)
FUNC <TermCriteria cv.SparsePyrLKOpticalFlow.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <void cv.SparsePyrLKOpticalFlow.setTermCriteria [ARG TermCriteria crit=]>
java: void setTermCriteria(TermCriteria crit)
FUNC <int cv.SparsePyrLKOpticalFlow.getFlags []>
java: int getFlags()
FUNC <void cv.SparsePyrLKOpticalFlow.setFlags [ARG int flags=]>
java: void setFlags(int flags)
FUNC <double cv.SparsePyrLKOpticalFlow.getMinEigThreshold []>
java: double getMinEigThreshold()
FUNC <void cv.SparsePyrLKOpticalFlow.setMinEigThreshold [ARG double minEigThreshold=]>
java: void setMinEigThreshold(double minEigThreshold)
FUNC <Ptr_SparsePyrLKOpticalFlow cv.SparsePyrLKOpticalFlow.create [ARG Size winSize=Size(21, 21), ARG int maxLevel=3, ARG TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit, int flags, double minEigThreshold)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit, int flags)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel)
java: SparsePyrLKOpticalFlow create(Size winSize)
java: SparsePyrLKOpticalFlow create()
CLASS cv::.Tracker : 
FUNC <void cv.Tracker.init [ARG Mat image=, ARG Rect boundingBox=]>
java: void init(Mat image, Rect boundingBox)
FUNC <bool cv.Tracker.update [ARG Mat image=, ARG Rect boundingBox=]>
java: boolean update(Mat image, Rect boundingBox)
CLASS cv::.TrackerDaSiamRPN : Tracker
FUNC <Ptr_TrackerDaSiamRPN cv.TrackerDaSiamRPN.create [ARG TrackerDaSiamRPN_Params parameters=TrackerDaSiamRPN::Params()]>
java: TrackerDaSiamRPN create(TrackerDaSiamRPN_Params parameters)
java: TrackerDaSiamRPN create()
FUNC <float cv.TrackerDaSiamRPN.getTrackingScore []>
java: float getTrackingScore()
CLASS cv::TrackerDaSiamRPN.TrackerDaSiamRPN_Params : 
FUNC < cv.TrackerDaSiamRPN.Params.TrackerDaSiamRPN_Params []>
java:  TrackerDaSiamRPN_Params()
FUNC <string cv.TrackerDaSiamRPN.Params.get_model []>
java: String get_model()
FUNC <void cv.TrackerDaSiamRPN.Params.set_model [ARG string model=]>
java: void set_model(String model)
FUNC <string cv.TrackerDaSiamRPN.Params.get_kernel_cls1 []>
java: String get_kernel_cls1()
FUNC <void cv.TrackerDaSiamRPN.Params.set_kernel_cls1 [ARG string kernel_cls1=]>
java: void set_kernel_cls1(String kernel_cls1)
FUNC <string cv.TrackerDaSiamRPN.Params.get_kernel_r1 []>
java: String get_kernel_r1()
FUNC <void cv.TrackerDaSiamRPN.Params.set_kernel_r1 [ARG string kernel_r1=]>
java: void set_kernel_r1(String kernel_r1)
FUNC <int cv.TrackerDaSiamRPN.Params.get_backend []>
java: int get_backend()
FUNC <void cv.TrackerDaSiamRPN.Params.set_backend [ARG int backend=]>
java: void set_backend(int backend)
FUNC <int cv.TrackerDaSiamRPN.Params.get_target []>
java: int get_target()
FUNC <void cv.TrackerDaSiamRPN.Params.set_target [ARG int target=]>
java: void set_target(int target)
CLASS cv::.TrackerGOTURN : Tracker
FUNC <Ptr_TrackerGOTURN cv.TrackerGOTURN.create [ARG TrackerGOTURN_Params parameters=TrackerGOTURN::Params()]>
java: TrackerGOTURN create(TrackerGOTURN_Params parameters)
java: TrackerGOTURN create()
CLASS cv::TrackerGOTURN.TrackerGOTURN_Params : 
FUNC < cv.TrackerGOTURN.Params.TrackerGOTURN_Params []>
java:  TrackerGOTURN_Params()
FUNC <string cv.TrackerGOTURN.Params.get_modelTxt []>
java: String get_modelTxt()
FUNC <void cv.TrackerGOTURN.Params.set_modelTxt [ARG string modelTxt=]>
java: void set_modelTxt(String modelTxt)
FUNC <string cv.TrackerGOTURN.Params.get_modelBin []>
java: String get_modelBin()
FUNC <void cv.TrackerGOTURN.Params.set_modelBin [ARG string modelBin=]>
java: void set_modelBin(String modelBin)
CLASS cv::.TrackerMIL : Tracker
FUNC <Ptr_TrackerMIL cv.TrackerMIL.create [ARG TrackerMIL_Params parameters=TrackerMIL::Params()]>
java: TrackerMIL create(TrackerMIL_Params parameters)
java: TrackerMIL create()
CLASS cv::TrackerMIL.TrackerMIL_Params : 
FUNC < cv.TrackerMIL.Params.TrackerMIL_Params []>
java:  TrackerMIL_Params()
FUNC <float cv.TrackerMIL.Params.get_samplerInitInRadius []>
java: float get_samplerInitInRadius()
FUNC <void cv.TrackerMIL.Params.set_samplerInitInRadius [ARG float samplerInitInRadius=]>
java: void set_samplerInitInRadius(float samplerInitInRadius)
FUNC <int cv.TrackerMIL.Params.get_samplerInitMaxNegNum []>
java: int get_samplerInitMaxNegNum()
FUNC <void cv.TrackerMIL.Params.set_samplerInitMaxNegNum [ARG int samplerInitMaxNegNum=]>
java: void set_samplerInitMaxNegNum(int samplerInitMaxNegNum)
FUNC <float cv.TrackerMIL.Params.get_samplerSearchWinSize []>
java: float get_samplerSearchWinSize()
FUNC <void cv.TrackerMIL.Params.set_samplerSearchWinSize [ARG float samplerSearchWinSize=]>
java: void set_samplerSearchWinSize(float samplerSearchWinSize)
FUNC <float cv.TrackerMIL.Params.get_samplerTrackInRadius []>
java: float get_samplerTrackInRadius()
FUNC <void cv.TrackerMIL.Params.set_samplerTrackInRadius [ARG float samplerTrackInRadius=]>
java: void set_samplerTrackInRadius(float samplerTrackInRadius)
FUNC <int cv.TrackerMIL.Params.get_samplerTrackMaxPosNum []>
java: int get_samplerTrackMaxPosNum()
FUNC <void cv.TrackerMIL.Params.set_samplerTrackMaxPosNum [ARG int samplerTrackMaxPosNum=]>
java: void set_samplerTrackMaxPosNum(int samplerTrackMaxPosNum)
FUNC <int cv.TrackerMIL.Params.get_samplerTrackMaxNegNum []>
java: int get_samplerTrackMaxNegNum()
FUNC <void cv.TrackerMIL.Params.set_samplerTrackMaxNegNum [ARG int samplerTrackMaxNegNum=]>
java: void set_samplerTrackMaxNegNum(int samplerTrackMaxNegNum)
FUNC <int cv.TrackerMIL.Params.get_featureSetNumFeatures []>
java: int get_featureSetNumFeatures()
FUNC <void cv.TrackerMIL.Params.set_featureSetNumFeatures [ARG int featureSetNumFeatures=]>
java: void set_featureSetNumFeatures(int featureSetNumFeatures)
CLASS cv::.TrackerNano : Tracker
FUNC <Ptr_TrackerNano cv.TrackerNano.create [ARG TrackerNano_Params parameters=TrackerNano::Params()]>
java: TrackerNano create(TrackerNano_Params parameters)
java: TrackerNano create()
FUNC <float cv.TrackerNano.getTrackingScore []>
java: float getTrackingScore()
CLASS cv::TrackerNano.TrackerNano_Params : 
FUNC < cv.TrackerNano.Params.TrackerNano_Params []>
java:  TrackerNano_Params()
FUNC <string cv.TrackerNano.Params.get_backbone []>
java: String get_backbone()
FUNC <void cv.TrackerNano.Params.set_backbone [ARG string backbone=]>
java: void set_backbone(String backbone)
FUNC <string cv.TrackerNano.Params.get_neckhead []>
java: String get_neckhead()
FUNC <void cv.TrackerNano.Params.set_neckhead [ARG string neckhead=]>
java: void set_neckhead(String neckhead)
FUNC <int cv.TrackerNano.Params.get_backend []>
java: int get_backend()
FUNC <void cv.TrackerNano.Params.set_backend [ARG int backend=]>
java: void set_backend(int backend)
FUNC <int cv.TrackerNano.Params.get_target []>
java: int get_target()
FUNC <void cv.TrackerNano.Params.set_target [ARG int target=]>
java: void set_target(int target)
CLASS cv::.TrackerVit : Tracker
FUNC <Ptr_TrackerVit cv.TrackerVit.create [ARG TrackerVit_Params parameters=TrackerVit::Params()]>
java: TrackerVit create(TrackerVit_Params parameters)
java: TrackerVit create()
FUNC <float cv.TrackerVit.getTrackingScore []>
java: float getTrackingScore()
CLASS cv::TrackerVit.TrackerVit_Params : 
FUNC < cv.TrackerVit.Params.TrackerVit_Params []>
java:  TrackerVit_Params()
FUNC <string cv.TrackerVit.Params.get_net []>
java: String get_net()
FUNC <void cv.TrackerVit.Params.set_net [ARG string net=]>
java: void set_net(String net)
FUNC <int cv.TrackerVit.Params.get_backend []>
java: int get_backend()
FUNC <void cv.TrackerVit.Params.set_backend [ARG int backend=]>
java: void set_backend(int backend)
FUNC <int cv.TrackerVit.Params.get_target []>
java: int get_target()
FUNC <void cv.TrackerVit.Params.set_target [ARG int target=]>
java: void set_target(int target)
FUNC <Scalar cv.TrackerVit.Params.get_meanvalue []>
java: Scalar get_meanvalue()
FUNC <void cv.TrackerVit.Params.set_meanvalue [ARG Scalar meanvalue=]>
java: void set_meanvalue(Scalar meanvalue)
FUNC <Scalar cv.TrackerVit.Params.get_stdvalue []>
java: Scalar get_stdvalue()
FUNC <void cv.TrackerVit.Params.set_stdvalue [ARG Scalar stdvalue=]>
java: void set_stdvalue(Scalar stdvalue)
CLASS cv::.VariationalRefinement : DenseOpticalFlow
FUNC <void cv.VariationalRefinement.calcUV [ARG Mat I0=, ARG Mat I1=, ARG Mat flow_u=, ARG Mat flow_v=]>
java: void calcUV(Mat I0, Mat I1, Mat flow_u, Mat flow_v)
FUNC <int cv.VariationalRefinement.getFixedPointIterations []>
java: int getFixedPointIterations()
FUNC <void cv.VariationalRefinement.setFixedPointIterations [ARG int val=]>
java: void setFixedPointIterations(int val)
FUNC <int cv.VariationalRefinement.getSorIterations []>
java: int getSorIterations()
FUNC <void cv.VariationalRefinement.setSorIterations [ARG int val=]>
java: void setSorIterations(int val)
FUNC <float cv.VariationalRefinement.getOmega []>
java: float getOmega()
FUNC <void cv.VariationalRefinement.setOmega [ARG float val=]>
java: void setOmega(float val)
FUNC <float cv.VariationalRefinement.getAlpha []>
java: float getAlpha()
FUNC <void cv.VariationalRefinement.setAlpha [ARG float val=]>
java: void setAlpha(float val)
FUNC <float cv.VariationalRefinement.getDelta []>
java: float getDelta()
FUNC <void cv.VariationalRefinement.setDelta [ARG float val=]>
java: void setDelta(float val)
FUNC <float cv.VariationalRefinement.getGamma []>
java: float getGamma()
FUNC <void cv.VariationalRefinement.setGamma [ARG float val=]>
java: void setGamma(float val)
FUNC <float cv.VariationalRefinement.getEpsilon []>
java: float getEpsilon()
FUNC <void cv.VariationalRefinement.setEpsilon [ARG float val=]>
java: void setEpsilon(float val)
FUNC <Ptr_VariationalRefinement cv.VariationalRefinement.create []>
java: VariationalRefinement create()
CLASS cv::.Video : 
[CONST CV_LKFLOW_INITIAL_GUESSES=4(manual), CONST CV_LKFLOW_GET_MIN_EIGENVALS=8(manual)]
[CONST OPTFLOW_USE_INITIAL_FLOW=4, CONST OPTFLOW_LK_GET_MIN_EIGENVALS=8, CONST OPTFLOW_FARNEBACK_GAUSSIAN=256, CONST MOTION_TRANSLATION=0, CONST MOTION_EUCLIDEAN=1, CONST MOTION_AFFINE=2, CONST MOTION_HOMOGRAPHY=3]
[CONST TrackerSamplerCSC_MODE_INIT_POS=1, CONST TrackerSamplerCSC_MODE_INIT_NEG=2, CONST TrackerSamplerCSC_MODE_TRACK_POS=3, CONST TrackerSamplerCSC_MODE_TRACK_NEG=4, CONST TrackerSamplerCSC_MODE_DETECT=5]
FUNC <RotatedRect cv..CamShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>
java: RotatedRect CamShift(Mat probImage, Rect window, TermCriteria criteria)
FUNC <int cv..meanShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>
java: int meanShift(Mat probImage, Rect window, TermCriteria criteria)
FUNC <int cv..buildOpticalFlowPyramid [ARG Mat img=, ARG vector_Mat pyramid=, ARG Size winSize=, ARG int maxLevel=, ARG bool withDerivatives=true, ARG int pyrBorder=BORDER_REFLECT_101, ARG int derivBorder=BORDER_CONSTANT, ARG bool tryReuseInputImage=true]>
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder, int derivBorder, boolean tryReuseInputImage)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder, int derivBorder)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel)
FUNC <void cv..calcOpticalFlowPyrLK [ARG Mat prevImg=, ARG Mat nextImg=, ARG vector_Point2f prevPts=, ARG vector_Point2f nextPts=, ARG vector_uchar status=, ARG vector_float err=, ARG Size winSize=Size(21,21), ARG int maxLevel=3, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria, int flags, double minEigThreshold)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria, int flags)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err)
FUNC <void cv..calcOpticalFlowFarneback [ARG Mat prev=, ARG Mat next=, ARG Mat flow=, ARG double pyr_scale=, ARG int levels=, ARG int winsize=, ARG int iterations=, ARG int poly_n=, ARG double poly_sigma=, ARG int flags=]>
java: void calcOpticalFlowFarneback(Mat prev, Mat next, Mat flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)
FUNC <double cv..computeECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat inputMask=Mat()]>
java: double computeECC(Mat templateImage, Mat inputImage, Mat inputMask)
java: double computeECC(Mat templateImage, Mat inputImage)
FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=, ARG TermCriteria criteria=, ARG Mat inputMask=, ARG int gaussFiltSize=]>
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType, TermCriteria criteria, Mat inputMask, int gaussFiltSize)
FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=MOTION_AFFINE, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), ARG Mat inputMask=Mat()]>
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType, TermCriteria criteria, Mat inputMask)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType, TermCriteria criteria)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix)
FUNC <Mat cv..readOpticalFlow [ARG String path=]>
java: Mat readOpticalFlow(String path)
FUNC <bool cv..writeOpticalFlow [ARG String path=, ARG Mat flow=]>
java: boolean writeOpticalFlow(String path, Mat flow)
FUNC <Ptr_BackgroundSubtractorMOG2 cv..createBackgroundSubtractorMOG2 [ARG int history=500, ARG double varThreshold=16, ARG bool detectShadows=true]>
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history, double varThreshold, boolean detectShadows)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history, double varThreshold)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2()
FUNC <Ptr_BackgroundSubtractorKNN cv..createBackgroundSubtractorKNN [ARG int history=500, ARG double dist2Threshold=400.0, ARG bool detectShadows=true]>
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history, double dist2Threshold, boolean detectShadows)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history, double dist2Threshold)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN()
